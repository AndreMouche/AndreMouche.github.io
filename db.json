{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1465785518000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1465785518000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1465785518000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1465785518000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1465785518000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1465785518000},{"_id":"source/_posts/2010-12-24-algorithm-金币阵列问题.md","hash":"8e578dc9dc38799c5fe5f921c6e1629c029073da","modified":1465785573000},{"_id":"source/_posts/2010-12-25-algorithm-硬币找钱问题.md","hash":"b00fa0db31491b2582903d5a3cbab2a884b690a7","modified":1465785573000},{"_id":"source/_posts/2010-12-31-algorithm-字典序问题.md","hash":"6add8e4b30730e0b1f7f75a03f17d77f9c9b5eb9","modified":1465785573000},{"_id":"source/_posts/2010-12-31-algorithm-统计数字问题.md","hash":"79fcc1a9c018b3cb158b18638905d06c5ccc6007","modified":1465785573000},{"_id":"source/_posts/2011-01-24-algorithm-dp-POJ-3211-Washing-Clothes.md","hash":"2808f5015b330420e8edb8adb88b22aea09da853","modified":1465785573000},{"_id":"source/_posts/2011-01-25-POJ-3756-Chess-Game.md","hash":"818324ab83532ee6bd2c87fce7fe9190b14ba71d","modified":1465785573000},{"_id":"source/_posts/2011-01-25-algorithm-poj-1761-Easy-Task.md","hash":"5078fa6e99f995abe88b2e27700912ab467feab6","modified":1465785573000},{"_id":"source/_posts/2011-01-27-Algorithm-POJ-3254-Corn-Fields.md","hash":"fc629ca1faeff0aef0fe9b49015874900f46a0da","modified":1465785573000},{"_id":"source/_posts/2011-01-27-algorithm-POJ-1806-Manhattan-2025.md","hash":"829be9948a74563eafadf2e6c6239649cfe8fe59","modified":1465785573000},{"_id":"source/_posts/2011-01-27-algorithm-POJ-3735-Training-little-cats.md","hash":"748badb6dbdf21c6e4b34dbb186f7414c8f84611","modified":1465785573000},{"_id":"source/_posts/2011-01-28-Algorithm-HDU-1074-Doing-Homework.md","hash":"6c530ae06e07cc6e881a0f78da4ac89ac9320b73","modified":1465785573000},{"_id":"source/_posts/2011-01-28-algorithm-POJ-1185.md","hash":"2e9689b4128b84a81e98da317b3f3703c11ad46d","modified":1465785573000},{"_id":"source/_posts/2011-01-29-Algorithm-POJ-2418-Hardwood-Species.md","hash":"7fae768b22168d85b9fa190a37c916ea6b71625d","modified":1465785573000},{"_id":"source/_posts/2011-01-29-algorithm-POJ-3281-Dining.md","hash":"c2b553c3234dcc7d6d969932fa70d65968bfe37f","modified":1465785573000},{"_id":"source/_posts/2011-02-10-Algorithm-POJ-3067-Japan.md","hash":"fc14c379eb18cef76c8e341d342652c91a4c4e0c","modified":1465785573000},{"_id":"source/_posts/2011-02-11-Algorithm-POJ-1948-Triangular-Pastures.md","hash":"8da5632419a3a1249786a7bbd3510e19f00569fb","modified":1465785573000},{"_id":"source/_posts/2011-02-11-POJ-1681-Painter's-Problem.md","hash":"99025840ed8517c29f54161e364cc2642ff75a26","modified":1465785573000},{"_id":"source/_posts/2013-08-05-skiplist.md","hash":"758e4614a7b046e00520f4325e3513a70138cd84","modified":1465785573000},{"_id":"source/_posts/2013-08-27-基于levigo做二次开发.md","hash":"65763d0b6cbb58e0761a12a4d170a3ed0fe25442","modified":1465785573000},{"_id":"source/_posts/2014-09-22-three-year-summary.md","hash":"062fd9b2d9d4cab1443deca9ba82bedca7fd0ec6","modified":1465785573000},{"_id":"source/_posts/2014-10-09-configure-install-nginx-on-mac.md","hash":"2d2fc0bc3971e55ac3aa73e2210b6ba3796e6c05","modified":1465785573000},{"_id":"source/_posts/2014-10-09-graphicsmagick-pingImage.md","hash":"4315f582e09bd38b9661ffcbfef7a587fbf99058","modified":1465785573000},{"_id":"source/_posts/2014-10-11-graphicsmagick-CompositeImage.md","hash":"408e5867d0bf8891948ef4b66d2d205ea7dbc452","modified":1465785573000},{"_id":"source/_posts/2014-10-13-annotate_image.md","hash":"48f1a5fdcde51f01ad3496e949892e65e2f6e324","modified":1465785573000},{"_id":"source/_posts/2014-10-17-graphicsmagick-webp.md","hash":"b494f962b8e2f5da34faf2cc374e7feff8f414eb","modified":1465785573000},{"_id":"source/_posts/2014-10-20-graphicsmagick-convert-image.md","hash":"b886deb56b9981a4a88ea3889d99ac7b3008fb81","modified":1465785573000},{"_id":"source/_posts/2014-10-27-graphicsmagick-rotate-image.md","hash":"0ba507754f31a1146580e73f3e63c295ff23006c","modified":1465785573000},{"_id":"source/_posts/2014-12-10-leetcode-candy.md","hash":"02552529689bc57a8e6c3b4d76fb05cbee258678","modified":1465785573000},{"_id":"source/_posts/2014-11-11-virtualbox-network.md","hash":"f88fa22e7b395f30f2f2619ca1fcd918b7903021","modified":1465785573000},{"_id":"source/_posts/2014-12-25-text-watermark.md","hash":"b4afea10c28be0eb23cd3716b902a6ed56ed430a","modified":1465785573000},{"_id":"source/_posts/2015-01-03-algorithm-leetcode-candy.md","hash":"964e1a65ddb634d127fa3654d20be1480de4d3b2","modified":1465785573000},{"_id":"source/_posts/2015-02-03-weed-fs-api-master-server.md","hash":"2348ade8e0452772a68ec12e269e458d6d2e9f4a","modified":1465785573000},{"_id":"source/_posts/2015-02-04-weed-fs-api-volume-server.md","hash":"a5659e35bffc3e9acc824bc0127e87d602884af2","modified":1465785573000},{"_id":"source/_posts/2015-02-06-golang-http-tips.md","hash":"dc7ac2c4f0f5746b504145dfdaf2a8c5655be802","modified":1465785573000},{"_id":"source/_posts/2015-03-04-graphics-BPG.md","hash":"3d31cd28dac8bd2ed81eac18989681835515f9a5","modified":1465785573000},{"_id":"source/_posts/2015-03-16-ffmpeg-audio.md","hash":"8c9cd143429f950cc892d4a92db36ae1b7803e31","modified":1465785573000},{"_id":"source/_posts/2015-03-25-linux-c-perf.md","hash":"220bd86c0df23a209dd8304a019b6f168bfe1d83","modified":1465785573000},{"_id":"source/_posts/2015-05-31-nginx-introduction-I.md","hash":"c4f12c491a8d49cdd437bde3bad4f1dab6731d8e","modified":1465785573000},{"_id":"source/_posts/2015-06-08-nginx-introduction-III.md","hash":"8013d8ff4ca7e9d2aee3c1cba0ade9504282c76e","modified":1465785573000},{"_id":"source/_posts/2015-06-03-nginx-introduction-II.md","hash":"75eff2c4bf4516d2c2c94a49c97e88c12c1564b8","modified":1465785573000},{"_id":"source/_posts/2015-06-10-nginx-introduction-IV.md","hash":"77eb34e534973f51c238a8a076cf97f3d1fb1599","modified":1465785573000},{"_id":"source/_posts/2015-06-25-nginx-introduction-V.md","hash":"91d4f5172b7cc149a52ccb273b60c1ccbe2ff274","modified":1465785573000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1465785518000},{"_id":"source/_posts/2015-08-04-nginx-internal-basic-architecture.md","hash":"f0242968910409ed106f13430cf5009658e9f007","modified":1465785573000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1465785518000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1465785518000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1465785518000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1465785518000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1465785518000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1465785518000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1465785518000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1465785518000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1465785518000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1465785518000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465785518000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1465785518000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465785518000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1465785518000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1465785518000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1465785518000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1465785518000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1465785518000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1465785518000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1465785518000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1465785518000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1465785518000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1465785518000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1465785518000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1465785518000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1465785518000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1465785518000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1465785518000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1465785518000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465785518000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1465785518000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1465785518000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1465785518000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1465785518000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1465786329000},{"_id":"themes/apollo/README.md","hash":"24578c41ed4c22aed948bdd975e7ce25479cb4a9","modified":1465786329000},{"_id":"themes/apollo/_config.yml","hash":"bd0e5cd3449b0f4a1c6d2bdb1968b061522d4fae","modified":1465786329000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1465786329000},{"_id":"themes/apollo/package.json","hash":"9426138c09ebb95969021d951590c0c54b187a43","modified":1465786329000},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1465786329000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1465786329000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1465786329000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1465786329000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1465786329000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1465786329000},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1465786329000},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1465786329000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1465786329000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1465786329000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1465786329000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"1ac04b9dbcff6cc5c1ac8304d5ec86ffeed12183","modified":1465786329000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1465786329000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"51b2ba6a1cebb275730eb7131eea211c91f0986a","modified":1465786329000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"c35d3061da4b053b73150d9741c542d660798270","modified":1465786329000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"aec16d074567d0e408b864a42fd11d107c10f10b","modified":1465786329000},{"_id":"themes/apollo/source/css/apollo.css","hash":"9a5ff2fbb383beb4451b98d2c516f10590e30ca0","modified":1465786329000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"a3153dfedbaff08c20930b2bde95f2db49f6d518","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"187315928040112ac5b9b2c0c6b2f406cf45813b","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1465786329000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"aec29b69af865249617624e1ee849792fd524cf9","modified":1465786329000}],"Category":[{"name":"algorithm","_id":"cipdewhfs0003qj7lnzkq11kz"},{"name":"storage engine","_id":"cipdewhgz001pqj7ltivh6ha0"},{"name":"thinking","_id":"cipdewhh3001zqj7ltwejw6op"},{"name":"nginx","_id":"cipdewhh60027qj7lzm0enevw"},{"name":"GraphicsMagick","_id":"cipdewhha002eqj7loh6qd1lc"},{"name":"NetWork","_id":"cipdewhhs003gqj7lw4zfwe97"},{"name":"weed-fs","_id":"cipdewhhw003nqj7lotu5o5sg"},{"name":"golang","_id":"cipdewhi30041qj7lbk2fav5t"},{"name":"Graphics","_id":"cipdewhi30047qj7lwmuqnu9y"},{"name":"linux","_id":"cipdewhi4004dqj7lj5e3be7x"},{"name":"ffmpeg","_id":"cipdewhie004jqj7lzpd42w55"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"金币阵列问题","keywords":["algorithm","算法设计与分析"],"description":"金币阵列问题解题报告","comments":1,"_content":"\n# 金币阵列问题\n\n## Description\n\n有m*n(m <= 100,n <= 100)个金币在桌面上排成一个m行n 列的金币阵列。每一枚金币或正面朝上或背面朝上。用数字表示金币状态，0表示金币正面朝上，1 表示背面朝上。\n金币阵列游戏的规则是：\n（1）每次可将任一行金币翻过来放在原来的位置上；\n（2）每次可任选2 列，交换这2 列金币的位置。\n算法设计：\n给定金币阵列的初始状态和目标状态，计算按金币游戏规则，将金币阵列从初始状态变\n换到目标状态所需的最少变换次数。\n\n\n##数据输入：\n文件中有多组数据。文件的第1行有1 个正整数k，表\n示有k 组数据。每组数据的第1 行有2 个正整数m 和n。以下的m行是金币阵列的初始状\n态，每行有n 个数字表示该行金币的状态，0 表示金币正面朝上，1 表示背面朝上。接着的\nm行是金币阵列的目标状态。\n\n##结果输出:\n相应数据无解时\n输出-1。\n\n输入文件示例\n\n```\n2\n4 3\n1 0 1\n0 0 0\n1 1 0\n1 0 1\n1 0 1\n1 1 1\n0 1 1\n1 0 1\n4 3\n1 0 1\n0 0 0\n1 0 0\n1 1 1\n1 1 0\n1 1 1\n0 1 1\n1 0 1\n```\n\n输入文件示例\n\n```\n2\n-1\n```\n\nSource:《算法设计与分析习题解答》\n\nPS:解题思路与课本类似，但课本答案有误。\n\n## Answer\n\n```\n代码\n\n#include<stdio.h>\nconstint inf =99999;\nconstint N =101;\n\nint a[N][N],b[N][N],temp[N][N]; //a存储初始矩阵，b为目标状态矩阵\nint n,m;\nint need;//需要变换次数\nvoid ChangeL(int x,int y)//变换列\n{\n    if(x==y)return;\n    int i;\n    for(i=1;i<=n;i++)\n    {\n        int tt=temp[i][y];\n        temp[i][y]=temp[i][x];\n        temp[i][x]=tt;\n    }\n    need++;\n}\nvoid ChangeH(int x)//变换行\n{\n    int i;\n    for(i=1;i<=m;i++)\n    {\n      temp[x][i]^=1;\n    }\n}\n\nbool Same(int x,int y) //判断列是否满足条件\n{\n   int i;\n   for(i=1;i<=n;i++)\n       if(b[i][x]!=temp[i][y])returnfalse;\n       returntrue;\n}\n\nint main()\n{\n    int tests;\n    scanf(\"%d\",&tests); //数据组数\nwhile(tests--)\n    {\n        scanf(\"%d%d\",&n,&m); //n行，m列\nint i,j;\n        for(i=1;i<=n;i++)\n            for(j=1;j<=m;j++)\n            {\n                scanf(\"%d\",&a[i][j]);\n            }\n             \n\n        for(i=1;i<=n;i++)\n            for(j=1;j<=m;j++)\n                scanf(\"%d\",&b[i][j]);\n\n        int k;\n        int ans=inf; //ans存储最终答案，初始值为无穷大\n\n        for(k=1;k<=m;k++)//枚举各列为第一列\n        {\n          for(i=1;i<=n;i++)\n              for(j=1;j<=m;j++)\n                  temp[i][j]=a[i][j];\n          need=0;\n          ChangeL(1,k);\n          for(i=1;i<=n;i++)\n          {\n              if(temp[i][1]!=b[i][1])//该行不满足条件\n              {\n                  ChangeH(i);//变换行\n                  need++;\n              }\n          }\n\n          bool find;\n          for(i=1;i<=m;i++)//检查每列是否满足条件\n          {\n              find=false;\n              if(Same(i,i))\n              {\n                  find=true;continue;\n              }\n              for(j=i+1;j<=m;j++)//寻找temp中与b的i列相同的列\n              {\n                 if(Same(i,j))\n                 {\n                     if(Same(j,j))continue;\n                     ChangeL(i,j);\n                     find=true;\n                     break;\n                 }\n              }\n              if(find==false)//找不到该列对应列\n              {\n                break;\n              }\n          }\n\n         if(find==true&&need<ans)ans=need;\n        }\n\n        if(ans<inf)printf(\"%d\\n\",ans);\n        else\n            printf(\"-1\\n\");\n    }\n    return0;\n}\n```\n","source":"_posts/2010-12-24-algorithm-金币阵列问题.md","raw":"---\nlayout: post\ntitle: \"金币阵列问题\"\nkeywords: [\"algorithm\", \"算法设计与分析\"]\ndescription: \"金币阵列问题解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\"]\ncomments: true \n---\n\n# 金币阵列问题\n\n## Description\n\n有m*n(m <= 100,n <= 100)个金币在桌面上排成一个m行n 列的金币阵列。每一枚金币或正面朝上或背面朝上。用数字表示金币状态，0表示金币正面朝上，1 表示背面朝上。\n金币阵列游戏的规则是：\n（1）每次可将任一行金币翻过来放在原来的位置上；\n（2）每次可任选2 列，交换这2 列金币的位置。\n算法设计：\n给定金币阵列的初始状态和目标状态，计算按金币游戏规则，将金币阵列从初始状态变\n换到目标状态所需的最少变换次数。\n\n\n##数据输入：\n文件中有多组数据。文件的第1行有1 个正整数k，表\n示有k 组数据。每组数据的第1 行有2 个正整数m 和n。以下的m行是金币阵列的初始状\n态，每行有n 个数字表示该行金币的状态，0 表示金币正面朝上，1 表示背面朝上。接着的\nm行是金币阵列的目标状态。\n\n##结果输出:\n相应数据无解时\n输出-1。\n\n输入文件示例\n\n```\n2\n4 3\n1 0 1\n0 0 0\n1 1 0\n1 0 1\n1 0 1\n1 1 1\n0 1 1\n1 0 1\n4 3\n1 0 1\n0 0 0\n1 0 0\n1 1 1\n1 1 0\n1 1 1\n0 1 1\n1 0 1\n```\n\n输入文件示例\n\n```\n2\n-1\n```\n\nSource:《算法设计与分析习题解答》\n\nPS:解题思路与课本类似，但课本答案有误。\n\n## Answer\n\n```\n代码\n\n#include<stdio.h>\nconstint inf =99999;\nconstint N =101;\n\nint a[N][N],b[N][N],temp[N][N]; //a存储初始矩阵，b为目标状态矩阵\nint n,m;\nint need;//需要变换次数\nvoid ChangeL(int x,int y)//变换列\n{\n    if(x==y)return;\n    int i;\n    for(i=1;i<=n;i++)\n    {\n        int tt=temp[i][y];\n        temp[i][y]=temp[i][x];\n        temp[i][x]=tt;\n    }\n    need++;\n}\nvoid ChangeH(int x)//变换行\n{\n    int i;\n    for(i=1;i<=m;i++)\n    {\n      temp[x][i]^=1;\n    }\n}\n\nbool Same(int x,int y) //判断列是否满足条件\n{\n   int i;\n   for(i=1;i<=n;i++)\n       if(b[i][x]!=temp[i][y])returnfalse;\n       returntrue;\n}\n\nint main()\n{\n    int tests;\n    scanf(\"%d\",&tests); //数据组数\nwhile(tests--)\n    {\n        scanf(\"%d%d\",&n,&m); //n行，m列\nint i,j;\n        for(i=1;i<=n;i++)\n            for(j=1;j<=m;j++)\n            {\n                scanf(\"%d\",&a[i][j]);\n            }\n             \n\n        for(i=1;i<=n;i++)\n            for(j=1;j<=m;j++)\n                scanf(\"%d\",&b[i][j]);\n\n        int k;\n        int ans=inf; //ans存储最终答案，初始值为无穷大\n\n        for(k=1;k<=m;k++)//枚举各列为第一列\n        {\n          for(i=1;i<=n;i++)\n              for(j=1;j<=m;j++)\n                  temp[i][j]=a[i][j];\n          need=0;\n          ChangeL(1,k);\n          for(i=1;i<=n;i++)\n          {\n              if(temp[i][1]!=b[i][1])//该行不满足条件\n              {\n                  ChangeH(i);//变换行\n                  need++;\n              }\n          }\n\n          bool find;\n          for(i=1;i<=m;i++)//检查每列是否满足条件\n          {\n              find=false;\n              if(Same(i,i))\n              {\n                  find=true;continue;\n              }\n              for(j=i+1;j<=m;j++)//寻找temp中与b的i列相同的列\n              {\n                 if(Same(i,j))\n                 {\n                     if(Same(j,j))continue;\n                     ChangeL(i,j);\n                     find=true;\n                     break;\n                 }\n              }\n              if(find==false)//找不到该列对应列\n              {\n                break;\n              }\n          }\n\n         if(find==true&&need<ans)ans=need;\n        }\n\n        if(ans<inf)printf(\"%d\\n\",ans);\n        else\n            printf(\"-1\\n\");\n    }\n    return0;\n}\n```\n","slug":"2010-12-24-algorithm-金币阵列问题","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhfi0000qj7l57ceiwq3","content":"<h1 id=\"金币阵列问题\"><a href=\"#金币阵列问题\" class=\"headerlink\" title=\"金币阵列问题\"></a>金币阵列问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>有m*n(m &lt;= 100,n &lt;= 100)个金币在桌面上排成一个m行n 列的金币阵列。每一枚金币或正面朝上或背面朝上。用数字表示金币状态，0表示金币正面朝上，1 表示背面朝上。<br>金币阵列游戏的规则是：<br>（1）每次可将任一行金币翻过来放在原来的位置上；<br>（2）每次可任选2 列，交换这2 列金币的位置。<br>算法设计：<br>给定金币阵列的初始状态和目标状态，计算按金币游戏规则，将金币阵列从初始状态变<br>换到目标状态所需的最少变换次数。</p>\n<p>##数据输入：<br>文件中有多组数据。文件的第1行有1 个正整数k，表<br>示有k 组数据。每组数据的第1 行有2 个正整数m 和n。以下的m行是金币阵列的初始状<br>态，每行有n 个数字表示该行金币的状态，0 表示金币正面朝上，1 表示背面朝上。接着的<br>m行是金币阵列的目标状态。</p>\n<p>##结果输出:<br>相应数据无解时<br>输出-1。</p>\n<p>输入文件示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4 3</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">0 0 0</span><br><span class=\"line\">1 1 0</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">1 1 1</span><br><span class=\"line\">0 1 1</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">4 3</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">0 0 0</span><br><span class=\"line\">1 0 0</span><br><span class=\"line\">1 1 1</span><br><span class=\"line\">1 1 0</span><br><span class=\"line\">1 1 1</span><br><span class=\"line\">0 1 1</span><br><span class=\"line\">1 0 1</span><br></pre></td></tr></table></figure>\n<p>输入文件示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<p>Source:《算法设计与分析习题解答》</p>\n<p>PS:解题思路与课本类似，但课本答案有误。</p>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">constint inf =99999;</span><br><span class=\"line\">constint N =101;</span><br><span class=\"line\"></span><br><span class=\"line\">int a[N][N],b[N][N],temp[N][N]; //a存储初始矩阵，b为目标状态矩阵</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\">int need;//需要变换次数</span><br><span class=\"line\">void ChangeL(int x,int y)//变换列</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(x==y)return;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int tt=temp[i][y];</span><br><span class=\"line\">        temp[i][y]=temp[i][x];</span><br><span class=\"line\">        temp[i][x]=tt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    need++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void ChangeH(int x)//变换行</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i=1;i&lt;=m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      temp[x][i]^=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Same(int x,int y) //判断列是否满足条件</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int i;</span><br><span class=\"line\">   for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">       if(b[i][x]!=temp[i][y])returnfalse;</span><br><span class=\"line\">       returntrue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int tests;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;tests); //数据组数</span><br><span class=\"line\">while(tests--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m); //n行，m列</span><br><span class=\"line\">int i,j;</span><br><span class=\"line\">        for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">            for(j=1;j&lt;=m;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                scanf(&quot;%d&quot;,&amp;a[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\"></span><br><span class=\"line\">        for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">            for(j=1;j&lt;=m;j++)</span><br><span class=\"line\">                scanf(&quot;%d&quot;,&amp;b[i][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">        int k;</span><br><span class=\"line\">        int ans=inf; //ans存储最终答案，初始值为无穷大</span><br><span class=\"line\"></span><br><span class=\"line\">        for(k=1;k&lt;=m;k++)//枚举各列为第一列</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">              for(j=1;j&lt;=m;j++)</span><br><span class=\"line\">                  temp[i][j]=a[i][j];</span><br><span class=\"line\">          need=0;</span><br><span class=\"line\">          ChangeL(1,k);</span><br><span class=\"line\">          for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              if(temp[i][1]!=b[i][1])//该行不满足条件</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  ChangeH(i);//变换行</span><br><span class=\"line\">                  need++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          bool find;</span><br><span class=\"line\">          for(i=1;i&lt;=m;i++)//检查每列是否满足条件</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              find=false;</span><br><span class=\"line\">              if(Same(i,i))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  find=true;continue;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              for(j=i+1;j&lt;=m;j++)//寻找temp中与b的i列相同的列</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                 if(Same(i,j))</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     if(Same(j,j))continue;</span><br><span class=\"line\">                     ChangeL(i,j);</span><br><span class=\"line\">                     find=true;</span><br><span class=\"line\">                     break;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              if(find==false)//找不到该列对应列</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         if(find==true&amp;&amp;need&lt;ans)ans=need;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(ans&lt;inf)printf(&quot;%d\\n&quot;,ans);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            printf(&quot;-1\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"金币阵列问题\"><a href=\"#金币阵列问题\" class=\"headerlink\" title=\"金币阵列问题\"></a>金币阵列问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>有m*n(m &lt;= 100,n &lt;= 100)个金币在桌面上排成一个m行n 列的金币阵列。每一枚金币或正面朝上或背面朝上。用数字表示金币状态，0表示金币正面朝上，1 表示背面朝上。<br>金币阵列游戏的规则是：<br>（1）每次可将任一行金币翻过来放在原来的位置上；<br>（2）每次可任选2 列，交换这2 列金币的位置。<br>算法设计：<br>给定金币阵列的初始状态和目标状态，计算按金币游戏规则，将金币阵列从初始状态变<br>换到目标状态所需的最少变换次数。</p>\n<p>##数据输入：<br>文件中有多组数据。文件的第1行有1 个正整数k，表<br>示有k 组数据。每组数据的第1 行有2 个正整数m 和n。以下的m行是金币阵列的初始状<br>态，每行有n 个数字表示该行金币的状态，0 表示金币正面朝上，1 表示背面朝上。接着的<br>m行是金币阵列的目标状态。</p>\n<p>##结果输出:<br>相应数据无解时<br>输出-1。</p>\n<p>输入文件示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4 3</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">0 0 0</span><br><span class=\"line\">1 1 0</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">1 1 1</span><br><span class=\"line\">0 1 1</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">4 3</span><br><span class=\"line\">1 0 1</span><br><span class=\"line\">0 0 0</span><br><span class=\"line\">1 0 0</span><br><span class=\"line\">1 1 1</span><br><span class=\"line\">1 1 0</span><br><span class=\"line\">1 1 1</span><br><span class=\"line\">0 1 1</span><br><span class=\"line\">1 0 1</span><br></pre></td></tr></table></figure>\n<p>输入文件示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<p>Source:《算法设计与分析习题解答》</p>\n<p>PS:解题思路与课本类似，但课本答案有误。</p>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码</span><br><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">constint inf =99999;</span><br><span class=\"line\">constint N =101;</span><br><span class=\"line\"></span><br><span class=\"line\">int a[N][N],b[N][N],temp[N][N]; //a存储初始矩阵，b为目标状态矩阵</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\">int need;//需要变换次数</span><br><span class=\"line\">void ChangeL(int x,int y)//变换列</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(x==y)return;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int tt=temp[i][y];</span><br><span class=\"line\">        temp[i][y]=temp[i][x];</span><br><span class=\"line\">        temp[i][x]=tt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    need++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void ChangeH(int x)//变换行</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i=1;i&lt;=m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      temp[x][i]^=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Same(int x,int y) //判断列是否满足条件</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int i;</span><br><span class=\"line\">   for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">       if(b[i][x]!=temp[i][y])returnfalse;</span><br><span class=\"line\">       returntrue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int tests;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;tests); //数据组数</span><br><span class=\"line\">while(tests--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m); //n行，m列</span><br><span class=\"line\">int i,j;</span><br><span class=\"line\">        for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">            for(j=1;j&lt;=m;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                scanf(&quot;%d&quot;,&amp;a[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             </span><br><span class=\"line\"></span><br><span class=\"line\">        for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">            for(j=1;j&lt;=m;j++)</span><br><span class=\"line\">                scanf(&quot;%d&quot;,&amp;b[i][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">        int k;</span><br><span class=\"line\">        int ans=inf; //ans存储最终答案，初始值为无穷大</span><br><span class=\"line\"></span><br><span class=\"line\">        for(k=1;k&lt;=m;k++)//枚举各列为第一列</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">              for(j=1;j&lt;=m;j++)</span><br><span class=\"line\">                  temp[i][j]=a[i][j];</span><br><span class=\"line\">          need=0;</span><br><span class=\"line\">          ChangeL(1,k);</span><br><span class=\"line\">          for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              if(temp[i][1]!=b[i][1])//该行不满足条件</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  ChangeH(i);//变换行</span><br><span class=\"line\">                  need++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          bool find;</span><br><span class=\"line\">          for(i=1;i&lt;=m;i++)//检查每列是否满足条件</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              find=false;</span><br><span class=\"line\">              if(Same(i,i))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  find=true;continue;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              for(j=i+1;j&lt;=m;j++)//寻找temp中与b的i列相同的列</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                 if(Same(i,j))</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                     if(Same(j,j))continue;</span><br><span class=\"line\">                     ChangeL(i,j);</span><br><span class=\"line\">                     find=true;</span><br><span class=\"line\">                     break;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              if(find==false)//找不到该列对应列</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         if(find==true&amp;&amp;need&lt;ans)ans=need;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(ans&lt;inf)printf(&quot;%d\\n&quot;,ans);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            printf(&quot;-1\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"硬币找钱问题","keywords":["algorithm","算法设计与分析"],"description":"硬币找钱问题解题报告","comments":1,"_content":"\n# 硬币找钱问题\n\n## Description\n\n设有6 种不同面值的硬币，各硬币的面值分别为5 分，1 角，2 角，5 角，1 元，2元。现要用这些面值的硬币来购物和找钱。购物时可以使用的各种面值的硬币个数存于数组Coins[1:6]中，商店里各面值的硬币有足够多。在1次购物中希望使用最少硬币个数。例如，1 次购物需要付款0.55 元，没有5 角的硬币，只好用2*20+10+5 共4 枚硬币来付款。如果付出1 元，找回4 角5 分，同样需要4 枚硬币。但是如果付出1.05 元（1 枚1元和1 枚5分），找回5 角，只需要3 枚硬币。这个方案用的硬币个数最少。\n\n对于给定的各种面值的硬币个数和付款金额，计算使用硬币个数最少的交易方案。\n\n## Input\n\n输入数据有若干组，每一行有6 个整数和1 个有2 位小数的实数。分别表示可以使用的各种面值的硬币个数和付款金额。文件以6 个0 结束。\n\n## Output\n\n将计算出的最少硬币个数输出。结果应分行输出，每行一个数据。如果不可能完成交易，则输出“impossible”。\n\n## Sample Input\n\n```\n2 4 2 2 1 0 0.95\n2 4 2 0 1 0 0.55\n0 0 0 0 0 0\n``` \n\n## Sample Output\n\n```\n2\n3\n``` \n\n### Source ：《算法设计与分析》\n\n## 解题思路\n\n01背包，完全背包\nchange[i]表示商店支付面值为i需要的最少硬币个数；\ndp[i]表示顾客现有的硬币数支付面值为i需要的最少硬币数；\nw为当前要支付的实际面值，若顾客支付面值为k的钱（k>=w）,商家找钱k-w,该条件下最少需要的硬币数为dp[k]+change[k-w],\n由此推得，最少硬币数为所有符合条件k>=w下最小的dp[k]+change[k-w];\n即： ans = min(dp[k]+change[k-w])(k>=w)\n\n对于change[i],商店里各面值的硬币有足够多，故可用完全背包实现\n对于dp[i],可用混合背包计算，这里我直接拆成01背包来实现（比较暴力，O(∩_∩)O~）。\nPS:为减少空间开销，最终化为以5分为单位计算\n\n    其实，这个算法在时间和空间上的牺牲还是比较大的，可用贪心进行优化，可惜当年没深入去想……\n\nAnswer\n\n```\n\n#include<stdio.h>\n#include<string.h>\n\nconstint N =20000;\nint change[N];//change[i]为面值为i的钱至少需要的硬币个数\nint dp[N];//dp[i]为当前拥有的硬币数量条件下表示面值为i的最少硬币个数\nint value[6] = {1,2,4,10,20,40};//每种硬币对应面值，依次为1，2,4,10,20,40个五分，即5,10,20,50,100,200；\nint number[6];//对应于当前拥有的每种硬币个数\n\nvoid init()//计算change[i]\n{\n   int i,j;\n   for(i=0;i<N;i++)change[i]=-1;\n   change[0]=0;\n   for(i=0;i<6;i++)\n   {\n      for(j=value[i];j<N;j++)//这里使用完全背包，不能理解的话可参考背包九讲\n      {\n       if(change[j-value[i]]!=-1)\n       {\n         int temp=change[j-value[i]]+1;\n         if(change[j]==-1||temp<change[j])change[j]=temp;\n       }\n      }\n   }\n}\nint main()\n{\n   //freopen(\"change.in\",\"r\",stdin);\n   \n    init(); //计算出change[i]\n \n    while(scanf(\"%d%d%d%d%d%d\",&number[0],&number[1],&number[2],&number[3],&number[4],&number[5])!=EOF)\n    {\n      int sum =0;\n      int kk;\n      for(kk=0;kk<6;kk++)sum+=number[kk];\n      if(sum==0)break;\n      double weight;\n      scanf(\"%lf\",&weight);\n      weight=weight*100;\n     // printf(\"weight = %lf\\n\",weight);\nint w =int(weight+0.0000001);//处理精度问题\n      //printf(\"%d\\n\",w);\n\n      if(w%5!=0)//若不能整除，则无法表示\n      {\n         printf(\"impossible\\n\");\n         continue;\n      }\n      else\n          w = w/5;\n     \n      int i,j;\n      memset(dp,-1,sizeof(dp));\n      dp[0]=0;\n      int bigger =0;\n      for(i=0;i<6;i++)//计算顾客支付面值i需要的最少硬币数dp[i]\n      {\n        while(number[i]--) //将混合背包拆成01背包做，写水了点。。。\n        {\n         bigger = bigger+value[i];\n         for(j=bigger;j>=value[i];j--)\n         {\n          if(dp[j-value[i]]!=-1)\n          {\n            int temp=dp[j-value[i]]+1;\n            if(dp[j]==-1||temp<dp[j])\n            {\n              dp[j]=temp;\n            }\n          }\n         }\n        }\n      }\n \n    int ans =-1;\n    for(i=w;i<=bigger;i++)//寻找最少硬币组合\n    {\n     if(dp[i]!=-1)\n     {\n      int need = i-w;\n      if(change[need]!=-1)\n      {\n       int temp = dp[i]+change[need];\n       if(ans==-1||ans>temp)ans=temp;\n      }\n     }\n    }\n\n   // for(i=0;i<N;i++)\n  //   if(dp[i]!=-1)\n   //  printf(\"dp[%d]=%d\\n\",i,dp[i]);\n\n    if(ans!=-1)\n    printf(\"%d\\n\",ans);\n    else\n     printf(\"impossible\\n\");\n   }\n   return0;\n}\n\n```\n\n\n","source":"_posts/2010-12-25-algorithm-硬币找钱问题.md","raw":"---\nlayout: post\ntitle: \"硬币找钱问题\"\nkeywords: [\"algorithm\", \"算法设计与分析\"]\ndescription: \"硬币找钱问题解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\"]\ncomments : true\n---\n\n# 硬币找钱问题\n\n## Description\n\n设有6 种不同面值的硬币，各硬币的面值分别为5 分，1 角，2 角，5 角，1 元，2元。现要用这些面值的硬币来购物和找钱。购物时可以使用的各种面值的硬币个数存于数组Coins[1:6]中，商店里各面值的硬币有足够多。在1次购物中希望使用最少硬币个数。例如，1 次购物需要付款0.55 元，没有5 角的硬币，只好用2*20+10+5 共4 枚硬币来付款。如果付出1 元，找回4 角5 分，同样需要4 枚硬币。但是如果付出1.05 元（1 枚1元和1 枚5分），找回5 角，只需要3 枚硬币。这个方案用的硬币个数最少。\n\n对于给定的各种面值的硬币个数和付款金额，计算使用硬币个数最少的交易方案。\n\n## Input\n\n输入数据有若干组，每一行有6 个整数和1 个有2 位小数的实数。分别表示可以使用的各种面值的硬币个数和付款金额。文件以6 个0 结束。\n\n## Output\n\n将计算出的最少硬币个数输出。结果应分行输出，每行一个数据。如果不可能完成交易，则输出“impossible”。\n\n## Sample Input\n\n```\n2 4 2 2 1 0 0.95\n2 4 2 0 1 0 0.55\n0 0 0 0 0 0\n``` \n\n## Sample Output\n\n```\n2\n3\n``` \n\n### Source ：《算法设计与分析》\n\n## 解题思路\n\n01背包，完全背包\nchange[i]表示商店支付面值为i需要的最少硬币个数；\ndp[i]表示顾客现有的硬币数支付面值为i需要的最少硬币数；\nw为当前要支付的实际面值，若顾客支付面值为k的钱（k>=w）,商家找钱k-w,该条件下最少需要的硬币数为dp[k]+change[k-w],\n由此推得，最少硬币数为所有符合条件k>=w下最小的dp[k]+change[k-w];\n即： ans = min(dp[k]+change[k-w])(k>=w)\n\n对于change[i],商店里各面值的硬币有足够多，故可用完全背包实现\n对于dp[i],可用混合背包计算，这里我直接拆成01背包来实现（比较暴力，O(∩_∩)O~）。\nPS:为减少空间开销，最终化为以5分为单位计算\n\n    其实，这个算法在时间和空间上的牺牲还是比较大的，可用贪心进行优化，可惜当年没深入去想……\n\nAnswer\n\n```\n\n#include<stdio.h>\n#include<string.h>\n\nconstint N =20000;\nint change[N];//change[i]为面值为i的钱至少需要的硬币个数\nint dp[N];//dp[i]为当前拥有的硬币数量条件下表示面值为i的最少硬币个数\nint value[6] = {1,2,4,10,20,40};//每种硬币对应面值，依次为1，2,4,10,20,40个五分，即5,10,20,50,100,200；\nint number[6];//对应于当前拥有的每种硬币个数\n\nvoid init()//计算change[i]\n{\n   int i,j;\n   for(i=0;i<N;i++)change[i]=-1;\n   change[0]=0;\n   for(i=0;i<6;i++)\n   {\n      for(j=value[i];j<N;j++)//这里使用完全背包，不能理解的话可参考背包九讲\n      {\n       if(change[j-value[i]]!=-1)\n       {\n         int temp=change[j-value[i]]+1;\n         if(change[j]==-1||temp<change[j])change[j]=temp;\n       }\n      }\n   }\n}\nint main()\n{\n   //freopen(\"change.in\",\"r\",stdin);\n   \n    init(); //计算出change[i]\n \n    while(scanf(\"%d%d%d%d%d%d\",&number[0],&number[1],&number[2],&number[3],&number[4],&number[5])!=EOF)\n    {\n      int sum =0;\n      int kk;\n      for(kk=0;kk<6;kk++)sum+=number[kk];\n      if(sum==0)break;\n      double weight;\n      scanf(\"%lf\",&weight);\n      weight=weight*100;\n     // printf(\"weight = %lf\\n\",weight);\nint w =int(weight+0.0000001);//处理精度问题\n      //printf(\"%d\\n\",w);\n\n      if(w%5!=0)//若不能整除，则无法表示\n      {\n         printf(\"impossible\\n\");\n         continue;\n      }\n      else\n          w = w/5;\n     \n      int i,j;\n      memset(dp,-1,sizeof(dp));\n      dp[0]=0;\n      int bigger =0;\n      for(i=0;i<6;i++)//计算顾客支付面值i需要的最少硬币数dp[i]\n      {\n        while(number[i]--) //将混合背包拆成01背包做，写水了点。。。\n        {\n         bigger = bigger+value[i];\n         for(j=bigger;j>=value[i];j--)\n         {\n          if(dp[j-value[i]]!=-1)\n          {\n            int temp=dp[j-value[i]]+1;\n            if(dp[j]==-1||temp<dp[j])\n            {\n              dp[j]=temp;\n            }\n          }\n         }\n        }\n      }\n \n    int ans =-1;\n    for(i=w;i<=bigger;i++)//寻找最少硬币组合\n    {\n     if(dp[i]!=-1)\n     {\n      int need = i-w;\n      if(change[need]!=-1)\n      {\n       int temp = dp[i]+change[need];\n       if(ans==-1||ans>temp)ans=temp;\n      }\n     }\n    }\n\n   // for(i=0;i<N;i++)\n  //   if(dp[i]!=-1)\n   //  printf(\"dp[%d]=%d\\n\",i,dp[i]);\n\n    if(ans!=-1)\n    printf(\"%d\\n\",ans);\n    else\n     printf(\"impossible\\n\");\n   }\n   return0;\n}\n\n```\n\n\n","slug":"2010-12-25-algorithm-硬币找钱问题","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhfn0001qj7lpql7frpx","content":"<h1 id=\"硬币找钱问题\"><a href=\"#硬币找钱问题\" class=\"headerlink\" title=\"硬币找钱问题\"></a>硬币找钱问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>设有6 种不同面值的硬币，各硬币的面值分别为5 分，1 角，2 角，5 角，1 元，2元。现要用这些面值的硬币来购物和找钱。购物时可以使用的各种面值的硬币个数存于数组Coins[1:6]中，商店里各面值的硬币有足够多。在1次购物中希望使用最少硬币个数。例如，1 次购物需要付款0.55 元，没有5 角的硬币，只好用2*20+10+5 共4 枚硬币来付款。如果付出1 元，找回4 角5 分，同样需要4 枚硬币。但是如果付出1.05 元（1 枚1元和1 枚5分），找回5 角，只需要3 枚硬币。这个方案用的硬币个数最少。</p>\n<p>对于给定的各种面值的硬币个数和付款金额，计算使用硬币个数最少的交易方案。</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>输入数据有若干组，每一行有6 个整数和1 个有2 位小数的实数。分别表示可以使用的各种面值的硬币个数和付款金额。文件以6 个0 结束。</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>将计算出的最少硬币个数输出。结果应分行输出，每行一个数据。如果不可能完成交易，则输出“impossible”。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 4 2 2 1 0 0.95</span><br><span class=\"line\">2 4 2 0 1 0 0.55</span><br><span class=\"line\">0 0 0 0 0 0</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">## Sample Output</span><br></pre></td></tr></table></figure>\n<p>2<br>3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### Source ：《算法设计与分析》</span><br><span class=\"line\"></span><br><span class=\"line\">## 解题思路</span><br><span class=\"line\"></span><br><span class=\"line\">01背包，完全背包</span><br><span class=\"line\">change[i]表示商店支付面值为i需要的最少硬币个数；</span><br><span class=\"line\">dp[i]表示顾客现有的硬币数支付面值为i需要的最少硬币数；</span><br><span class=\"line\">w为当前要支付的实际面值，若顾客支付面值为k的钱（k&gt;=w）,商家找钱k-w,该条件下最少需要的硬币数为dp[k]+change[k-w],</span><br><span class=\"line\">由此推得，最少硬币数为所有符合条件k&gt;=w下最小的dp[k]+change[k-w];</span><br><span class=\"line\">即： ans = min(dp[k]+change[k-w])(k&gt;=w)</span><br><span class=\"line\"></span><br><span class=\"line\">对于change[i],商店里各面值的硬币有足够多，故可用完全背包实现</span><br><span class=\"line\">对于dp[i],可用混合背包计算，这里我直接拆成01背包来实现（比较暴力，O(∩_∩)O~）。</span><br><span class=\"line\">PS:为减少空间开销，最终化为以5分为单位计算</span><br><span class=\"line\"></span><br><span class=\"line\">    其实，这个算法在时间和空间上的牺牲还是比较大的，可用贪心进行优化，可惜当年没深入去想……</span><br><span class=\"line\"></span><br><span class=\"line\">Answer</span><br></pre></td></tr></table></figure></p>\n<p>#include<stdio.h></stdio.h></p>\n<p>#include<string.h></string.h></p>\n<p>constint N =20000;<br>int change[N];//change[i]为面值为i的钱至少需要的硬币个数<br>int dp[N];//dp[i]为当前拥有的硬币数量条件下表示面值为i的最少硬币个数<br>int value[6] = {1,2,4,10,20,40};//每种硬币对应面值，依次为1，2,4,10,20,40个五分，即5,10,20,50,100,200；<br>int number[6];//对应于当前拥有的每种硬币个数</p>\n<p>void init()//计算change[i]<br>{<br>   int i,j;<br>   for(i=0;i&lt;N;i++)change[i]=-1;<br>   change[0]=0;<br>   for(i=0;i&lt;6;i++)<br>   {<br>      for(j=value[i];j&lt;N;j++)//这里使用完全背包，不能理解的话可参考背包九讲<br>      {<br>       if(change[j-value[i]]!=-1)<br>       {<br>         int temp=change[j-value[i]]+1;<br>         if(change[j]==-1||temp&lt;change[j])change[j]=temp;<br>       }<br>      }<br>   }<br>}<br>int main()<br>{<br>   //freopen(“change.in”,”r”,stdin);</p>\n<pre><code>init(); //计算出change[i]\n\nwhile(scanf(&quot;%d%d%d%d%d%d&quot;,&amp;number[0],&amp;number[1],&amp;number[2],&amp;number[3],&amp;number[4],&amp;number[5])!=EOF)\n{\n  int sum =0;\n  int kk;\n  for(kk=0;kk&lt;6;kk++)sum+=number[kk];\n  if(sum==0)break;\n  double weight;\n  scanf(&quot;%lf&quot;,&amp;weight);\n  weight=weight*100;\n // printf(&quot;weight = %lf\\n&quot;,weight);\n</code></pre><p>int w =int(weight+0.0000001);//处理精度问题<br>      //printf(“%d\\n”,w);</p>\n<pre><code>  if(w%5!=0)//若不能整除，则无法表示\n  {\n     printf(&quot;impossible\\n&quot;);\n     continue;\n  }\n  else\n      w = w/5;\n\n  int i,j;\n  memset(dp,-1,sizeof(dp));\n  dp[0]=0;\n  int bigger =0;\n  for(i=0;i&lt;6;i++)//计算顾客支付面值i需要的最少硬币数dp[i]\n  {\n    while(number[i]--) //将混合背包拆成01背包做，写水了点。。。\n    {\n     bigger = bigger+value[i];\n     for(j=bigger;j&gt;=value[i];j--)\n     {\n      if(dp[j-value[i]]!=-1)\n      {\n        int temp=dp[j-value[i]]+1;\n        if(dp[j]==-1||temp&lt;dp[j])\n        {\n          dp[j]=temp;\n        }\n      }\n     }\n    }\n  }\n\nint ans =-1;\nfor(i=w;i&lt;=bigger;i++)//寻找最少硬币组合\n{\n if(dp[i]!=-1)\n {\n  int need = i-w;\n  if(change[need]!=-1)\n  {\n   int temp = dp[i]+change[need];\n   if(ans==-1||ans&gt;temp)ans=temp;\n  }\n }\n}\n</code></pre><p>   // for(i=0;i&lt;N;i++)<br>  //   if(dp[i]!=-1)<br>   //  printf(“dp[%d]=%d\\n”,i,dp[i]);</p>\n<pre><code>if(ans!=-1)\nprintf(&quot;%d\\n&quot;,ans);\nelse\n printf(&quot;impossible\\n&quot;);\n</code></pre><p>   }<br>   return0;<br>}</p>\n<p>```</p>\n","excerpt":"","more":"<h1 id=\"硬币找钱问题\"><a href=\"#硬币找钱问题\" class=\"headerlink\" title=\"硬币找钱问题\"></a>硬币找钱问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>设有6 种不同面值的硬币，各硬币的面值分别为5 分，1 角，2 角，5 角，1 元，2元。现要用这些面值的硬币来购物和找钱。购物时可以使用的各种面值的硬币个数存于数组Coins[1:6]中，商店里各面值的硬币有足够多。在1次购物中希望使用最少硬币个数。例如，1 次购物需要付款0.55 元，没有5 角的硬币，只好用2*20+10+5 共4 枚硬币来付款。如果付出1 元，找回4 角5 分，同样需要4 枚硬币。但是如果付出1.05 元（1 枚1元和1 枚5分），找回5 角，只需要3 枚硬币。这个方案用的硬币个数最少。</p>\n<p>对于给定的各种面值的硬币个数和付款金额，计算使用硬币个数最少的交易方案。</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>输入数据有若干组，每一行有6 个整数和1 个有2 位小数的实数。分别表示可以使用的各种面值的硬币个数和付款金额。文件以6 个0 结束。</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>将计算出的最少硬币个数输出。结果应分行输出，每行一个数据。如果不可能完成交易，则输出“impossible”。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 4 2 2 1 0 0.95</span><br><span class=\"line\">2 4 2 0 1 0 0.55</span><br><span class=\"line\">0 0 0 0 0 0</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">## Sample Output</span><br></pre></td></tr></table></figure>\n<p>2<br>3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### Source ：《算法设计与分析》</span><br><span class=\"line\"></span><br><span class=\"line\">## 解题思路</span><br><span class=\"line\"></span><br><span class=\"line\">01背包，完全背包</span><br><span class=\"line\">change[i]表示商店支付面值为i需要的最少硬币个数；</span><br><span class=\"line\">dp[i]表示顾客现有的硬币数支付面值为i需要的最少硬币数；</span><br><span class=\"line\">w为当前要支付的实际面值，若顾客支付面值为k的钱（k&gt;=w）,商家找钱k-w,该条件下最少需要的硬币数为dp[k]+change[k-w],</span><br><span class=\"line\">由此推得，最少硬币数为所有符合条件k&gt;=w下最小的dp[k]+change[k-w];</span><br><span class=\"line\">即： ans = min(dp[k]+change[k-w])(k&gt;=w)</span><br><span class=\"line\"></span><br><span class=\"line\">对于change[i],商店里各面值的硬币有足够多，故可用完全背包实现</span><br><span class=\"line\">对于dp[i],可用混合背包计算，这里我直接拆成01背包来实现（比较暴力，O(∩_∩)O~）。</span><br><span class=\"line\">PS:为减少空间开销，最终化为以5分为单位计算</span><br><span class=\"line\"></span><br><span class=\"line\">    其实，这个算法在时间和空间上的牺牲还是比较大的，可用贪心进行优化，可惜当年没深入去想……</span><br><span class=\"line\"></span><br><span class=\"line\">Answer</span><br></pre></td></tr></table></figure></p>\n<p>#include<stdio.h></p>\n<p>#include<string.h></p>\n<p>constint N =20000;<br>int change[N];//change[i]为面值为i的钱至少需要的硬币个数<br>int dp[N];//dp[i]为当前拥有的硬币数量条件下表示面值为i的最少硬币个数<br>int value[6] = {1,2,4,10,20,40};//每种硬币对应面值，依次为1，2,4,10,20,40个五分，即5,10,20,50,100,200；<br>int number[6];//对应于当前拥有的每种硬币个数</p>\n<p>void init()//计算change[i]<br>{<br>   int i,j;<br>   for(i=0;i&lt;N;i++)change[i]=-1;<br>   change[0]=0;<br>   for(i=0;i&lt;6;i++)<br>   {<br>      for(j=value[i];j&lt;N;j++)//这里使用完全背包，不能理解的话可参考背包九讲<br>      {<br>       if(change[j-value[i]]!=-1)<br>       {<br>         int temp=change[j-value[i]]+1;<br>         if(change[j]==-1||temp&lt;change[j])change[j]=temp;<br>       }<br>      }<br>   }<br>}<br>int main()<br>{<br>   //freopen(“change.in”,”r”,stdin);</p>\n<pre><code>init(); //计算出change[i]\n\nwhile(scanf(&quot;%d%d%d%d%d%d&quot;,&amp;number[0],&amp;number[1],&amp;number[2],&amp;number[3],&amp;number[4],&amp;number[5])!=EOF)\n{\n  int sum =0;\n  int kk;\n  for(kk=0;kk&lt;6;kk++)sum+=number[kk];\n  if(sum==0)break;\n  double weight;\n  scanf(&quot;%lf&quot;,&amp;weight);\n  weight=weight*100;\n // printf(&quot;weight = %lf\\n&quot;,weight);\n</code></pre><p>int w =int(weight+0.0000001);//处理精度问题<br>      //printf(“%d\\n”,w);</p>\n<pre><code>  if(w%5!=0)//若不能整除，则无法表示\n  {\n     printf(&quot;impossible\\n&quot;);\n     continue;\n  }\n  else\n      w = w/5;\n\n  int i,j;\n  memset(dp,-1,sizeof(dp));\n  dp[0]=0;\n  int bigger =0;\n  for(i=0;i&lt;6;i++)//计算顾客支付面值i需要的最少硬币数dp[i]\n  {\n    while(number[i]--) //将混合背包拆成01背包做，写水了点。。。\n    {\n     bigger = bigger+value[i];\n     for(j=bigger;j&gt;=value[i];j--)\n     {\n      if(dp[j-value[i]]!=-1)\n      {\n        int temp=dp[j-value[i]]+1;\n        if(dp[j]==-1||temp&lt;dp[j])\n        {\n          dp[j]=temp;\n        }\n      }\n     }\n    }\n  }\n\nint ans =-1;\nfor(i=w;i&lt;=bigger;i++)//寻找最少硬币组合\n{\n if(dp[i]!=-1)\n {\n  int need = i-w;\n  if(change[need]!=-1)\n  {\n   int temp = dp[i]+change[need];\n   if(ans==-1||ans&gt;temp)ans=temp;\n  }\n }\n}\n</code></pre><p>   // for(i=0;i&lt;N;i++)<br>  //   if(dp[i]!=-1)<br>   //  printf(“dp[%d]=%d\\n”,i,dp[i]);</p>\n<pre><code>if(ans!=-1)\nprintf(&quot;%d\\n&quot;,ans);\nelse\n printf(&quot;impossible\\n&quot;);\n</code></pre><p>   }<br>   return0;<br>}</p>\n<p>```</p>\n"},{"layout":"post","title":"字典序问题","keywords":["algorithm","算法设计与分析"],"description":"字典序问题解题报告","comments":1,"_content":"\n\n# 字典序问题\n\n## Description\n\n在数据加密和数据压缩中常需要对特殊的字符串进行编码。给定的字母表A由26 个小\n写英文字母组成A={a,b,…,z}。该字母表产生的升序字符串是指字符串中字母按照从左到右\n出现的次序与字母在字母表中出现的次序相同，且每个字符最多出现1次。例如，a,b,ab,bc,xyz\n等字符串都是升序字符串。现在对字母表A 产生的所有长度不超过6 的升序字符串按照字\n典序排列并编码如下。\n       1 2 … 26 27 28 …\n       a b … z   ab ac …\n\n对于任意长度不超过6 的升序字符串，迅速计算出它在上述字典中的编码。\n\n第一行是一个正整数k，表示接下来共有k行。\n接下来的k行中，每行给出一个字符串。\n\n输出共有k行，每行对应于一个字符串的编码。\n\n\n## Sample Input\n\n```\n2\na\nb\n```\n\n## Sample Output\n\n```\n1\n2\n```\n\n## Answer\n\n```\n\n#include<stdio.h>     \n#include<string.h>     \nconstint N =26;     \nconstint LEN=7;     \nchar str[LEN];     \nint c[N+1][N+1]; //c[i][j]记录组合数  \n\n//使用杨辉三角计算n以内的c[i][j]  c[i][j]=c[i-1][j-1]+c[i-1][j];   \nvoid Get_C(int n,int c[][N+1]) \n{   \n    int i,left,right;   \n    c[0][0]=1;   \n    for(i=1;i<=n;i++)   \n    {   \n        c[i][0]=1;   \n        c[i][i]=1;   \n        left=1;right=i-1;   \n        while(left<=right)  //组合数性质：c[i][j]=c[i][i-j]; \n        {   \n            c[i][left] = c[i-1][left-1]+c[i-1][left];   \n            c[i][right--]=c[i][left++];    \n        }   \n    }   \n} \n   \n\n//统计长度小于len的合法串 \nint Get_smaller(int len)  \n{ \n    int i,curans=0; \n    for(i=1;i<len;i++) \n        curans+=c[N][i];//统计长度为i的字符串种类 \nreturn curans; \n} \n\n\n//从左到右逐个统计相同前缀下的字符串个数 \nint Get_prefix(int len,char*str) \n{ \n    int i,j,curans=0; \n     int pre=-1;   //记录前一字符 \nfor(i=0;i<len;i++)   //统计前缀为i-1位时，可出现的合法情形  \n       {     \n           int cur=str[i]-'a';    //当前字符 \nfor(j=pre+1;j<cur;j++)    //枚举摆放于当前前缀后的第一个字符，统计其合法串个数。 \n           {     \n               curans+=c[N-j-1][len-i-1];  \n           }   \n           pre=cur; //保留当前字符，作为情形的前一字符使用 \n       }     \n\n       return curans; \n\n} \n\n\n//判断输入是否非法 \nbool Is_legal(int len,char*str) \n{ \n    int i; \n    for(i=1;i<len;i++)    \n           if(str[i]<=str[i-1])    \n           {    \n               returnfalse;    \n           }    \n           returntrue; \n} \n\n\n\nint main()  \n{     \n   Get_C(N,c);   // 使用杨辉三角计算26以内的所有组合数c[i][j]      \nint tests;     \n    \n  while(scanf(\"%d\",&tests)!=EOF)  \n  {  \n   while(tests--)     \n   {     \n       scanf(\"%s\",str);  \n       int len=strlen(str);     \n       int ans;     \n       bool flag=Is_legal(len,str);//判断输入串本身是否非法 \n\n       if(flag==false)//输入字符串本身非法直接输出0 \n       {    \n           printf(\"0\\n\");    \n           continue;    \n       }    \n       \n       ans =0;  \n       ans+=Get_smaller(len); //统计长度小于len的合法串 \n\n       ans+=Get_prefix(len,str); //从左到右逐个统计相同前缀下的字符串个数 \n\n       ans+=1;    //加入其本身值 \n       printf(\"%d\\n\",ans);    \n   }  \n  }  \n  return0;     \n\n}\n```\n","source":"_posts/2010-12-31-algorithm-字典序问题.md","raw":"---\nlayout: post\ntitle: \"字典序问题\"\nkeywords: [\"algorithm\", \"算法设计与分析\"]\ndescription: \"字典序问题解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\"]\ncomments: true\n---\n\n\n# 字典序问题\n\n## Description\n\n在数据加密和数据压缩中常需要对特殊的字符串进行编码。给定的字母表A由26 个小\n写英文字母组成A={a,b,…,z}。该字母表产生的升序字符串是指字符串中字母按照从左到右\n出现的次序与字母在字母表中出现的次序相同，且每个字符最多出现1次。例如，a,b,ab,bc,xyz\n等字符串都是升序字符串。现在对字母表A 产生的所有长度不超过6 的升序字符串按照字\n典序排列并编码如下。\n       1 2 … 26 27 28 …\n       a b … z   ab ac …\n\n对于任意长度不超过6 的升序字符串，迅速计算出它在上述字典中的编码。\n\n第一行是一个正整数k，表示接下来共有k行。\n接下来的k行中，每行给出一个字符串。\n\n输出共有k行，每行对应于一个字符串的编码。\n\n\n## Sample Input\n\n```\n2\na\nb\n```\n\n## Sample Output\n\n```\n1\n2\n```\n\n## Answer\n\n```\n\n#include<stdio.h>     \n#include<string.h>     \nconstint N =26;     \nconstint LEN=7;     \nchar str[LEN];     \nint c[N+1][N+1]; //c[i][j]记录组合数  \n\n//使用杨辉三角计算n以内的c[i][j]  c[i][j]=c[i-1][j-1]+c[i-1][j];   \nvoid Get_C(int n,int c[][N+1]) \n{   \n    int i,left,right;   \n    c[0][0]=1;   \n    for(i=1;i<=n;i++)   \n    {   \n        c[i][0]=1;   \n        c[i][i]=1;   \n        left=1;right=i-1;   \n        while(left<=right)  //组合数性质：c[i][j]=c[i][i-j]; \n        {   \n            c[i][left] = c[i-1][left-1]+c[i-1][left];   \n            c[i][right--]=c[i][left++];    \n        }   \n    }   \n} \n   \n\n//统计长度小于len的合法串 \nint Get_smaller(int len)  \n{ \n    int i,curans=0; \n    for(i=1;i<len;i++) \n        curans+=c[N][i];//统计长度为i的字符串种类 \nreturn curans; \n} \n\n\n//从左到右逐个统计相同前缀下的字符串个数 \nint Get_prefix(int len,char*str) \n{ \n    int i,j,curans=0; \n     int pre=-1;   //记录前一字符 \nfor(i=0;i<len;i++)   //统计前缀为i-1位时，可出现的合法情形  \n       {     \n           int cur=str[i]-'a';    //当前字符 \nfor(j=pre+1;j<cur;j++)    //枚举摆放于当前前缀后的第一个字符，统计其合法串个数。 \n           {     \n               curans+=c[N-j-1][len-i-1];  \n           }   \n           pre=cur; //保留当前字符，作为情形的前一字符使用 \n       }     \n\n       return curans; \n\n} \n\n\n//判断输入是否非法 \nbool Is_legal(int len,char*str) \n{ \n    int i; \n    for(i=1;i<len;i++)    \n           if(str[i]<=str[i-1])    \n           {    \n               returnfalse;    \n           }    \n           returntrue; \n} \n\n\n\nint main()  \n{     \n   Get_C(N,c);   // 使用杨辉三角计算26以内的所有组合数c[i][j]      \nint tests;     \n    \n  while(scanf(\"%d\",&tests)!=EOF)  \n  {  \n   while(tests--)     \n   {     \n       scanf(\"%s\",str);  \n       int len=strlen(str);     \n       int ans;     \n       bool flag=Is_legal(len,str);//判断输入串本身是否非法 \n\n       if(flag==false)//输入字符串本身非法直接输出0 \n       {    \n           printf(\"0\\n\");    \n           continue;    \n       }    \n       \n       ans =0;  \n       ans+=Get_smaller(len); //统计长度小于len的合法串 \n\n       ans+=Get_prefix(len,str); //从左到右逐个统计相同前缀下的字符串个数 \n\n       ans+=1;    //加入其本身值 \n       printf(\"%d\\n\",ans);    \n   }  \n  }  \n  return0;     \n\n}\n```\n","slug":"2010-12-31-algorithm-字典序问题","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhft0004qj7ly8n8nmri","content":"<h1 id=\"字典序问题\"><a href=\"#字典序问题\" class=\"headerlink\" title=\"字典序问题\"></a>字典序问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>在数据加密和数据压缩中常需要对特殊的字符串进行编码。给定的字母表A由26 个小<br>写英文字母组成A={a,b,…,z}。该字母表产生的升序字符串是指字符串中字母按照从左到右<br>出现的次序与字母在字母表中出现的次序相同，且每个字符最多出现1次。例如，a,b,ab,bc,xyz<br>等字符串都是升序字符串。现在对字母表A 产生的所有长度不超过6 的升序字符串按照字<br>典序排列并编码如下。<br>       1 2 … 26 27 28 …<br>       a b … z   ab ac …</p>\n<p>对于任意长度不超过6 的升序字符串，迅速计算出它在上述字典中的编码。</p>\n<p>第一行是一个正整数k，表示接下来共有k行。<br>接下来的k行中，每行给出一个字符串。</p>\n<p>输出共有k行，每行对应于一个字符串的编码。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;     </span><br><span class=\"line\">#include&lt;string.h&gt;     </span><br><span class=\"line\">constint N =26;     </span><br><span class=\"line\">constint LEN=7;     </span><br><span class=\"line\">char str[LEN];     </span><br><span class=\"line\">int c[N+1][N+1]; //c[i][j]记录组合数  </span><br><span class=\"line\"></span><br><span class=\"line\">//使用杨辉三角计算n以内的c[i][j]  c[i][j]=c[i-1][j-1]+c[i-1][j];   </span><br><span class=\"line\">void Get_C(int n,int c[][N+1]) </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    int i,left,right;   </span><br><span class=\"line\">    c[0][0]=1;   </span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)   </span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        c[i][0]=1;   </span><br><span class=\"line\">        c[i][i]=1;   </span><br><span class=\"line\">        left=1;right=i-1;   </span><br><span class=\"line\">        while(left&lt;=right)  //组合数性质：c[i][j]=c[i][i-j]; </span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            c[i][left] = c[i-1][left-1]+c[i-1][left];   </span><br><span class=\"line\">            c[i][right--]=c[i][left++];    </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">//统计长度小于len的合法串 </span><br><span class=\"line\">int Get_smaller(int len)  </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i,curans=0; </span><br><span class=\"line\">    for(i=1;i&lt;len;i++) </span><br><span class=\"line\">        curans+=c[N][i];//统计长度为i的字符串种类 </span><br><span class=\"line\">return curans; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//从左到右逐个统计相同前缀下的字符串个数 </span><br><span class=\"line\">int Get_prefix(int len,char*str) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i,j,curans=0; </span><br><span class=\"line\">     int pre=-1;   //记录前一字符 </span><br><span class=\"line\">for(i=0;i&lt;len;i++)   //统计前缀为i-1位时，可出现的合法情形  </span><br><span class=\"line\">       &#123;     </span><br><span class=\"line\">           int cur=str[i]-&apos;a&apos;;    //当前字符 </span><br><span class=\"line\">for(j=pre+1;j&lt;cur;j++)    //枚举摆放于当前前缀后的第一个字符，统计其合法串个数。 </span><br><span class=\"line\">           &#123;     </span><br><span class=\"line\">               curans+=c[N-j-1][len-i-1];  </span><br><span class=\"line\">           &#125;   </span><br><span class=\"line\">           pre=cur; //保留当前字符，作为情形的前一字符使用 </span><br><span class=\"line\">       &#125;     </span><br><span class=\"line\"></span><br><span class=\"line\">       return curans; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//判断输入是否非法 </span><br><span class=\"line\">bool Is_legal(int len,char*str) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i; </span><br><span class=\"line\">    for(i=1;i&lt;len;i++)    </span><br><span class=\"line\">           if(str[i]&lt;=str[i-1])    </span><br><span class=\"line\">           &#123;    </span><br><span class=\"line\">               returnfalse;    </span><br><span class=\"line\">           &#125;    </span><br><span class=\"line\">           returntrue; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">   Get_C(N,c);   // 使用杨辉三角计算26以内的所有组合数c[i][j]      </span><br><span class=\"line\">int tests;     </span><br><span class=\"line\">    </span><br><span class=\"line\">  while(scanf(&quot;%d&quot;,&amp;tests)!=EOF)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">   while(tests--)     </span><br><span class=\"line\">   &#123;     </span><br><span class=\"line\">       scanf(&quot;%s&quot;,str);  </span><br><span class=\"line\">       int len=strlen(str);     </span><br><span class=\"line\">       int ans;     </span><br><span class=\"line\">       bool flag=Is_legal(len,str);//判断输入串本身是否非法 </span><br><span class=\"line\"></span><br><span class=\"line\">       if(flag==false)//输入字符串本身非法直接输出0 </span><br><span class=\"line\">       &#123;    </span><br><span class=\"line\">           printf(&quot;0\\n&quot;);    </span><br><span class=\"line\">           continue;    </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\">       </span><br><span class=\"line\">       ans =0;  </span><br><span class=\"line\">       ans+=Get_smaller(len); //统计长度小于len的合法串 </span><br><span class=\"line\"></span><br><span class=\"line\">       ans+=Get_prefix(len,str); //从左到右逐个统计相同前缀下的字符串个数 </span><br><span class=\"line\"></span><br><span class=\"line\">       ans+=1;    //加入其本身值 </span><br><span class=\"line\">       printf(&quot;%d\\n&quot;,ans);    </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  return0;     </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"字典序问题\"><a href=\"#字典序问题\" class=\"headerlink\" title=\"字典序问题\"></a>字典序问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>在数据加密和数据压缩中常需要对特殊的字符串进行编码。给定的字母表A由26 个小<br>写英文字母组成A={a,b,…,z}。该字母表产生的升序字符串是指字符串中字母按照从左到右<br>出现的次序与字母在字母表中出现的次序相同，且每个字符最多出现1次。例如，a,b,ab,bc,xyz<br>等字符串都是升序字符串。现在对字母表A 产生的所有长度不超过6 的升序字符串按照字<br>典序排列并编码如下。<br>       1 2 … 26 27 28 …<br>       a b … z   ab ac …</p>\n<p>对于任意长度不超过6 的升序字符串，迅速计算出它在上述字典中的编码。</p>\n<p>第一行是一个正整数k，表示接下来共有k行。<br>接下来的k行中，每行给出一个字符串。</p>\n<p>输出共有k行，每行对应于一个字符串的编码。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;     </span><br><span class=\"line\">#include&lt;string.h&gt;     </span><br><span class=\"line\">constint N =26;     </span><br><span class=\"line\">constint LEN=7;     </span><br><span class=\"line\">char str[LEN];     </span><br><span class=\"line\">int c[N+1][N+1]; //c[i][j]记录组合数  </span><br><span class=\"line\"></span><br><span class=\"line\">//使用杨辉三角计算n以内的c[i][j]  c[i][j]=c[i-1][j-1]+c[i-1][j];   </span><br><span class=\"line\">void Get_C(int n,int c[][N+1]) </span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    int i,left,right;   </span><br><span class=\"line\">    c[0][0]=1;   </span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)   </span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        c[i][0]=1;   </span><br><span class=\"line\">        c[i][i]=1;   </span><br><span class=\"line\">        left=1;right=i-1;   </span><br><span class=\"line\">        while(left&lt;=right)  //组合数性质：c[i][j]=c[i][i-j]; </span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            c[i][left] = c[i-1][left-1]+c[i-1][left];   </span><br><span class=\"line\">            c[i][right--]=c[i][left++];    </span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">//统计长度小于len的合法串 </span><br><span class=\"line\">int Get_smaller(int len)  </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i,curans=0; </span><br><span class=\"line\">    for(i=1;i&lt;len;i++) </span><br><span class=\"line\">        curans+=c[N][i];//统计长度为i的字符串种类 </span><br><span class=\"line\">return curans; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//从左到右逐个统计相同前缀下的字符串个数 </span><br><span class=\"line\">int Get_prefix(int len,char*str) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i,j,curans=0; </span><br><span class=\"line\">     int pre=-1;   //记录前一字符 </span><br><span class=\"line\">for(i=0;i&lt;len;i++)   //统计前缀为i-1位时，可出现的合法情形  </span><br><span class=\"line\">       &#123;     </span><br><span class=\"line\">           int cur=str[i]-&apos;a&apos;;    //当前字符 </span><br><span class=\"line\">for(j=pre+1;j&lt;cur;j++)    //枚举摆放于当前前缀后的第一个字符，统计其合法串个数。 </span><br><span class=\"line\">           &#123;     </span><br><span class=\"line\">               curans+=c[N-j-1][len-i-1];  </span><br><span class=\"line\">           &#125;   </span><br><span class=\"line\">           pre=cur; //保留当前字符，作为情形的前一字符使用 </span><br><span class=\"line\">       &#125;     </span><br><span class=\"line\"></span><br><span class=\"line\">       return curans; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//判断输入是否非法 </span><br><span class=\"line\">bool Is_legal(int len,char*str) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    int i; </span><br><span class=\"line\">    for(i=1;i&lt;len;i++)    </span><br><span class=\"line\">           if(str[i]&lt;=str[i-1])    </span><br><span class=\"line\">           &#123;    </span><br><span class=\"line\">               returnfalse;    </span><br><span class=\"line\">           &#125;    </span><br><span class=\"line\">           returntrue; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">   Get_C(N,c);   // 使用杨辉三角计算26以内的所有组合数c[i][j]      </span><br><span class=\"line\">int tests;     </span><br><span class=\"line\">    </span><br><span class=\"line\">  while(scanf(&quot;%d&quot;,&amp;tests)!=EOF)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">   while(tests--)     </span><br><span class=\"line\">   &#123;     </span><br><span class=\"line\">       scanf(&quot;%s&quot;,str);  </span><br><span class=\"line\">       int len=strlen(str);     </span><br><span class=\"line\">       int ans;     </span><br><span class=\"line\">       bool flag=Is_legal(len,str);//判断输入串本身是否非法 </span><br><span class=\"line\"></span><br><span class=\"line\">       if(flag==false)//输入字符串本身非法直接输出0 </span><br><span class=\"line\">       &#123;    </span><br><span class=\"line\">           printf(&quot;0\\n&quot;);    </span><br><span class=\"line\">           continue;    </span><br><span class=\"line\">       &#125;    </span><br><span class=\"line\">       </span><br><span class=\"line\">       ans =0;  </span><br><span class=\"line\">       ans+=Get_smaller(len); //统计长度小于len的合法串 </span><br><span class=\"line\"></span><br><span class=\"line\">       ans+=Get_prefix(len,str); //从左到右逐个统计相同前缀下的字符串个数 </span><br><span class=\"line\"></span><br><span class=\"line\">       ans+=1;    //加入其本身值 </span><br><span class=\"line\">       printf(&quot;%d\\n&quot;,ans);    </span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  return0;     </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"统计数字问题","keywords":["algorithm","算法设计与分析"],"description":"统计数字问题解题报告","comments":1,"_content":"\n# 统计数字问题\n\n## Description\n\n一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，\n每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数\n字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1，\n2，…，9。\n\n给定表示书的总页码的10 进制整数n (1≤n≤10^9) 。计算书的全部页码中分别用到多少\n次数字0，1，2，…，9。\n\n每个文件只有1 行，给出表示书的总页码的整数n。\n\n输出文件共有10行，在第k行输出页码中用到数\n字k-1 的次数，k=1，2，…，10。\n\n## Sample Input\n\n```\n11\n```\n\n## Sample Output\n\n```\n1\n4\n1\n1\n1\n1\n1\n1\n1\n1\n```\n\n### Answer\n\n```\n#include<stdio.h>  \n#include<string.h>  \nconstint N =10;  \nint ans[N];  //ans[i]存放数字i出现的次数\nchar str[N];  //输入的数字\nint a[N],len; //a[i]为10^i，len为数字的长度 \n\nvoid solve(long n)  //统计数字n\n{  \n\tlong m=n+1;  \n\tmemset(ans,0,sizeof(ans));  \n\tint j,i;  \n\tfor(i=0;i<len;i++)  \n\t{  \n\t\tint x=str[i]-'0';  \n\t\tint t=(m-1)/a[len-i-1];  \n\t\tans[x]+=m-t*a[len-i-1];//自左往右到i位数字不变条件下，i位为x的数字个数  \n\t\tt=t/10;  \n\t\tj=0;  \n\t\twhile(j<x)  \n\t\t{  \n\t\t\tans[j]+=(t+1)*a[len-i-1];//统计当前位置为j出现的个数  \n\t\t\tj++;  \n\t\t}  \n\t\twhile(j<N) //统计当前位置为j的数目 \n\t\t{  \n\t\t\tans[j]+=t*a[len-i-1];  \n\t\t\tj++;  \n\t\t}  \n\t\tans[0]-=a[len-i-1];//消去前导0  \n\t}  \n\tfor(i=0;i<N;i++)  \n\t\tprintf(\"%d\\n\",ans[i]);  \n}  \n\nint main()  \n{  \n\tint i;  \n\ta[0]=1;  \n\tfor(i=1;i<N;i++)  \n\t\ta[i]=a[i-1]*10;  \n\tlong n;  \n\twhile(scanf(\"%s\",str)!=EOF) {  \n\t\tn=0;  \n\t\tlen=strlen(str);  \n\t\tfor(int i=0;i<len;i++)  \n\t\t\tn=n*10+str[i]-'0';  \n\t\tsolve(n);  \n\t}  \n\treturn0;  \n}\n\n```\n","source":"_posts/2010-12-31-algorithm-统计数字问题.md","raw":"---\nlayout: post\ntitle: \"统计数字问题\"\nkeywords: [\"algorithm\", \"算法设计与分析\"]\ndescription: \"统计数字问题解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\"]\ncomments: true\n---\n\n# 统计数字问题\n\n## Description\n\n一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，\n每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数\n字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1，\n2，…，9。\n\n给定表示书的总页码的10 进制整数n (1≤n≤10^9) 。计算书的全部页码中分别用到多少\n次数字0，1，2，…，9。\n\n每个文件只有1 行，给出表示书的总页码的整数n。\n\n输出文件共有10行，在第k行输出页码中用到数\n字k-1 的次数，k=1，2，…，10。\n\n## Sample Input\n\n```\n11\n```\n\n## Sample Output\n\n```\n1\n4\n1\n1\n1\n1\n1\n1\n1\n1\n```\n\n### Answer\n\n```\n#include<stdio.h>  \n#include<string.h>  \nconstint N =10;  \nint ans[N];  //ans[i]存放数字i出现的次数\nchar str[N];  //输入的数字\nint a[N],len; //a[i]为10^i，len为数字的长度 \n\nvoid solve(long n)  //统计数字n\n{  \n\tlong m=n+1;  \n\tmemset(ans,0,sizeof(ans));  \n\tint j,i;  \n\tfor(i=0;i<len;i++)  \n\t{  \n\t\tint x=str[i]-'0';  \n\t\tint t=(m-1)/a[len-i-1];  \n\t\tans[x]+=m-t*a[len-i-1];//自左往右到i位数字不变条件下，i位为x的数字个数  \n\t\tt=t/10;  \n\t\tj=0;  \n\t\twhile(j<x)  \n\t\t{  \n\t\t\tans[j]+=(t+1)*a[len-i-1];//统计当前位置为j出现的个数  \n\t\t\tj++;  \n\t\t}  \n\t\twhile(j<N) //统计当前位置为j的数目 \n\t\t{  \n\t\t\tans[j]+=t*a[len-i-1];  \n\t\t\tj++;  \n\t\t}  \n\t\tans[0]-=a[len-i-1];//消去前导0  \n\t}  \n\tfor(i=0;i<N;i++)  \n\t\tprintf(\"%d\\n\",ans[i]);  \n}  \n\nint main()  \n{  \n\tint i;  \n\ta[0]=1;  \n\tfor(i=1;i<N;i++)  \n\t\ta[i]=a[i-1]*10;  \n\tlong n;  \n\twhile(scanf(\"%s\",str)!=EOF) {  \n\t\tn=0;  \n\t\tlen=strlen(str);  \n\t\tfor(int i=0;i<len;i++)  \n\t\t\tn=n*10+str[i]-'0';  \n\t\tsolve(n);  \n\t}  \n\treturn0;  \n}\n\n```\n","slug":"2010-12-31-algorithm-统计数字问题","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhfu0005qj7ljntiugw2","content":"<h1 id=\"统计数字问题\"><a href=\"#统计数字问题\" class=\"headerlink\" title=\"统计数字问题\"></a>统计数字问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，<br>每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数<br>字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1，<br>2，…，9。</p>\n<p>给定表示书的总页码的10 进制整数n (1≤n≤10^9) 。计算书的全部页码中分别用到多少<br>次数字0，1，2，…，9。</p>\n<p>每个文件只有1 行，给出表示书的总页码的整数n。</p>\n<p>输出文件共有10行，在第k行输出页码中用到数<br>字k-1 的次数，k=1，2，…，10。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;  </span><br><span class=\"line\">#include&lt;string.h&gt;  </span><br><span class=\"line\">constint N =10;  </span><br><span class=\"line\">int ans[N];  //ans[i]存放数字i出现的次数</span><br><span class=\"line\">char str[N];  //输入的数字</span><br><span class=\"line\">int a[N],len; //a[i]为10^i，len为数字的长度 </span><br><span class=\"line\"></span><br><span class=\"line\">void solve(long n)  //统计数字n</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">\tlong m=n+1;  </span><br><span class=\"line\">\tmemset(ans,0,sizeof(ans));  </span><br><span class=\"line\">\tint j,i;  </span><br><span class=\"line\">\tfor(i=0;i&lt;len;i++)  </span><br><span class=\"line\">\t&#123;  </span><br><span class=\"line\">\t\tint x=str[i]-&apos;0&apos;;  </span><br><span class=\"line\">\t\tint t=(m-1)/a[len-i-1];  </span><br><span class=\"line\">\t\tans[x]+=m-t*a[len-i-1];//自左往右到i位数字不变条件下，i位为x的数字个数  </span><br><span class=\"line\">\t\tt=t/10;  </span><br><span class=\"line\">\t\tj=0;  </span><br><span class=\"line\">\t\twhile(j&lt;x)  </span><br><span class=\"line\">\t\t&#123;  </span><br><span class=\"line\">\t\t\tans[j]+=(t+1)*a[len-i-1];//统计当前位置为j出现的个数  </span><br><span class=\"line\">\t\t\tj++;  </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t\twhile(j&lt;N) //统计当前位置为j的数目 </span><br><span class=\"line\">\t\t&#123;  </span><br><span class=\"line\">\t\t\tans[j]+=t*a[len-i-1];  </span><br><span class=\"line\">\t\t\tj++;  </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t\tans[0]-=a[len-i-1];//消去前导0  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tfor(i=0;i&lt;N;i++)  </span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,ans[i]);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">\tint i;  </span><br><span class=\"line\">\ta[0]=1;  </span><br><span class=\"line\">\tfor(i=1;i&lt;N;i++)  </span><br><span class=\"line\">\t\ta[i]=a[i-1]*10;  </span><br><span class=\"line\">\tlong n;  </span><br><span class=\"line\">\twhile(scanf(&quot;%s&quot;,str)!=EOF) &#123;  </span><br><span class=\"line\">\t\tn=0;  </span><br><span class=\"line\">\t\tlen=strlen(str);  </span><br><span class=\"line\">\t\tfor(int i=0;i&lt;len;i++)  </span><br><span class=\"line\">\t\t\tn=n*10+str[i]-&apos;0&apos;;  </span><br><span class=\"line\">\t\tsolve(n);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\treturn0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"统计数字问题\"><a href=\"#统计数字问题\" class=\"headerlink\" title=\"统计数字问题\"></a>统计数字问题</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，<br>每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数<br>字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1，<br>2，…，9。</p>\n<p>给定表示书的总页码的10 进制整数n (1≤n≤10^9) 。计算书的全部页码中分别用到多少<br>次数字0，1，2，…，9。</p>\n<p>每个文件只有1 行，给出表示书的总页码的整数n。</p>\n<p>输出文件共有10行，在第k行输出页码中用到数<br>字k-1 的次数，k=1，2，…，10。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;  </span><br><span class=\"line\">#include&lt;string.h&gt;  </span><br><span class=\"line\">constint N =10;  </span><br><span class=\"line\">int ans[N];  //ans[i]存放数字i出现的次数</span><br><span class=\"line\">char str[N];  //输入的数字</span><br><span class=\"line\">int a[N],len; //a[i]为10^i，len为数字的长度 </span><br><span class=\"line\"></span><br><span class=\"line\">void solve(long n)  //统计数字n</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">\tlong m=n+1;  </span><br><span class=\"line\">\tmemset(ans,0,sizeof(ans));  </span><br><span class=\"line\">\tint j,i;  </span><br><span class=\"line\">\tfor(i=0;i&lt;len;i++)  </span><br><span class=\"line\">\t&#123;  </span><br><span class=\"line\">\t\tint x=str[i]-&apos;0&apos;;  </span><br><span class=\"line\">\t\tint t=(m-1)/a[len-i-1];  </span><br><span class=\"line\">\t\tans[x]+=m-t*a[len-i-1];//自左往右到i位数字不变条件下，i位为x的数字个数  </span><br><span class=\"line\">\t\tt=t/10;  </span><br><span class=\"line\">\t\tj=0;  </span><br><span class=\"line\">\t\twhile(j&lt;x)  </span><br><span class=\"line\">\t\t&#123;  </span><br><span class=\"line\">\t\t\tans[j]+=(t+1)*a[len-i-1];//统计当前位置为j出现的个数  </span><br><span class=\"line\">\t\t\tj++;  </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t\twhile(j&lt;N) //统计当前位置为j的数目 </span><br><span class=\"line\">\t\t&#123;  </span><br><span class=\"line\">\t\t\tans[j]+=t*a[len-i-1];  </span><br><span class=\"line\">\t\t\tj++;  </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t\tans[0]-=a[len-i-1];//消去前导0  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tfor(i=0;i&lt;N;i++)  </span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,ans[i]);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">\tint i;  </span><br><span class=\"line\">\ta[0]=1;  </span><br><span class=\"line\">\tfor(i=1;i&lt;N;i++)  </span><br><span class=\"line\">\t\ta[i]=a[i-1]*10;  </span><br><span class=\"line\">\tlong n;  </span><br><span class=\"line\">\twhile(scanf(&quot;%s&quot;,str)!=EOF) &#123;  </span><br><span class=\"line\">\t\tn=0;  </span><br><span class=\"line\">\t\tlen=strlen(str);  </span><br><span class=\"line\">\t\tfor(int i=0;i&lt;len;i++)  </span><br><span class=\"line\">\t\t\tn=n*10+str[i]-&apos;0&apos;;  </span><br><span class=\"line\">\t\tsolve(n);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\treturn0;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 3211 Washing Clothes [背包]","keywords":["algorithm","背包","POJ"],"description":"POJ 3211 Washing Clothes [背包]解题报告","comments":1,"_content":"\n[POJ 3211 Washing Clothes](http://poj.org/problem?id=3211)\n\n## 核心算法：\n01背包\n\n## 解题思路： \n首先按颜色对衣服进行归类，即将相同颜色的衣服放在同一类中\n对于某一种颜色的所有衣服所需要的最少时间，相当于将这堆衣服按时间分为两推，使得这两堆衣服所需要的时间尽可能的接近。\n\n### 对于每堆衣服建模：\n   假设当前这堆衣服一个人洗的时间为sum, 令mid = sum/2;\n   \n**问题转化为**\n\n（1）有背包容量为mid,现在要从这堆衣服中选取衣服，使得总容量尽可能接近于mid\n\n**继续转化..**\n\n（2）背包容量为mid,某件衣服的重量为wi,价值也为wi,计算所能达到的最大价值 dp[mid].\n\n  那么问题（2）中的dp[mid]相当于问题（1）中最接近于mid的那个容量，故原问题中这堆衣服所需要的实际时间为***sum - dp[mid]***;\n  \n## Answer\n\n```c++\n#include<stdio.h>\n#include<string.h>\n#include<vector>\nusingnamespace std;\nconstint M =10;\nconstint N =100;\nchar color[M][N];//存储颜色,及其对应的id\nvector<int>cost[M];//存储每种颜色对应的衣物所需时间\nint dp[10000+2];\n\ninline int max(int a,int b)\n{\n    return a>b?a:b;\n}\n\nint main()\n{\n    int n,m;\n    while(scanf(\"%d%d\",&m,&n)!=EOF)\n    {\n        if(m==0&&n==0)break;\n        int i,j;\n        for(i=0;i<m;i++)\n        {\n            scanf(\"%s\",color[i]);//将每一种颜色输入其中\n            cost[i].clear();\n        }\n\n        while(n--) //输入每一件衣服的基本信息\n        {\n            char col[N];\n            int time;\n            scanf(\"%d%s\",&time,col);\n            for(i=0;i<m;i++)\n                if(strcmp(col,color[i])==0)break;\n        \n           if(i<m)  //将当前衣服信息放入对应的颜色内\n           {\n              cost[i].push_back(time);\n           }\n        }\n\n        int ans =0;\n        for(i=0;i<m;i++)   //对每一种颜色的衣服进行01背包建模\n        {\n           memset(dp,0,sizeof(dp));\n           int sz = cost[i].size();\n           int k,mid ,sum =0;\n           for(j=0;j<sz;j++)sum += cost[i][j];\n           mid = sum/2;\n           for(j=0;j<sz;j++)\n           {\n               for(k = mid;k>=cost[i][j];k--)\n               {\n                   dp[k] = max(dp[k],dp[k-cost[i][j]]+cost[i][j]);\n               }    \n           }\n           ans = ans + sum - dp[mid];\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return0;\n}\n```\n","source":"_posts/2011-01-24-algorithm-dp-POJ-3211-Washing-Clothes.md","raw":"---\nlayout: post\ntitle: \"POJ 3211 Washing Clothes [背包]\"\nkeywords: [\"algorithm\", \"背包\",\"POJ\"]\ndescription: \"POJ 3211 Washing Clothes [背包]解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"背包\",\"DP\"]\ncomments: true\n---\n\n[POJ 3211 Washing Clothes](http://poj.org/problem?id=3211)\n\n## 核心算法：\n01背包\n\n## 解题思路： \n首先按颜色对衣服进行归类，即将相同颜色的衣服放在同一类中\n对于某一种颜色的所有衣服所需要的最少时间，相当于将这堆衣服按时间分为两推，使得这两堆衣服所需要的时间尽可能的接近。\n\n### 对于每堆衣服建模：\n   假设当前这堆衣服一个人洗的时间为sum, 令mid = sum/2;\n   \n**问题转化为**\n\n（1）有背包容量为mid,现在要从这堆衣服中选取衣服，使得总容量尽可能接近于mid\n\n**继续转化..**\n\n（2）背包容量为mid,某件衣服的重量为wi,价值也为wi,计算所能达到的最大价值 dp[mid].\n\n  那么问题（2）中的dp[mid]相当于问题（1）中最接近于mid的那个容量，故原问题中这堆衣服所需要的实际时间为***sum - dp[mid]***;\n  \n## Answer\n\n```c++\n#include<stdio.h>\n#include<string.h>\n#include<vector>\nusingnamespace std;\nconstint M =10;\nconstint N =100;\nchar color[M][N];//存储颜色,及其对应的id\nvector<int>cost[M];//存储每种颜色对应的衣物所需时间\nint dp[10000+2];\n\ninline int max(int a,int b)\n{\n    return a>b?a:b;\n}\n\nint main()\n{\n    int n,m;\n    while(scanf(\"%d%d\",&m,&n)!=EOF)\n    {\n        if(m==0&&n==0)break;\n        int i,j;\n        for(i=0;i<m;i++)\n        {\n            scanf(\"%s\",color[i]);//将每一种颜色输入其中\n            cost[i].clear();\n        }\n\n        while(n--) //输入每一件衣服的基本信息\n        {\n            char col[N];\n            int time;\n            scanf(\"%d%s\",&time,col);\n            for(i=0;i<m;i++)\n                if(strcmp(col,color[i])==0)break;\n        \n           if(i<m)  //将当前衣服信息放入对应的颜色内\n           {\n              cost[i].push_back(time);\n           }\n        }\n\n        int ans =0;\n        for(i=0;i<m;i++)   //对每一种颜色的衣服进行01背包建模\n        {\n           memset(dp,0,sizeof(dp));\n           int sz = cost[i].size();\n           int k,mid ,sum =0;\n           for(j=0;j<sz;j++)sum += cost[i][j];\n           mid = sum/2;\n           for(j=0;j<sz;j++)\n           {\n               for(k = mid;k>=cost[i][j];k--)\n               {\n                   dp[k] = max(dp[k],dp[k-cost[i][j]]+cost[i][j]);\n               }    \n           }\n           ans = ans + sum - dp[mid];\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return0;\n}\n```\n","slug":"2011-01-24-algorithm-dp-POJ-3211-Washing-Clothes","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhfw0007qj7lmj668w7p","content":"<p><a href=\"http://poj.org/problem?id=3211\" target=\"_blank\" rel=\"external\">POJ 3211 Washing Clothes</a></p>\n<h2 id=\"核心算法：\"><a href=\"#核心算法：\" class=\"headerlink\" title=\"核心算法：\"></a>核心算法：</h2><p>01背包</p>\n<h2 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h2><p>首先按颜色对衣服进行归类，即将相同颜色的衣服放在同一类中<br>对于某一种颜色的所有衣服所需要的最少时间，相当于将这堆衣服按时间分为两推，使得这两堆衣服所需要的时间尽可能的接近。</p>\n<h3 id=\"对于每堆衣服建模：\"><a href=\"#对于每堆衣服建模：\" class=\"headerlink\" title=\"对于每堆衣服建模：\"></a>对于每堆衣服建模：</h3><p>   假设当前这堆衣服一个人洗的时间为sum, 令mid = sum/2;</p>\n<p><strong>问题转化为</strong></p>\n<p>（1）有背包容量为mid,现在要从这堆衣服中选取衣服，使得总容量尽可能接近于mid</p>\n<p><strong>继续转化..</strong></p>\n<p>（2）背包容量为mid,某件衣服的重量为wi,价值也为wi,计算所能达到的最大价值 dp[mid].</p>\n<p>  那么问题（2）中的dp[mid]相当于问题（1）中最接近于mid的那个容量，故原问题中这堆衣服所需要的实际时间为<strong><em>sum - dp[mid]</em></strong>;</p>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\">usingnamespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\">constint M =<span class=\"number\">10</span>;</span><br><span class=\"line\">constint N =<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> color[M][N];<span class=\"comment\">//存储颜色,及其对应的id</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;cost[M];<span class=\"comment\">//存储每种颜色对应的衣物所需时间</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">10000</span>+<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;m,&amp;n)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m==<span class=\"number\">0</span>&amp;&amp;n==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,color[i]);<span class=\"comment\">//将每一种颜色输入其中</span></span><br><span class=\"line\">            cost[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n--) <span class=\"comment\">//输入每一件衣服的基本信息</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> col[N];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> time;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%s\"</span>,&amp;time,col);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(col,color[i])==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">           <span class=\"keyword\">if</span>(i&lt;m)  <span class=\"comment\">//将当前衣服信息放入对应的颜色内</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">              cost[i].push_back(time);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;m;i++)   <span class=\"comment\">//对每一种颜色的衣服进行01背包建模</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">           <span class=\"keyword\">int</span> sz = cost[i].size();</span><br><span class=\"line\">           <span class=\"keyword\">int</span> k,mid ,sum =<span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;sz;j++)sum += cost[i][j];</span><br><span class=\"line\">           mid = sum/<span class=\"number\">2</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;sz;j++)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span>(k = mid;k&gt;=cost[i][j];k--)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   dp[k] = max(dp[k],dp[k-cost[i][j]]+cost[i][j]);</span><br><span class=\"line\">               &#125;    </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           ans = ans + sum - dp[mid];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=3211\">POJ 3211 Washing Clothes</a></p>\n<h2 id=\"核心算法：\"><a href=\"#核心算法：\" class=\"headerlink\" title=\"核心算法：\"></a>核心算法：</h2><p>01背包</p>\n<h2 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h2><p>首先按颜色对衣服进行归类，即将相同颜色的衣服放在同一类中<br>对于某一种颜色的所有衣服所需要的最少时间，相当于将这堆衣服按时间分为两推，使得这两堆衣服所需要的时间尽可能的接近。</p>\n<h3 id=\"对于每堆衣服建模：\"><a href=\"#对于每堆衣服建模：\" class=\"headerlink\" title=\"对于每堆衣服建模：\"></a>对于每堆衣服建模：</h3><p>   假设当前这堆衣服一个人洗的时间为sum, 令mid = sum/2;</p>\n<p><strong>问题转化为</strong></p>\n<p>（1）有背包容量为mid,现在要从这堆衣服中选取衣服，使得总容量尽可能接近于mid</p>\n<p><strong>继续转化..</strong></p>\n<p>（2）背包容量为mid,某件衣服的重量为wi,价值也为wi,计算所能达到的最大价值 dp[mid].</p>\n<p>  那么问题（2）中的dp[mid]相当于问题（1）中最接近于mid的那个容量，故原问题中这堆衣服所需要的实际时间为<strong><em>sum - dp[mid]</em></strong>;</p>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\">usingnamespace <span class=\"built_in\">std</span>;</span><br><span class=\"line\">constint M =<span class=\"number\">10</span>;</span><br><span class=\"line\">constint N =<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> color[M][N];<span class=\"comment\">//存储颜色,及其对应的id</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;cost[M];<span class=\"comment\">//存储每种颜色对应的衣物所需时间</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">10000</span>+<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;m,&amp;n)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m==<span class=\"number\">0</span>&amp;&amp;n==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,color[i]);<span class=\"comment\">//将每一种颜色输入其中</span></span><br><span class=\"line\">            cost[i].clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n--) <span class=\"comment\">//输入每一件衣服的基本信息</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> col[N];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> time;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%s\"</span>,&amp;time,col);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;m;i++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(col,color[i])==<span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">           <span class=\"keyword\">if</span>(i&lt;m)  <span class=\"comment\">//将当前衣服信息放入对应的颜色内</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">              cost[i].push_back(time);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;m;i++)   <span class=\"comment\">//对每一种颜色的衣服进行01背包建模</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">           <span class=\"keyword\">int</span> sz = cost[i].size();</span><br><span class=\"line\">           <span class=\"keyword\">int</span> k,mid ,sum =<span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;sz;j++)sum += cost[i][j];</span><br><span class=\"line\">           mid = sum/<span class=\"number\">2</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;sz;j++)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span>(k = mid;k&gt;=cost[i][j];k--)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   dp[k] = max(dp[k],dp[k-cost[i][j]]+cost[i][j]);</span><br><span class=\"line\">               &#125;    </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           ans = ans + sum - dp[mid];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 3756 Chess Game【DP求期望】","keywords":["algorithm","POJ"],"description":"POJ 3756 Chess Game 解题报告","comments":1,"_content":"[POJ 3756 Chess Game【DP求期望】](http://poj.org/problem?id=3756)\n\n## 核心算法 \n\nDP\n\n## 分析\n1. graph[i]记录在格子i处前进的步数\n2. stop[i]标记在格子i处是否停一次\n3. dp[i][j]表示第j部到达格子i的概率\n\n则  初始化下dp[0][0]=1;\n若已知dp[i][j],现在掷骰子得点数为k，移动到格子curto = i+k;\n如果格子curto处为暂停，则将当前概率加至dp[curto][i+2]处\n否则，curto 首先根据graph[curto]信息移动，将概率加至相应位置dp[curto][i+1]即可\n\n  ans = sum(dp[n][i]*i)(i=0,1,2,...N)\n### PS:当ans = 0时输出Impossible!\n\n\n# Answer\n\n\n```\n#include<stdio.h>\n#include<string.h>\nconst int N = 1001;//最多需要步数\nconst int M =105;//格子数\nint graph[M];//表示第i格是前进还是后退\nbool stop[M];//表示该格是否该停一次\ndouble dp[M][N];//dp[i][j]表示第j步到达第i格的概率\nint main()\n{\n    int nf,ns,nb,n,id,step;\n    while(scanf(\"%d\",&n)!=EOF) {\n\n        memset(graph,0,sizeof(graph));\n        memset(stop,false,sizeof(stop));\n        memset(dp,0,sizeof(dp));\n        dp[0][0]=1;//第0步在0格的概率为1\n        scanf(\"%d\",&nf);//前进信息\n        while(nf--){scanf(\"%d%d\",&id,&step);graph[id]+=step;}\n        scanf(\"%d\",&nb); //后退信息\n        while(nb--){\n            scanf(\"%d%d\",&id,&step);\n            graph[id]-=step;\n        }\n\n        scanf(\"%d\",&ns);//暂停信息\n        while(ns--) {\n            scanf(\"%d\",&id);\n            stop[id]=true;\n        }\n\n        double once = 1.0/6;\n        int i,j,k;\n        for(i=1;i<N;i++) {\n            for(j=0;j<n;j++) {\n                if(dp[j][i-1]==0)\n                continue;\n\n                for(k=1;k<=6;k++) {\n                    double top = once*dp[j][i-1];\n                    int curto = k+j;\n                    if(curto>n) {\n                        curto = 2*n-curto;\n                    }\n\n                    if(stop[curto])//暂停\n                    {\n                        dp[curto][i+1]+=top;\n                        continue;\n                    }\n\n                    curto+=graph[curto];\n                    if(curto>n)\n                        curto = 2*n-curto;\n\n                    if(curto<0)curto=-curto;\n                        dp[curto][i]+=top;\n                }\n            }\n        }\n\n        double ans = 0;\n        for(i=0;i<N;i++) {\n            ans+=dp[n][i]*i;\n        }\n\n        if(ans>0)\n            printf(\"%.2lf\\n\",ans);\n        else\n            printf(\"Impossible\\n\");\n    }\n    return 0;\n}\n```\n\n","source":"_posts/2011-01-25-POJ-3756-Chess-Game.md","raw":"---\nlayout: post\ntitle: \"POJ 3756 Chess Game【DP求期望】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 3756 Chess Game 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"DP\"]\ncomments: true \n---\n[POJ 3756 Chess Game【DP求期望】](http://poj.org/problem?id=3756)\n\n## 核心算法 \n\nDP\n\n## 分析\n1. graph[i]记录在格子i处前进的步数\n2. stop[i]标记在格子i处是否停一次\n3. dp[i][j]表示第j部到达格子i的概率\n\n则  初始化下dp[0][0]=1;\n若已知dp[i][j],现在掷骰子得点数为k，移动到格子curto = i+k;\n如果格子curto处为暂停，则将当前概率加至dp[curto][i+2]处\n否则，curto 首先根据graph[curto]信息移动，将概率加至相应位置dp[curto][i+1]即可\n\n  ans = sum(dp[n][i]*i)(i=0,1,2,...N)\n### PS:当ans = 0时输出Impossible!\n\n\n# Answer\n\n\n```\n#include<stdio.h>\n#include<string.h>\nconst int N = 1001;//最多需要步数\nconst int M =105;//格子数\nint graph[M];//表示第i格是前进还是后退\nbool stop[M];//表示该格是否该停一次\ndouble dp[M][N];//dp[i][j]表示第j步到达第i格的概率\nint main()\n{\n    int nf,ns,nb,n,id,step;\n    while(scanf(\"%d\",&n)!=EOF) {\n\n        memset(graph,0,sizeof(graph));\n        memset(stop,false,sizeof(stop));\n        memset(dp,0,sizeof(dp));\n        dp[0][0]=1;//第0步在0格的概率为1\n        scanf(\"%d\",&nf);//前进信息\n        while(nf--){scanf(\"%d%d\",&id,&step);graph[id]+=step;}\n        scanf(\"%d\",&nb); //后退信息\n        while(nb--){\n            scanf(\"%d%d\",&id,&step);\n            graph[id]-=step;\n        }\n\n        scanf(\"%d\",&ns);//暂停信息\n        while(ns--) {\n            scanf(\"%d\",&id);\n            stop[id]=true;\n        }\n\n        double once = 1.0/6;\n        int i,j,k;\n        for(i=1;i<N;i++) {\n            for(j=0;j<n;j++) {\n                if(dp[j][i-1]==0)\n                continue;\n\n                for(k=1;k<=6;k++) {\n                    double top = once*dp[j][i-1];\n                    int curto = k+j;\n                    if(curto>n) {\n                        curto = 2*n-curto;\n                    }\n\n                    if(stop[curto])//暂停\n                    {\n                        dp[curto][i+1]+=top;\n                        continue;\n                    }\n\n                    curto+=graph[curto];\n                    if(curto>n)\n                        curto = 2*n-curto;\n\n                    if(curto<0)curto=-curto;\n                        dp[curto][i]+=top;\n                }\n            }\n        }\n\n        double ans = 0;\n        for(i=0;i<N;i++) {\n            ans+=dp[n][i]*i;\n        }\n\n        if(ans>0)\n            printf(\"%.2lf\\n\",ans);\n        else\n            printf(\"Impossible\\n\");\n    }\n    return 0;\n}\n```\n\n","slug":"2011-01-25-POJ-3756-Chess-Game","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhg1000aqj7llf9b8oav","content":"<p><a href=\"http://poj.org/problem?id=3756\" target=\"_blank\" rel=\"external\">POJ 3756 Chess Game【DP求期望】</a></p>\n<h2 id=\"核心算法\"><a href=\"#核心算法\" class=\"headerlink\" title=\"核心算法\"></a>核心算法</h2><p>DP</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ol>\n<li>graph[i]记录在格子i处前进的步数</li>\n<li>stop[i]标记在格子i处是否停一次</li>\n<li>dp[i][j]表示第j部到达格子i的概率</li>\n</ol>\n<p>则  初始化下dp[0][0]=1;<br>若已知dp[i][j],现在掷骰子得点数为k，移动到格子curto = i+k;<br>如果格子curto处为暂停，则将当前概率加至dp[curto][i+2]处<br>否则，curto 首先根据graph[curto]信息移动，将概率加至相应位置dp[curto][i+1]即可</p>\n<p>  ans = sum(dp[n][i]*i)(i=0,1,2,…N)</p>\n<h3 id=\"PS-当ans-0时输出Impossible\"><a href=\"#PS-当ans-0时输出Impossible\" class=\"headerlink\" title=\"PS:当ans = 0时输出Impossible!\"></a>PS:当ans = 0时输出Impossible!</h3><h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">const int N = 1001;//最多需要步数</span><br><span class=\"line\">const int M =105;//格子数</span><br><span class=\"line\">int graph[M];//表示第i格是前进还是后退</span><br><span class=\"line\">bool stop[M];//表示该格是否该停一次</span><br><span class=\"line\">double dp[M][N];//dp[i][j]表示第j步到达第i格的概率</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int nf,ns,nb,n,id,step;</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;n)!=EOF) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(graph,0,sizeof(graph));</span><br><span class=\"line\">        memset(stop,false,sizeof(stop));</span><br><span class=\"line\">        memset(dp,0,sizeof(dp));</span><br><span class=\"line\">        dp[0][0]=1;//第0步在0格的概率为1</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;nf);//前进信息</span><br><span class=\"line\">        while(nf--)&#123;scanf(&quot;%d%d&quot;,&amp;id,&amp;step);graph[id]+=step;&#125;</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;nb); //后退信息</span><br><span class=\"line\">        while(nb--)&#123;</span><br><span class=\"line\">            scanf(&quot;%d%d&quot;,&amp;id,&amp;step);</span><br><span class=\"line\">            graph[id]-=step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;ns);//暂停信息</span><br><span class=\"line\">        while(ns--) &#123;</span><br><span class=\"line\">            scanf(&quot;%d&quot;,&amp;id);</span><br><span class=\"line\">            stop[id]=true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        double once = 1.0/6;</span><br><span class=\"line\">        int i,j,k;</span><br><span class=\"line\">        for(i=1;i&lt;N;i++) &#123;</span><br><span class=\"line\">            for(j=0;j&lt;n;j++) &#123;</span><br><span class=\"line\">                if(dp[j][i-1]==0)</span><br><span class=\"line\">                continue;</span><br><span class=\"line\"></span><br><span class=\"line\">                for(k=1;k&lt;=6;k++) &#123;</span><br><span class=\"line\">                    double top = once*dp[j][i-1];</span><br><span class=\"line\">                    int curto = k+j;</span><br><span class=\"line\">                    if(curto&gt;n) &#123;</span><br><span class=\"line\">                        curto = 2*n-curto;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(stop[curto])//暂停</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dp[curto][i+1]+=top;</span><br><span class=\"line\">                        continue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    curto+=graph[curto];</span><br><span class=\"line\">                    if(curto&gt;n)</span><br><span class=\"line\">                        curto = 2*n-curto;</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(curto&lt;0)curto=-curto;</span><br><span class=\"line\">                        dp[curto][i]+=top;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        double ans = 0;</span><br><span class=\"line\">        for(i=0;i&lt;N;i++) &#123;</span><br><span class=\"line\">            ans+=dp[n][i]*i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(ans&gt;0)</span><br><span class=\"line\">            printf(&quot;%.2lf\\n&quot;,ans);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            printf(&quot;Impossible\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=3756\">POJ 3756 Chess Game【DP求期望】</a></p>\n<h2 id=\"核心算法\"><a href=\"#核心算法\" class=\"headerlink\" title=\"核心算法\"></a>核心算法</h2><p>DP</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ol>\n<li>graph[i]记录在格子i处前进的步数</li>\n<li>stop[i]标记在格子i处是否停一次</li>\n<li>dp[i][j]表示第j部到达格子i的概率</li>\n</ol>\n<p>则  初始化下dp[0][0]=1;<br>若已知dp[i][j],现在掷骰子得点数为k，移动到格子curto = i+k;<br>如果格子curto处为暂停，则将当前概率加至dp[curto][i+2]处<br>否则，curto 首先根据graph[curto]信息移动，将概率加至相应位置dp[curto][i+1]即可</p>\n<p>  ans = sum(dp[n][i]*i)(i=0,1,2,…N)</p>\n<h3 id=\"PS-当ans-0时输出Impossible\"><a href=\"#PS-当ans-0时输出Impossible\" class=\"headerlink\" title=\"PS:当ans = 0时输出Impossible!\"></a>PS:当ans = 0时输出Impossible!</h3><h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">const int N = 1001;//最多需要步数</span><br><span class=\"line\">const int M =105;//格子数</span><br><span class=\"line\">int graph[M];//表示第i格是前进还是后退</span><br><span class=\"line\">bool stop[M];//表示该格是否该停一次</span><br><span class=\"line\">double dp[M][N];//dp[i][j]表示第j步到达第i格的概率</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int nf,ns,nb,n,id,step;</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;n)!=EOF) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(graph,0,sizeof(graph));</span><br><span class=\"line\">        memset(stop,false,sizeof(stop));</span><br><span class=\"line\">        memset(dp,0,sizeof(dp));</span><br><span class=\"line\">        dp[0][0]=1;//第0步在0格的概率为1</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;nf);//前进信息</span><br><span class=\"line\">        while(nf--)&#123;scanf(&quot;%d%d&quot;,&amp;id,&amp;step);graph[id]+=step;&#125;</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;nb); //后退信息</span><br><span class=\"line\">        while(nb--)&#123;</span><br><span class=\"line\">            scanf(&quot;%d%d&quot;,&amp;id,&amp;step);</span><br><span class=\"line\">            graph[id]-=step;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;ns);//暂停信息</span><br><span class=\"line\">        while(ns--) &#123;</span><br><span class=\"line\">            scanf(&quot;%d&quot;,&amp;id);</span><br><span class=\"line\">            stop[id]=true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        double once = 1.0/6;</span><br><span class=\"line\">        int i,j,k;</span><br><span class=\"line\">        for(i=1;i&lt;N;i++) &#123;</span><br><span class=\"line\">            for(j=0;j&lt;n;j++) &#123;</span><br><span class=\"line\">                if(dp[j][i-1]==0)</span><br><span class=\"line\">                continue;</span><br><span class=\"line\"></span><br><span class=\"line\">                for(k=1;k&lt;=6;k++) &#123;</span><br><span class=\"line\">                    double top = once*dp[j][i-1];</span><br><span class=\"line\">                    int curto = k+j;</span><br><span class=\"line\">                    if(curto&gt;n) &#123;</span><br><span class=\"line\">                        curto = 2*n-curto;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(stop[curto])//暂停</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dp[curto][i+1]+=top;</span><br><span class=\"line\">                        continue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    curto+=graph[curto];</span><br><span class=\"line\">                    if(curto&gt;n)</span><br><span class=\"line\">                        curto = 2*n-curto;</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(curto&lt;0)curto=-curto;</span><br><span class=\"line\">                        dp[curto][i]+=top;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        double ans = 0;</span><br><span class=\"line\">        for(i=0;i&lt;N;i++) &#123;</span><br><span class=\"line\">            ans+=dp[n][i]*i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(ans&gt;0)</span><br><span class=\"line\">            printf(&quot;%.2lf\\n&quot;,ans);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            printf(&quot;Impossible\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 1761 Easy Task","keywords":["algorithm","POJ"],"description":"POJ 1761 Easy Task 解题报告","comments":1,"_content":"[POJ 1761 Easy Task](http://poj.org/problem?id=1761)\n\n## 题意\n\n给你n条提交问题的信息，每条信息包含提交时间，提交队伍，提交题目编号，是否AC信息，统计这n条信息，要求输出每个问题的信息，包括题号，提交次数，平均提交次数，平均提交时间\n \nPS:\n\n1.某一队伍一旦AC了某一道题后，过后再提交该题的信息不计入统计\n\n2.只对已经AC的队伍进行统计，即提交次数 = SUM(已AC的队伍的总共提交次数)，不对未AC的队伍进行统计\n\n## 分析：\n  1. 用map<string,int>存储队伍信息，编号\n  2. 用accept[i][j]表示第j支队伍是否AC问题i\n  3. 用actime[i][j]表示第j支队伍共提交问题i的次数\n  4. 用node保存一个问题的信息，包括解决该问题的队伍数，总时间。\n\n  在计算某个问题的总共提交次数时，抛弃为AC的队伍，\n  亦对于问题i,只有当队伍j已经AC了该题目时（accept[i][j]==true）,\n  才将其提交次数actime[i][j]统计入i题的总提交次数内\n\n## Answer\n\n```\n#include<stdio.h>\n#include<string>\n#include<iostream>\n#include<map>\nusingnamespace std;\nconstint N =9;//问题数目\nconstint M =100;//队伍数目\nstruct node\n{\n    double totalCost;//所需要消耗的总时间\nint acTeam;//解决问题的队伍数目\nint submit;//提交次数\n    \n}problem[N];//包含每个问题的基本信息\n \nbool accept[N][M];//accept[i][j]=true表示第j个队伍已解决问题i\nint actime[N][M];//actime[i][j]表示第j支队伍已提交问题i的次数\nint main()\n{\n    int n;\n    char info[100];\n    map<string,int>team;//team[队名] = 编号\n    map<string,int>::iterator iter;\n    memset(actime,0,sizeof(actime));\n    while(scanf(\"%d\",&n)!=EOF)\n    {\n        team.clear();\n        double cost;\n        string teamInfo,problemInfo,acInfo;\n        int id =0;\n        int i;\n        for(i=0;i<N;i++)\n        {\n            problem[i].acTeam=0;\n        \n            problem[i].submit=0;\n            problem[i].totalCost =0;\n        }\n\n        memset(accept,false,sizeof(accept));\n        memset(actime,0,sizeof(actime));\n        while(n--)\n        {\n           //scanf(\"%d\",&cost);\n           cin>>cost>>teamInfo>>problemInfo>>acInfo;\n          // cout<<cost<<\" \"<<teamInfo<<\" \"<<problemInfo<<\" \"<<acInfo<<endl;\n           iter = team.find(teamInfo);\n            int teamId;\n           if(iter == team.end())\n           {\n               team[teamInfo] = id;\n               teamId = id;\n               id++;\n           }\n           else\n               teamId = iter->second;\n          \n           int Qid = problemInfo[0]-'A';//问题编号\nif(accept[Qid][teamId])continue;//该队伍已解决当前问题\n           actime[Qid][teamId]++;\n           \n           if(acInfo[0]=='A')\n           {\n               problem[Qid].acTeam++;\n               problem[Qid].totalCost+=cost;\n               accept[Qid][teamId]=true;\n           }\n           \n           //cout<<teamInfo<<endl;\n           \n        }\n\n     for(i=0;i<N;i++)\n     {\n         printf(\"%c %d\",i+'A',problem[i].acTeam);\n         if(problem[i].acTeam ==0)\n         {\n             printf(\"\\n\");\n             continue;\n         }\n\n         int j =0;\n         problem[i].submit =0;\n         for(j=0;j<M;j++)\n         {\n             if(accept[i][j])\n                 problem[i].submit+=actime[i][j];\n         }\n         printf(\" %.2lf %.2lf\\n\",problem[i].submit*1.0/problem[i].acTeam,problem[i].totalCost/problem[i].acTeam);\n     }\n\n    }\n    return0;\n}\n```\n","source":"_posts/2011-01-25-algorithm-poj-1761-Easy-Task.md","raw":"---\nlayout: post\ntitle: \"POJ 1761 Easy Task\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 1761 Easy Task 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\"]\ncomments: true \n---\n[POJ 1761 Easy Task](http://poj.org/problem?id=1761)\n\n## 题意\n\n给你n条提交问题的信息，每条信息包含提交时间，提交队伍，提交题目编号，是否AC信息，统计这n条信息，要求输出每个问题的信息，包括题号，提交次数，平均提交次数，平均提交时间\n \nPS:\n\n1.某一队伍一旦AC了某一道题后，过后再提交该题的信息不计入统计\n\n2.只对已经AC的队伍进行统计，即提交次数 = SUM(已AC的队伍的总共提交次数)，不对未AC的队伍进行统计\n\n## 分析：\n  1. 用map<string,int>存储队伍信息，编号\n  2. 用accept[i][j]表示第j支队伍是否AC问题i\n  3. 用actime[i][j]表示第j支队伍共提交问题i的次数\n  4. 用node保存一个问题的信息，包括解决该问题的队伍数，总时间。\n\n  在计算某个问题的总共提交次数时，抛弃为AC的队伍，\n  亦对于问题i,只有当队伍j已经AC了该题目时（accept[i][j]==true）,\n  才将其提交次数actime[i][j]统计入i题的总提交次数内\n\n## Answer\n\n```\n#include<stdio.h>\n#include<string>\n#include<iostream>\n#include<map>\nusingnamespace std;\nconstint N =9;//问题数目\nconstint M =100;//队伍数目\nstruct node\n{\n    double totalCost;//所需要消耗的总时间\nint acTeam;//解决问题的队伍数目\nint submit;//提交次数\n    \n}problem[N];//包含每个问题的基本信息\n \nbool accept[N][M];//accept[i][j]=true表示第j个队伍已解决问题i\nint actime[N][M];//actime[i][j]表示第j支队伍已提交问题i的次数\nint main()\n{\n    int n;\n    char info[100];\n    map<string,int>team;//team[队名] = 编号\n    map<string,int>::iterator iter;\n    memset(actime,0,sizeof(actime));\n    while(scanf(\"%d\",&n)!=EOF)\n    {\n        team.clear();\n        double cost;\n        string teamInfo,problemInfo,acInfo;\n        int id =0;\n        int i;\n        for(i=0;i<N;i++)\n        {\n            problem[i].acTeam=0;\n        \n            problem[i].submit=0;\n            problem[i].totalCost =0;\n        }\n\n        memset(accept,false,sizeof(accept));\n        memset(actime,0,sizeof(actime));\n        while(n--)\n        {\n           //scanf(\"%d\",&cost);\n           cin>>cost>>teamInfo>>problemInfo>>acInfo;\n          // cout<<cost<<\" \"<<teamInfo<<\" \"<<problemInfo<<\" \"<<acInfo<<endl;\n           iter = team.find(teamInfo);\n            int teamId;\n           if(iter == team.end())\n           {\n               team[teamInfo] = id;\n               teamId = id;\n               id++;\n           }\n           else\n               teamId = iter->second;\n          \n           int Qid = problemInfo[0]-'A';//问题编号\nif(accept[Qid][teamId])continue;//该队伍已解决当前问题\n           actime[Qid][teamId]++;\n           \n           if(acInfo[0]=='A')\n           {\n               problem[Qid].acTeam++;\n               problem[Qid].totalCost+=cost;\n               accept[Qid][teamId]=true;\n           }\n           \n           //cout<<teamInfo<<endl;\n           \n        }\n\n     for(i=0;i<N;i++)\n     {\n         printf(\"%c %d\",i+'A',problem[i].acTeam);\n         if(problem[i].acTeam ==0)\n         {\n             printf(\"\\n\");\n             continue;\n         }\n\n         int j =0;\n         problem[i].submit =0;\n         for(j=0;j<M;j++)\n         {\n             if(accept[i][j])\n                 problem[i].submit+=actime[i][j];\n         }\n         printf(\" %.2lf %.2lf\\n\",problem[i].submit*1.0/problem[i].acTeam,problem[i].totalCost/problem[i].acTeam);\n     }\n\n    }\n    return0;\n}\n```\n","slug":"2011-01-25-algorithm-poj-1761-Easy-Task","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhg3000eqj7lca5270c7","content":"<p><a href=\"http://poj.org/problem?id=1761\" target=\"_blank\" rel=\"external\">POJ 1761 Easy Task</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给你n条提交问题的信息，每条信息包含提交时间，提交队伍，提交题目编号，是否AC信息，统计这n条信息，要求输出每个问题的信息，包括题号，提交次数，平均提交次数，平均提交时间</p>\n<p>PS:</p>\n<p>1.某一队伍一旦AC了某一道题后，过后再提交该题的信息不计入统计</p>\n<p>2.只对已经AC的队伍进行统计，即提交次数 = SUM(已AC的队伍的总共提交次数)，不对未AC的队伍进行统计</p>\n<h2 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h2><ol>\n<li>用map<string,int>存储队伍信息，编号</string,int></li>\n<li>用accept[i][j]表示第j支队伍是否AC问题i</li>\n<li>用actime[i][j]表示第j支队伍共提交问题i的次数</li>\n<li><p>用node保存一个问题的信息，包括解决该问题的队伍数，总时间。</p>\n<p>在计算某个问题的总共提交次数时，抛弃为AC的队伍，<br>亦对于问题i,只有当队伍j已经AC了该题目时（accept[i][j]==true）,<br>才将其提交次数actime[i][j]统计入i题的总提交次数内</p>\n</li>\n</ol>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;map&gt;</span><br><span class=\"line\">usingnamespace std;</span><br><span class=\"line\">constint N =9;//问题数目</span><br><span class=\"line\">constint M =100;//队伍数目</span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double totalCost;//所需要消耗的总时间</span><br><span class=\"line\">int acTeam;//解决问题的队伍数目</span><br><span class=\"line\">int submit;//提交次数</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;problem[N];//包含每个问题的基本信息</span><br><span class=\"line\"> </span><br><span class=\"line\">bool accept[N][M];//accept[i][j]=true表示第j个队伍已解决问题i</span><br><span class=\"line\">int actime[N][M];//actime[i][j]表示第j支队伍已提交问题i的次数</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    char info[100];</span><br><span class=\"line\">    map&lt;string,int&gt;team;//team[队名] = 编号</span><br><span class=\"line\">    map&lt;string,int&gt;::iterator iter;</span><br><span class=\"line\">    memset(actime,0,sizeof(actime));</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;n)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        team.clear();</span><br><span class=\"line\">        double cost;</span><br><span class=\"line\">        string teamInfo,problemInfo,acInfo;</span><br><span class=\"line\">        int id =0;</span><br><span class=\"line\">        int i;</span><br><span class=\"line\">        for(i=0;i&lt;N;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            problem[i].acTeam=0;</span><br><span class=\"line\">        </span><br><span class=\"line\">            problem[i].submit=0;</span><br><span class=\"line\">            problem[i].totalCost =0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(accept,false,sizeof(accept));</span><br><span class=\"line\">        memset(actime,0,sizeof(actime));</span><br><span class=\"line\">        while(n--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           //scanf(&quot;%d&quot;,&amp;cost);</span><br><span class=\"line\">           cin&gt;&gt;cost&gt;&gt;teamInfo&gt;&gt;problemInfo&gt;&gt;acInfo;</span><br><span class=\"line\">          // cout&lt;&lt;cost&lt;&lt;&quot; &quot;&lt;&lt;teamInfo&lt;&lt;&quot; &quot;&lt;&lt;problemInfo&lt;&lt;&quot; &quot;&lt;&lt;acInfo&lt;&lt;endl;</span><br><span class=\"line\">           iter = team.find(teamInfo);</span><br><span class=\"line\">            int teamId;</span><br><span class=\"line\">           if(iter == team.end())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               team[teamInfo] = id;</span><br><span class=\"line\">               teamId = id;</span><br><span class=\"line\">               id++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           else</span><br><span class=\"line\">               teamId = iter-&gt;second;</span><br><span class=\"line\">          </span><br><span class=\"line\">           int Qid = problemInfo[0]-&apos;A&apos;;//问题编号</span><br><span class=\"line\">if(accept[Qid][teamId])continue;//该队伍已解决当前问题</span><br><span class=\"line\">           actime[Qid][teamId]++;</span><br><span class=\"line\">           </span><br><span class=\"line\">           if(acInfo[0]==&apos;A&apos;)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               problem[Qid].acTeam++;</span><br><span class=\"line\">               problem[Qid].totalCost+=cost;</span><br><span class=\"line\">               accept[Qid][teamId]=true;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           //cout&lt;&lt;teamInfo&lt;&lt;endl;</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     for(i=0;i&lt;N;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         printf(&quot;%c %d&quot;,i+&apos;A&apos;,problem[i].acTeam);</span><br><span class=\"line\">         if(problem[i].acTeam ==0)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             printf(&quot;\\n&quot;);</span><br><span class=\"line\">             continue;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         int j =0;</span><br><span class=\"line\">         problem[i].submit =0;</span><br><span class=\"line\">         for(j=0;j&lt;M;j++)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             if(accept[i][j])</span><br><span class=\"line\">                 problem[i].submit+=actime[i][j];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         printf(&quot; %.2lf %.2lf\\n&quot;,problem[i].submit*1.0/problem[i].acTeam,problem[i].totalCost/problem[i].acTeam);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=1761\">POJ 1761 Easy Task</a></p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给你n条提交问题的信息，每条信息包含提交时间，提交队伍，提交题目编号，是否AC信息，统计这n条信息，要求输出每个问题的信息，包括题号，提交次数，平均提交次数，平均提交时间</p>\n<p>PS:</p>\n<p>1.某一队伍一旦AC了某一道题后，过后再提交该题的信息不计入统计</p>\n<p>2.只对已经AC的队伍进行统计，即提交次数 = SUM(已AC的队伍的总共提交次数)，不对未AC的队伍进行统计</p>\n<h2 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h2><ol>\n<li>用map<string,int>存储队伍信息，编号</li>\n<li>用accept[i][j]表示第j支队伍是否AC问题i</li>\n<li>用actime[i][j]表示第j支队伍共提交问题i的次数</li>\n<li><p>用node保存一个问题的信息，包括解决该问题的队伍数，总时间。</p>\n<p>在计算某个问题的总共提交次数时，抛弃为AC的队伍，<br>亦对于问题i,只有当队伍j已经AC了该题目时（accept[i][j]==true）,<br>才将其提交次数actime[i][j]统计入i题的总提交次数内</p>\n</li>\n</ol>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;map&gt;</span><br><span class=\"line\">usingnamespace std;</span><br><span class=\"line\">constint N =9;//问题数目</span><br><span class=\"line\">constint M =100;//队伍数目</span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double totalCost;//所需要消耗的总时间</span><br><span class=\"line\">int acTeam;//解决问题的队伍数目</span><br><span class=\"line\">int submit;//提交次数</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;problem[N];//包含每个问题的基本信息</span><br><span class=\"line\"> </span><br><span class=\"line\">bool accept[N][M];//accept[i][j]=true表示第j个队伍已解决问题i</span><br><span class=\"line\">int actime[N][M];//actime[i][j]表示第j支队伍已提交问题i的次数</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    char info[100];</span><br><span class=\"line\">    map&lt;string,int&gt;team;//team[队名] = 编号</span><br><span class=\"line\">    map&lt;string,int&gt;::iterator iter;</span><br><span class=\"line\">    memset(actime,0,sizeof(actime));</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;n)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        team.clear();</span><br><span class=\"line\">        double cost;</span><br><span class=\"line\">        string teamInfo,problemInfo,acInfo;</span><br><span class=\"line\">        int id =0;</span><br><span class=\"line\">        int i;</span><br><span class=\"line\">        for(i=0;i&lt;N;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            problem[i].acTeam=0;</span><br><span class=\"line\">        </span><br><span class=\"line\">            problem[i].submit=0;</span><br><span class=\"line\">            problem[i].totalCost =0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(accept,false,sizeof(accept));</span><br><span class=\"line\">        memset(actime,0,sizeof(actime));</span><br><span class=\"line\">        while(n--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           //scanf(&quot;%d&quot;,&amp;cost);</span><br><span class=\"line\">           cin&gt;&gt;cost&gt;&gt;teamInfo&gt;&gt;problemInfo&gt;&gt;acInfo;</span><br><span class=\"line\">          // cout&lt;&lt;cost&lt;&lt;&quot; &quot;&lt;&lt;teamInfo&lt;&lt;&quot; &quot;&lt;&lt;problemInfo&lt;&lt;&quot; &quot;&lt;&lt;acInfo&lt;&lt;endl;</span><br><span class=\"line\">           iter = team.find(teamInfo);</span><br><span class=\"line\">            int teamId;</span><br><span class=\"line\">           if(iter == team.end())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               team[teamInfo] = id;</span><br><span class=\"line\">               teamId = id;</span><br><span class=\"line\">               id++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           else</span><br><span class=\"line\">               teamId = iter-&gt;second;</span><br><span class=\"line\">          </span><br><span class=\"line\">           int Qid = problemInfo[0]-&apos;A&apos;;//问题编号</span><br><span class=\"line\">if(accept[Qid][teamId])continue;//该队伍已解决当前问题</span><br><span class=\"line\">           actime[Qid][teamId]++;</span><br><span class=\"line\">           </span><br><span class=\"line\">           if(acInfo[0]==&apos;A&apos;)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               problem[Qid].acTeam++;</span><br><span class=\"line\">               problem[Qid].totalCost+=cost;</span><br><span class=\"line\">               accept[Qid][teamId]=true;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">           //cout&lt;&lt;teamInfo&lt;&lt;endl;</span><br><span class=\"line\">           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     for(i=0;i&lt;N;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         printf(&quot;%c %d&quot;,i+&apos;A&apos;,problem[i].acTeam);</span><br><span class=\"line\">         if(problem[i].acTeam ==0)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             printf(&quot;\\n&quot;);</span><br><span class=\"line\">             continue;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         int j =0;</span><br><span class=\"line\">         problem[i].submit =0;</span><br><span class=\"line\">         for(j=0;j&lt;M;j++)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             if(accept[i][j])</span><br><span class=\"line\">                 problem[i].submit+=actime[i][j];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         printf(&quot; %.2lf %.2lf\\n&quot;,problem[i].submit*1.0/problem[i].acTeam,problem[i].totalCost/problem[i].acTeam);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 3254 Corn Fields【dp 状态压缩】","keywords":["algorithm","POJ"],"description":"POJ 3254 Corn Fields【dp 状态压缩】解题报告","comments":1,"_content":"\n[POJ 3254  Corn Fields](http://poj.org/problem?id=3254)\n\n# 算法核心\n\n状态压缩,DP\n\n# 题意\n\n输入m行n列的数字，其中为1或者是0\n\n1表示土壤肥沃可以种植草地，0则不可以。\n\n在种草地的区域可以放牛，但相邻的两\n块区域不允许同时放牛，问有多少种放牛的方法？\n（不放牛也算一种情况）\n\n# 分析\n 由m,n<=12,可用状态压缩\n \n 对于第i行，可以放草的格子置为0，不可以种草的格子设置为1，整一行的状态存入graph[i]中\n \n 对于每一行，放牛的格为1，不放牛的格为0，整行用一个二进制数表示\n dp[i][j]表示第i行放牛状态为j时有多少种方法，易知：\n \n 1. 首先j必须合法，即左右相邻两位不同时出现1，\n 2. 不能在不能种草的地方放牛，即j&graph[i]==0\n 3. dp[i][j] = SUM(dp[i-1][k]),其中k&j==0,即上下相邻位置不放牛\n\n由此，可以求出所有的dp[i][j]，那么放牛的种类共有 = SUM(dp[n-1][j])最后一行所有状态的放牛种类之和\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint N =1<<14;\nbool legal[N];//legal表示单行出现该状态时是否合法\nint leg[N];//统计单行合法数据\nint legNum;//合法状态的个数\nlong dp[13][N];//dp[i][j]表示第i行放牛状态为j时有多少种方法\nlong graph[13];//记录每行状态，不能种草的为1，能种的为0\n\nvoid getLeg()//获取合法单行的状态\n{\n int i;\n    legNum =0;\n memset(legal,true,sizeof(legal));\n leg[legNum++]=0;\n for(i=1;i<N;i++)\n {\n       int temp = i;\n    while(temp)\n    {\n     int curt = temp;\n     temp>>=1;\n     if(legal[temp]==false)\n     {\n      legal[i]=false;break;\n     }\n\n           if((temp&1)&&((curt&1)))\n     {\n      legal[i]=false;\n      break;\n     }\n    }\n    if(legal[i])\n     leg[legNum++] = i;\n }\n}\n\nint getId(int m)//二分获取每行为m格时合法状态的上限\n{\n int left =0;\n int ans =0;\n int right = legNum;\n while(left<=right)\n {\n  int mid = (left+right)>>1;\n  if(leg[mid]>m)\n  {\n               ans = mid;\n      right = mid-1;\n  }\n  else\n   left=mid+1;\n }\n return ans;\n}\n\nint main()\n{\n    getLeg();\n int n,m;\n while(scanf(\"%d%d\",&n,&m)!=EOF)\n {\n        int i,j,d;\n  for(i=0;i<n;i++)\n  {\n   graph[i]=0;\n   for(j=0;j<m;j++)\n   {\n    scanf(\"%d\",&d);  //将状态取反\n    d =1-d;  \n    graph[i]=graph[i]*2+d;\n   }\n  }\n        int upper = getId((1<<m)-1);//取得m个数的合法上限\n  memset(dp,0,sizeof(dp));\n // printf(\"%d %d\\n\",upper,leg[upper-1]);\n  //设置第一层\nfor(i=0;i<upper;i++)\n  {\n   if((leg[i]&graph[0])==0)//排除放在废弃区域\n   dp[0][leg[i]] =1;\n  }\n  \n  //设置余下空间\n\n  for(i=1;i<n;i++)\n  {\n   for(d=0;d<upper;d++)\n   { \n    int pre = leg[d];   \n    if(dp[i-1][pre]>0)//剪枝\nfor(j=0;j<upper;j++)\n    { \n     int cur = leg[j];\n     if((cur&graph[i])==0)//没有在废弃区种草\n     {\n     \n      if((pre&cur)==0)//上下没有相邻\n      {\n       dp[i][cur]+=dp[i-1][pre];\n      }\n     }\n    }\n   }\n  }\n\n  long ans =0;\n  for(i=0;i<upper;i++)\n  {\n   ans+=dp[n-1][leg[i]];\n   ans %=100000000;\n  }\n\n  printf(\"%ld\\n\",ans);\n }\n \n return0;\n}\n```\n","source":"_posts/2011-01-27-Algorithm-POJ-3254-Corn-Fields.md","raw":"---\nlayout: post\ntitle: \"POJ 3254 Corn Fields【dp 状态压缩】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 3254 Corn Fields【dp 状态压缩】解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\"]\ncomments: true \n---\n\n[POJ 3254  Corn Fields](http://poj.org/problem?id=3254)\n\n# 算法核心\n\n状态压缩,DP\n\n# 题意\n\n输入m行n列的数字，其中为1或者是0\n\n1表示土壤肥沃可以种植草地，0则不可以。\n\n在种草地的区域可以放牛，但相邻的两\n块区域不允许同时放牛，问有多少种放牛的方法？\n（不放牛也算一种情况）\n\n# 分析\n 由m,n<=12,可用状态压缩\n \n 对于第i行，可以放草的格子置为0，不可以种草的格子设置为1，整一行的状态存入graph[i]中\n \n 对于每一行，放牛的格为1，不放牛的格为0，整行用一个二进制数表示\n dp[i][j]表示第i行放牛状态为j时有多少种方法，易知：\n \n 1. 首先j必须合法，即左右相邻两位不同时出现1，\n 2. 不能在不能种草的地方放牛，即j&graph[i]==0\n 3. dp[i][j] = SUM(dp[i-1][k]),其中k&j==0,即上下相邻位置不放牛\n\n由此，可以求出所有的dp[i][j]，那么放牛的种类共有 = SUM(dp[n-1][j])最后一行所有状态的放牛种类之和\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint N =1<<14;\nbool legal[N];//legal表示单行出现该状态时是否合法\nint leg[N];//统计单行合法数据\nint legNum;//合法状态的个数\nlong dp[13][N];//dp[i][j]表示第i行放牛状态为j时有多少种方法\nlong graph[13];//记录每行状态，不能种草的为1，能种的为0\n\nvoid getLeg()//获取合法单行的状态\n{\n int i;\n    legNum =0;\n memset(legal,true,sizeof(legal));\n leg[legNum++]=0;\n for(i=1;i<N;i++)\n {\n       int temp = i;\n    while(temp)\n    {\n     int curt = temp;\n     temp>>=1;\n     if(legal[temp]==false)\n     {\n      legal[i]=false;break;\n     }\n\n           if((temp&1)&&((curt&1)))\n     {\n      legal[i]=false;\n      break;\n     }\n    }\n    if(legal[i])\n     leg[legNum++] = i;\n }\n}\n\nint getId(int m)//二分获取每行为m格时合法状态的上限\n{\n int left =0;\n int ans =0;\n int right = legNum;\n while(left<=right)\n {\n  int mid = (left+right)>>1;\n  if(leg[mid]>m)\n  {\n               ans = mid;\n      right = mid-1;\n  }\n  else\n   left=mid+1;\n }\n return ans;\n}\n\nint main()\n{\n    getLeg();\n int n,m;\n while(scanf(\"%d%d\",&n,&m)!=EOF)\n {\n        int i,j,d;\n  for(i=0;i<n;i++)\n  {\n   graph[i]=0;\n   for(j=0;j<m;j++)\n   {\n    scanf(\"%d\",&d);  //将状态取反\n    d =1-d;  \n    graph[i]=graph[i]*2+d;\n   }\n  }\n        int upper = getId((1<<m)-1);//取得m个数的合法上限\n  memset(dp,0,sizeof(dp));\n // printf(\"%d %d\\n\",upper,leg[upper-1]);\n  //设置第一层\nfor(i=0;i<upper;i++)\n  {\n   if((leg[i]&graph[0])==0)//排除放在废弃区域\n   dp[0][leg[i]] =1;\n  }\n  \n  //设置余下空间\n\n  for(i=1;i<n;i++)\n  {\n   for(d=0;d<upper;d++)\n   { \n    int pre = leg[d];   \n    if(dp[i-1][pre]>0)//剪枝\nfor(j=0;j<upper;j++)\n    { \n     int cur = leg[j];\n     if((cur&graph[i])==0)//没有在废弃区种草\n     {\n     \n      if((pre&cur)==0)//上下没有相邻\n      {\n       dp[i][cur]+=dp[i-1][pre];\n      }\n     }\n    }\n   }\n  }\n\n  long ans =0;\n  for(i=0;i<upper;i++)\n  {\n   ans+=dp[n-1][leg[i]];\n   ans %=100000000;\n  }\n\n  printf(\"%ld\\n\",ans);\n }\n \n return0;\n}\n```\n","slug":"2011-01-27-Algorithm-POJ-3254-Corn-Fields","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhg8000iqj7lzpsm13yi","content":"<p><a href=\"http://poj.org/problem?id=3254\" target=\"_blank\" rel=\"external\">POJ 3254  Corn Fields</a></p>\n<h1 id=\"算法核心\"><a href=\"#算法核心\" class=\"headerlink\" title=\"算法核心\"></a>算法核心</h1><p>状态压缩,DP</p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>输入m行n列的数字，其中为1或者是0</p>\n<p>1表示土壤肥沃可以种植草地，0则不可以。</p>\n<p>在种草地的区域可以放牛，但相邻的两<br>块区域不允许同时放牛，问有多少种放牛的方法？<br>（不放牛也算一种情况）</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p> 由m,n&lt;=12,可用状态压缩</p>\n<p> 对于第i行，可以放草的格子置为0，不可以种草的格子设置为1，整一行的状态存入graph[i]中</p>\n<p> 对于每一行，放牛的格为1，不放牛的格为0，整行用一个二进制数表示<br> dp[i][j]表示第i行放牛状态为j时有多少种方法，易知：</p>\n<ol>\n<li>首先j必须合法，即左右相邻两位不同时出现1，</li>\n<li>不能在不能种草的地方放牛，即j&amp;graph[i]==0</li>\n<li>dp[i][j] = SUM(dp[i-1][k]),其中k&amp;j==0,即上下相邻位置不放牛</li>\n</ol>\n<p>由此，可以求出所有的dp[i][j]，那么放牛的种类共有 = SUM(dp[n-1][j])最后一行所有状态的放牛种类之和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =1&lt;&lt;14;</span><br><span class=\"line\">bool legal[N];//legal表示单行出现该状态时是否合法</span><br><span class=\"line\">int leg[N];//统计单行合法数据</span><br><span class=\"line\">int legNum;//合法状态的个数</span><br><span class=\"line\">long dp[13][N];//dp[i][j]表示第i行放牛状态为j时有多少种方法</span><br><span class=\"line\">long graph[13];//记录每行状态，不能种草的为1，能种的为0</span><br><span class=\"line\"></span><br><span class=\"line\">void getLeg()//获取合法单行的状态</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int i;</span><br><span class=\"line\">    legNum =0;</span><br><span class=\"line\"> memset(legal,true,sizeof(legal));</span><br><span class=\"line\"> leg[legNum++]=0;</span><br><span class=\"line\"> for(i=1;i&lt;N;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">       int temp = i;</span><br><span class=\"line\">    while(temp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     int curt = temp;</span><br><span class=\"line\">     temp&gt;&gt;=1;</span><br><span class=\"line\">     if(legal[temp]==false)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      legal[i]=false;break;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           if((temp&amp;1)&amp;&amp;((curt&amp;1)))</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      legal[i]=false;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(legal[i])</span><br><span class=\"line\">     leg[legNum++] = i;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int getId(int m)//二分获取每行为m格时合法状态的上限</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int left =0;</span><br><span class=\"line\"> int ans =0;</span><br><span class=\"line\"> int right = legNum;</span><br><span class=\"line\"> while(left&lt;=right)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int mid = (left+right)&gt;&gt;1;</span><br><span class=\"line\">  if(leg[mid]&gt;m)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">               ans = mid;</span><br><span class=\"line\">      right = mid-1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else</span><br><span class=\"line\">   left=mid+1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    getLeg();</span><br><span class=\"line\"> int n,m;</span><br><span class=\"line\"> while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">        int i,j,d;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   graph[i]=0;</span><br><span class=\"line\">   for(j=0;j&lt;m;j++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;d);  //将状态取反</span><br><span class=\"line\">    d =1-d;  </span><br><span class=\"line\">    graph[i]=graph[i]*2+d;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">        int upper = getId((1&lt;&lt;m)-1);//取得m个数的合法上限</span><br><span class=\"line\">  memset(dp,0,sizeof(dp));</span><br><span class=\"line\"> // printf(&quot;%d %d\\n&quot;,upper,leg[upper-1]);</span><br><span class=\"line\">  //设置第一层</span><br><span class=\"line\">for(i=0;i&lt;upper;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   if((leg[i]&amp;graph[0])==0)//排除放在废弃区域</span><br><span class=\"line\">   dp[0][leg[i]] =1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  //设置余下空间</span><br><span class=\"line\"></span><br><span class=\"line\">  for(i=1;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   for(d=0;d&lt;upper;d++)</span><br><span class=\"line\">   &#123; </span><br><span class=\"line\">    int pre = leg[d];   </span><br><span class=\"line\">    if(dp[i-1][pre]&gt;0)//剪枝</span><br><span class=\"line\">for(j=0;j&lt;upper;j++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">     int cur = leg[j];</span><br><span class=\"line\">     if((cur&amp;graph[i])==0)//没有在废弃区种草</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">      if((pre&amp;cur)==0)//上下没有相邻</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       dp[i][cur]+=dp[i-1][pre];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  long ans =0;</span><br><span class=\"line\">  for(i=0;i&lt;upper;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   ans+=dp[n-1][leg[i]];</span><br><span class=\"line\">   ans %=100000000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  printf(&quot;%ld\\n&quot;,ans);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=3254\">POJ 3254  Corn Fields</a></p>\n<h1 id=\"算法核心\"><a href=\"#算法核心\" class=\"headerlink\" title=\"算法核心\"></a>算法核心</h1><p>状态压缩,DP</p>\n<h1 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h1><p>输入m行n列的数字，其中为1或者是0</p>\n<p>1表示土壤肥沃可以种植草地，0则不可以。</p>\n<p>在种草地的区域可以放牛，但相邻的两<br>块区域不允许同时放牛，问有多少种放牛的方法？<br>（不放牛也算一种情况）</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p> 由m,n&lt;=12,可用状态压缩</p>\n<p> 对于第i行，可以放草的格子置为0，不可以种草的格子设置为1，整一行的状态存入graph[i]中</p>\n<p> 对于每一行，放牛的格为1，不放牛的格为0，整行用一个二进制数表示<br> dp[i][j]表示第i行放牛状态为j时有多少种方法，易知：</p>\n<ol>\n<li>首先j必须合法，即左右相邻两位不同时出现1，</li>\n<li>不能在不能种草的地方放牛，即j&amp;graph[i]==0</li>\n<li>dp[i][j] = SUM(dp[i-1][k]),其中k&amp;j==0,即上下相邻位置不放牛</li>\n</ol>\n<p>由此，可以求出所有的dp[i][j]，那么放牛的种类共有 = SUM(dp[n-1][j])最后一行所有状态的放牛种类之和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =1&lt;&lt;14;</span><br><span class=\"line\">bool legal[N];//legal表示单行出现该状态时是否合法</span><br><span class=\"line\">int leg[N];//统计单行合法数据</span><br><span class=\"line\">int legNum;//合法状态的个数</span><br><span class=\"line\">long dp[13][N];//dp[i][j]表示第i行放牛状态为j时有多少种方法</span><br><span class=\"line\">long graph[13];//记录每行状态，不能种草的为1，能种的为0</span><br><span class=\"line\"></span><br><span class=\"line\">void getLeg()//获取合法单行的状态</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int i;</span><br><span class=\"line\">    legNum =0;</span><br><span class=\"line\"> memset(legal,true,sizeof(legal));</span><br><span class=\"line\"> leg[legNum++]=0;</span><br><span class=\"line\"> for(i=1;i&lt;N;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">       int temp = i;</span><br><span class=\"line\">    while(temp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     int curt = temp;</span><br><span class=\"line\">     temp&gt;&gt;=1;</span><br><span class=\"line\">     if(legal[temp]==false)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      legal[i]=false;break;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           if((temp&amp;1)&amp;&amp;((curt&amp;1)))</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      legal[i]=false;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(legal[i])</span><br><span class=\"line\">     leg[legNum++] = i;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int getId(int m)//二分获取每行为m格时合法状态的上限</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int left =0;</span><br><span class=\"line\"> int ans =0;</span><br><span class=\"line\"> int right = legNum;</span><br><span class=\"line\"> while(left&lt;=right)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int mid = (left+right)&gt;&gt;1;</span><br><span class=\"line\">  if(leg[mid]&gt;m)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">               ans = mid;</span><br><span class=\"line\">      right = mid-1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else</span><br><span class=\"line\">   left=mid+1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    getLeg();</span><br><span class=\"line\"> int n,m;</span><br><span class=\"line\"> while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">        int i,j,d;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   graph[i]=0;</span><br><span class=\"line\">   for(j=0;j&lt;m;j++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;d);  //将状态取反</span><br><span class=\"line\">    d =1-d;  </span><br><span class=\"line\">    graph[i]=graph[i]*2+d;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">        int upper = getId((1&lt;&lt;m)-1);//取得m个数的合法上限</span><br><span class=\"line\">  memset(dp,0,sizeof(dp));</span><br><span class=\"line\"> // printf(&quot;%d %d\\n&quot;,upper,leg[upper-1]);</span><br><span class=\"line\">  //设置第一层</span><br><span class=\"line\">for(i=0;i&lt;upper;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   if((leg[i]&amp;graph[0])==0)//排除放在废弃区域</span><br><span class=\"line\">   dp[0][leg[i]] =1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  //设置余下空间</span><br><span class=\"line\"></span><br><span class=\"line\">  for(i=1;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   for(d=0;d&lt;upper;d++)</span><br><span class=\"line\">   &#123; </span><br><span class=\"line\">    int pre = leg[d];   </span><br><span class=\"line\">    if(dp[i-1][pre]&gt;0)//剪枝</span><br><span class=\"line\">for(j=0;j&lt;upper;j++)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">     int cur = leg[j];</span><br><span class=\"line\">     if((cur&amp;graph[i])==0)//没有在废弃区种草</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">      if((pre&amp;cur)==0)//上下没有相邻</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       dp[i][cur]+=dp[i-1][pre];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  long ans =0;</span><br><span class=\"line\">  for(i=0;i&lt;upper;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   ans+=dp[n-1][leg[i]];</span><br><span class=\"line\">   ans %=100000000;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  printf(&quot;%ld\\n&quot;,ans);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 1806 Manhattan 2025","keywords":["algorithm","POJ"],"description":"POJ 1806 Manhattan 2025 解题报告","comments":1,"_content":"[POJ 1806 Manhattan 2025 ](http://poj.org/problem?id=1806)\n\n# 大意\n\n在一个三维空间里面，有一交通工具通过一单位长度需要一升汽油，现有n升汽油，画出该交通工具在各层的运输情况\n      \n将每一层简化为一个以交通工具所在位置为中心的二维网格图，在可达网格内写入到达该网格所需要的汽油数。\n\n   自底向上画出每一层所在的二维图。\n\n   当n>9时，不需要统计\n\n# Example:\n\n n = 2 时，若标记当前这一层为0层，则该情况下交通工具所能达到的层次为-2层到2层，即共5层，分别为-2,-1,0,1,2层,将每一层的二维图输出即可。\n \n题目中要求将最底层即为1，那么在该情况下，上述各层对应为第1,2,3,4,5层，其中交通工\n具所在的位置为第3层。\n\n# 分析\n 通过简单的推断可发现，各层的情况以当前交通工具所在层为中心对称，故可用递归实现~\n\n \n# Answer\n\n```\n#include<stdio.h>\n#include<math.h>\nvoid draw(int n,int row,int floor)//画出距离交通工具所在层floor层的二维图\n{\n    int i,j;\n    for(i=0;i<row;i++)\n    {\n        int needi = abs(i-n);//在垂直方向需要的步骤\nfor(j=0;j<row;j++)\n        {\n            int needj = abs(j-n);//水平方向需要的步骤\nint need = needi+needj+floor;\n            if(need<=n)printf(\"%d\",need);\n            else\n                printf(\".\");\n        }\n        printf(\"\\n\");\n    }\n}\nvoid output(int n,int row,int floor)//共有n汽油，有row行，现在第floor层\n{\n    printf(\"slice #%d:\\n\",n-floor+1);\n    if(n>9)//若汽油大于9\n    {\n        draw(n,row,floor+1);\n        return;\n    }\n    draw(n,row,floor);//画下面的第floor层\nif(floor==0)return;\n    output(n,row,floor-1);//画中间的那一部分\n    printf(\"slice #%d:\\n\",n+floor+1);\n    draw(n,row,floor);//上面的第floor层\n\n\n}\n\nint main()\n{\n    int T;\n    while(scanf(\"%d\",&T)!=EOF)\n    {\n        int cases;\n        for(cases=1;cases<=T;cases++)\n        {\n            int n;\n            scanf(\"%d\",&n);\n            printf(\"Scenario #%d:\\n\",cases);\n            output(n,2*n+1,n);\n            printf(\"\\n\");\n\n        }\n    }\n    return0;\n}\n```\n","source":"_posts/2011-01-27-algorithm-POJ-1806-Manhattan-2025.md","raw":"---\nlayout: post\ntitle: \"POJ 1806 Manhattan 2025\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 1806 Manhattan 2025 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"DP\"]\ncomments: true\n---\n[POJ 1806 Manhattan 2025 ](http://poj.org/problem?id=1806)\n\n# 大意\n\n在一个三维空间里面，有一交通工具通过一单位长度需要一升汽油，现有n升汽油，画出该交通工具在各层的运输情况\n      \n将每一层简化为一个以交通工具所在位置为中心的二维网格图，在可达网格内写入到达该网格所需要的汽油数。\n\n   自底向上画出每一层所在的二维图。\n\n   当n>9时，不需要统计\n\n# Example:\n\n n = 2 时，若标记当前这一层为0层，则该情况下交通工具所能达到的层次为-2层到2层，即共5层，分别为-2,-1,0,1,2层,将每一层的二维图输出即可。\n \n题目中要求将最底层即为1，那么在该情况下，上述各层对应为第1,2,3,4,5层，其中交通工\n具所在的位置为第3层。\n\n# 分析\n 通过简单的推断可发现，各层的情况以当前交通工具所在层为中心对称，故可用递归实现~\n\n \n# Answer\n\n```\n#include<stdio.h>\n#include<math.h>\nvoid draw(int n,int row,int floor)//画出距离交通工具所在层floor层的二维图\n{\n    int i,j;\n    for(i=0;i<row;i++)\n    {\n        int needi = abs(i-n);//在垂直方向需要的步骤\nfor(j=0;j<row;j++)\n        {\n            int needj = abs(j-n);//水平方向需要的步骤\nint need = needi+needj+floor;\n            if(need<=n)printf(\"%d\",need);\n            else\n                printf(\".\");\n        }\n        printf(\"\\n\");\n    }\n}\nvoid output(int n,int row,int floor)//共有n汽油，有row行，现在第floor层\n{\n    printf(\"slice #%d:\\n\",n-floor+1);\n    if(n>9)//若汽油大于9\n    {\n        draw(n,row,floor+1);\n        return;\n    }\n    draw(n,row,floor);//画下面的第floor层\nif(floor==0)return;\n    output(n,row,floor-1);//画中间的那一部分\n    printf(\"slice #%d:\\n\",n+floor+1);\n    draw(n,row,floor);//上面的第floor层\n\n\n}\n\nint main()\n{\n    int T;\n    while(scanf(\"%d\",&T)!=EOF)\n    {\n        int cases;\n        for(cases=1;cases<=T;cases++)\n        {\n            int n;\n            scanf(\"%d\",&n);\n            printf(\"Scenario #%d:\\n\",cases);\n            output(n,2*n+1,n);\n            printf(\"\\n\");\n\n        }\n    }\n    return0;\n}\n```\n","slug":"2011-01-27-algorithm-POJ-1806-Manhattan-2025","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhga000mqj7l7qkbn4wx","content":"<p><a href=\"http://poj.org/problem?id=1806\" target=\"_blank\" rel=\"external\">POJ 1806 Manhattan 2025 </a></p>\n<h1 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h1><p>在一个三维空间里面，有一交通工具通过一单位长度需要一升汽油，现有n升汽油，画出该交通工具在各层的运输情况</p>\n<p>将每一层简化为一个以交通工具所在位置为中心的二维网格图，在可达网格内写入到达该网格所需要的汽油数。</p>\n<p>   自底向上画出每一层所在的二维图。</p>\n<p>   当n&gt;9时，不需要统计</p>\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h1><p> n = 2 时，若标记当前这一层为0层，则该情况下交通工具所能达到的层次为-2层到2层，即共5层，分别为-2,-1,0,1,2层,将每一层的二维图输出即可。</p>\n<p>题目中要求将最底层即为1，那么在该情况下，上述各层对应为第1,2,3,4,5层，其中交通工<br>具所在的位置为第3层。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p> 通过简单的推断可发现，各层的情况以当前交通工具所在层为中心对称，故可用递归实现~</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;math.h&gt;</span><br><span class=\"line\">void draw(int n,int row,int floor)//画出距离交通工具所在层floor层的二维图</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i,j;</span><br><span class=\"line\">    for(i=0;i&lt;row;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int needi = abs(i-n);//在垂直方向需要的步骤</span><br><span class=\"line\">for(j=0;j&lt;row;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int needj = abs(j-n);//水平方向需要的步骤</span><br><span class=\"line\">int need = needi+needj+floor;</span><br><span class=\"line\">            if(need&lt;=n)printf(&quot;%d&quot;,need);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                printf(&quot;.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void output(int n,int row,int floor)//共有n汽油，有row行，现在第floor层</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    printf(&quot;slice #%d:\\n&quot;,n-floor+1);</span><br><span class=\"line\">    if(n&gt;9)//若汽油大于9</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        draw(n,row,floor+1);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    draw(n,row,floor);//画下面的第floor层</span><br><span class=\"line\">if(floor==0)return;</span><br><span class=\"line\">    output(n,row,floor-1);//画中间的那一部分</span><br><span class=\"line\">    printf(&quot;slice #%d:\\n&quot;,n+floor+1);</span><br><span class=\"line\">    draw(n,row,floor);//上面的第floor层</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int T;</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int cases;</span><br><span class=\"line\">        for(cases=1;cases&lt;=T;cases++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int n;</span><br><span class=\"line\">            scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">            printf(&quot;Scenario #%d:\\n&quot;,cases);</span><br><span class=\"line\">            output(n,2*n+1,n);</span><br><span class=\"line\">            printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=1806\">POJ 1806 Manhattan 2025 </a></p>\n<h1 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h1><p>在一个三维空间里面，有一交通工具通过一单位长度需要一升汽油，现有n升汽油，画出该交通工具在各层的运输情况</p>\n<p>将每一层简化为一个以交通工具所在位置为中心的二维网格图，在可达网格内写入到达该网格所需要的汽油数。</p>\n<p>   自底向上画出每一层所在的二维图。</p>\n<p>   当n&gt;9时，不需要统计</p>\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h1><p> n = 2 时，若标记当前这一层为0层，则该情况下交通工具所能达到的层次为-2层到2层，即共5层，分别为-2,-1,0,1,2层,将每一层的二维图输出即可。</p>\n<p>题目中要求将最底层即为1，那么在该情况下，上述各层对应为第1,2,3,4,5层，其中交通工<br>具所在的位置为第3层。</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p> 通过简单的推断可发现，各层的情况以当前交通工具所在层为中心对称，故可用递归实现~</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;math.h&gt;</span><br><span class=\"line\">void draw(int n,int row,int floor)//画出距离交通工具所在层floor层的二维图</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i,j;</span><br><span class=\"line\">    for(i=0;i&lt;row;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int needi = abs(i-n);//在垂直方向需要的步骤</span><br><span class=\"line\">for(j=0;j&lt;row;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int needj = abs(j-n);//水平方向需要的步骤</span><br><span class=\"line\">int need = needi+needj+floor;</span><br><span class=\"line\">            if(need&lt;=n)printf(&quot;%d&quot;,need);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                printf(&quot;.&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void output(int n,int row,int floor)//共有n汽油，有row行，现在第floor层</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    printf(&quot;slice #%d:\\n&quot;,n-floor+1);</span><br><span class=\"line\">    if(n&gt;9)//若汽油大于9</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        draw(n,row,floor+1);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    draw(n,row,floor);//画下面的第floor层</span><br><span class=\"line\">if(floor==0)return;</span><br><span class=\"line\">    output(n,row,floor-1);//画中间的那一部分</span><br><span class=\"line\">    printf(&quot;slice #%d:\\n&quot;,n+floor+1);</span><br><span class=\"line\">    draw(n,row,floor);//上面的第floor层</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int T;</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int cases;</span><br><span class=\"line\">        for(cases=1;cases&lt;=T;cases++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int n;</span><br><span class=\"line\">            scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">            printf(&quot;Scenario #%d:\\n&quot;,cases);</span><br><span class=\"line\">            output(n,2*n+1,n);</span><br><span class=\"line\">            printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 3735 Training little cats【矩阵的快速求幂】","keywords":["algorithm","POJ"],"description":"POJ 3735 Training little cats 解题报告","comments":1,"_content":"\n[POJ 3735 Training little cats](http://poj.org/problem?id=3735)\n\n# 算法核心：\n\n矩阵建模，矩阵的快速幂\n\n\n# 大意：\n\n已知有n只猫咪，开始时每只猫咪有花生米0颗，先有一组操作：\n由下面三个中的k个操作组成：\n\n*  g i 给i只猫咪一颗花生米\n*  e i 让第i只猫咪吃掉它拥有的所有花生米\n* s i j 将猫咪i与猫咪j的拥有的花生米交换\n\n  现将上述操作做m次后，问每只猫咪有多少颗花生米？\n\n \n\n# 分析\n\n因m的数据范围较大，用矩阵连乘。\n\n构建矩阵模型，peanut[N] = {0,0，。。。。0,1}：即前n个数为0,最后一个数取1\nmatrix[N][N],初始化条件下为单位矩阵，。。。\n\n对猫咪进行操作转化为在对矩阵peanut进行操作，一组操作过程转化为矩阵matrix,那么m次操作，即对peanut*(matrix^m)\n\n```\nEXP:\ninput:\n316\ng 1\ng 2\ng 2\ns 12\ng 3\ne 2\n```\n\n初始化下矩阵:peanut  \n0001 即每只猫咪的花生米个数为0\n\n初始化下matrix为单位矩阵\n\n```\n1000\n0100\n0010\n0001\n```\n经过操作 \n```\ng 1\n```\n\n给1号1颗花生米，即在第一列的最后一行加1\n\n```\n1000\n0100\n0010\n1001\n\ng 2\n1000\n0100\n0010\n1101\n\ng 2\n1000\n0100\n0010\n1201\n\ns 12\n//即交换第1,2列\n0100\n1000\n0010\n2101\n\ng 3\n0100\n1000\n0010\n2111\n\ne 2\n//将第2列全部置为0\n0000\n1000\n0010\n2011\n\n\n```\n\n\n最后peanut = peanut＊matrix＊matrix.....＊matrix = peanut＊(matrix^m)故可用矩阵快速求幂\npeanut的前n个数即为每只猫咪拥有的花生米数\n\n＃Answer\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint N =100+5;\nstruct Matrix\n{\n __int64 matrix[N][N];\n __int64 row,coloumn;\n Matrix(){\n memset(matrix,0,sizeof(matrix));\n }\n};\n\nMatrix getE(__int64 n)//获取n*n的单位矩阵\n{\n Matrix matrix;\n matrix.coloumn=n;\n matrix.row = n;\n int i;\n for(i=0;i<n;i++)\n {\n  matrix.matrix[i][i]=1;\n }\n return matrix;\n}\n\nMatrix initP(__int64 n)//初始化花生米矩阵\n{\n Matrix matrix;\n matrix.coloumn = n;\n matrix.row =1;\n matrix.matrix[0][n-1]=1;\n return matrix;\n}\n\nMatrix mutiply(Matrix a,Matrix b)//返回a*b\n{\n __int64 i,j,k;\n Matrix ans;\n ans.row = a.row;\n ans.coloumn = b.coloumn;\n for(i=0;i<a.row;i++)\n   for(k=0;k<a.coloumn;k++)\n    if(a.matrix[i][k])//优化\nfor(j=0;j<b.coloumn;j++)\n      {\n  \n         ans.matrix[i][j]=ans.matrix[i][j]+a.matrix[i][k]*b.matrix[k][j];\n      }\n\n      return ans;\n}\n\nint main() \n{\n __int64 n,m,k;\n while(scanf(\"%I64d%I64d%I64d\",&n,&m,&k)!=EOF)\n {\n  Matrix matrix;//操作矩阵\n        Matrix peanut;//花生米\nif(n==0&&m==0&&k==0)break;\n       matrix = getE(n+1);\n    peanut = initP(n+1);\n    \n    __int64 i;\n       char op[5];\n    __int64 x,y;\n    while(k--)\n    {\n  \n   scanf(\"%s\",op);\n   if(op[0]=='g')\n   {\n             scanf(\"%I64d\",&x);//给x一颗花生米\n    matrix.matrix[n][x-1]++;\n   }\n   else\n    if(op[0]=='e')\n    {\n                scanf(\"%I64d\",&x);//x吃掉所有的花生米\nfor(i=0;i<=n;i++)\n     matrix.matrix[i][x-1]=0;\n    }\n    else\n    {\n     scanf(\"%I64d%I64d\",&x,&y);//交换x与y的花生米\nfor(i=0;i<=n;i++)\n     {\n      __int64 tt = matrix.matrix[i][x-1];\n      matrix.matrix[i][x-1]=matrix.matrix[i][y-1];\n      matrix.matrix[i][y-1] = tt;\n     }\n    }\n   \n    }\n      \n   \n   \n    while(m)          \n    {\n     if(m&1)\n     {\n     peanut = mutiply(peanut,matrix);\n     }    \n    m>>=1;\n    matrix = mutiply(matrix,matrix);\n    }\n\n    printf(\"%I64d\",peanut.matrix[0][0]);\n    for(i=1;i<n;i++)\n     printf(\" %I64d\",peanut.matrix[0][i]);\n    printf(\"\\n\");\n\n }\n\n return0;\n}\n```\n","source":"_posts/2011-01-27-algorithm-POJ-3735-Training-little-cats.md","raw":"---\nlayout: post\ntitle: \"POJ 3735 Training little cats【矩阵的快速求幂】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 3735 Training little cats 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\"]\ncomments: true\n---\n\n[POJ 3735 Training little cats](http://poj.org/problem?id=3735)\n\n# 算法核心：\n\n矩阵建模，矩阵的快速幂\n\n\n# 大意：\n\n已知有n只猫咪，开始时每只猫咪有花生米0颗，先有一组操作：\n由下面三个中的k个操作组成：\n\n*  g i 给i只猫咪一颗花生米\n*  e i 让第i只猫咪吃掉它拥有的所有花生米\n* s i j 将猫咪i与猫咪j的拥有的花生米交换\n\n  现将上述操作做m次后，问每只猫咪有多少颗花生米？\n\n \n\n# 分析\n\n因m的数据范围较大，用矩阵连乘。\n\n构建矩阵模型，peanut[N] = {0,0，。。。。0,1}：即前n个数为0,最后一个数取1\nmatrix[N][N],初始化条件下为单位矩阵，。。。\n\n对猫咪进行操作转化为在对矩阵peanut进行操作，一组操作过程转化为矩阵matrix,那么m次操作，即对peanut*(matrix^m)\n\n```\nEXP:\ninput:\n316\ng 1\ng 2\ng 2\ns 12\ng 3\ne 2\n```\n\n初始化下矩阵:peanut  \n0001 即每只猫咪的花生米个数为0\n\n初始化下matrix为单位矩阵\n\n```\n1000\n0100\n0010\n0001\n```\n经过操作 \n```\ng 1\n```\n\n给1号1颗花生米，即在第一列的最后一行加1\n\n```\n1000\n0100\n0010\n1001\n\ng 2\n1000\n0100\n0010\n1101\n\ng 2\n1000\n0100\n0010\n1201\n\ns 12\n//即交换第1,2列\n0100\n1000\n0010\n2101\n\ng 3\n0100\n1000\n0010\n2111\n\ne 2\n//将第2列全部置为0\n0000\n1000\n0010\n2011\n\n\n```\n\n\n最后peanut = peanut＊matrix＊matrix.....＊matrix = peanut＊(matrix^m)故可用矩阵快速求幂\npeanut的前n个数即为每只猫咪拥有的花生米数\n\n＃Answer\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint N =100+5;\nstruct Matrix\n{\n __int64 matrix[N][N];\n __int64 row,coloumn;\n Matrix(){\n memset(matrix,0,sizeof(matrix));\n }\n};\n\nMatrix getE(__int64 n)//获取n*n的单位矩阵\n{\n Matrix matrix;\n matrix.coloumn=n;\n matrix.row = n;\n int i;\n for(i=0;i<n;i++)\n {\n  matrix.matrix[i][i]=1;\n }\n return matrix;\n}\n\nMatrix initP(__int64 n)//初始化花生米矩阵\n{\n Matrix matrix;\n matrix.coloumn = n;\n matrix.row =1;\n matrix.matrix[0][n-1]=1;\n return matrix;\n}\n\nMatrix mutiply(Matrix a,Matrix b)//返回a*b\n{\n __int64 i,j,k;\n Matrix ans;\n ans.row = a.row;\n ans.coloumn = b.coloumn;\n for(i=0;i<a.row;i++)\n   for(k=0;k<a.coloumn;k++)\n    if(a.matrix[i][k])//优化\nfor(j=0;j<b.coloumn;j++)\n      {\n  \n         ans.matrix[i][j]=ans.matrix[i][j]+a.matrix[i][k]*b.matrix[k][j];\n      }\n\n      return ans;\n}\n\nint main() \n{\n __int64 n,m,k;\n while(scanf(\"%I64d%I64d%I64d\",&n,&m,&k)!=EOF)\n {\n  Matrix matrix;//操作矩阵\n        Matrix peanut;//花生米\nif(n==0&&m==0&&k==0)break;\n       matrix = getE(n+1);\n    peanut = initP(n+1);\n    \n    __int64 i;\n       char op[5];\n    __int64 x,y;\n    while(k--)\n    {\n  \n   scanf(\"%s\",op);\n   if(op[0]=='g')\n   {\n             scanf(\"%I64d\",&x);//给x一颗花生米\n    matrix.matrix[n][x-1]++;\n   }\n   else\n    if(op[0]=='e')\n    {\n                scanf(\"%I64d\",&x);//x吃掉所有的花生米\nfor(i=0;i<=n;i++)\n     matrix.matrix[i][x-1]=0;\n    }\n    else\n    {\n     scanf(\"%I64d%I64d\",&x,&y);//交换x与y的花生米\nfor(i=0;i<=n;i++)\n     {\n      __int64 tt = matrix.matrix[i][x-1];\n      matrix.matrix[i][x-1]=matrix.matrix[i][y-1];\n      matrix.matrix[i][y-1] = tt;\n     }\n    }\n   \n    }\n      \n   \n   \n    while(m)          \n    {\n     if(m&1)\n     {\n     peanut = mutiply(peanut,matrix);\n     }    \n    m>>=1;\n    matrix = mutiply(matrix,matrix);\n    }\n\n    printf(\"%I64d\",peanut.matrix[0][0]);\n    for(i=1;i<n;i++)\n     printf(\" %I64d\",peanut.matrix[0][i]);\n    printf(\"\\n\");\n\n }\n\n return0;\n}\n```\n","slug":"2011-01-27-algorithm-POJ-3735-Training-little-cats","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgc000pqj7laxu511lg","content":"<p><a href=\"http://poj.org/problem?id=3735\" target=\"_blank\" rel=\"external\">POJ 3735 Training little cats</a></p>\n<h1 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h1><p>矩阵建模，矩阵的快速幂</p>\n<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>已知有n只猫咪，开始时每只猫咪有花生米0颗，先有一组操作：<br>由下面三个中的k个操作组成：</p>\n<ul>\n<li>g i 给i只猫咪一颗花生米</li>\n<li>e i 让第i只猫咪吃掉它拥有的所有花生米</li>\n<li><p>s i j 将猫咪i与猫咪j的拥有的花生米交换</p>\n<p>现将上述操作做m次后，问每只猫咪有多少颗花生米？</p>\n</li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>因m的数据范围较大，用矩阵连乘。</p>\n<p>构建矩阵模型，peanut[N] = {0,0，。。。。0,1}：即前n个数为0,最后一个数取1<br>matrix[N][N],初始化条件下为单位矩阵，。。。</p>\n<p>对猫咪进行操作转化为在对矩阵peanut进行操作，一组操作过程转化为矩阵matrix,那么m次操作，即对peanut*(matrix^m)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXP:</span><br><span class=\"line\">input:</span><br><span class=\"line\">316</span><br><span class=\"line\">g 1</span><br><span class=\"line\">g 2</span><br><span class=\"line\">g 2</span><br><span class=\"line\">s 12</span><br><span class=\"line\">g 3</span><br><span class=\"line\">e 2</span><br></pre></td></tr></table></figure>\n<p>初始化下矩阵:peanut<br>0001 即每只猫咪的花生米个数为0</p>\n<p>初始化下matrix为单位矩阵</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">0001</span><br></pre></td></tr></table></figure>\n<p>经过操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g 1</span><br></pre></td></tr></table></figure></p>\n<p>给1号1颗花生米，即在第一列的最后一行加1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">1001</span><br><span class=\"line\"></span><br><span class=\"line\">g 2</span><br><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">1101</span><br><span class=\"line\"></span><br><span class=\"line\">g 2</span><br><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">1201</span><br><span class=\"line\"></span><br><span class=\"line\">s 12</span><br><span class=\"line\">//即交换第1,2列</span><br><span class=\"line\">0100</span><br><span class=\"line\">1000</span><br><span class=\"line\">0010</span><br><span class=\"line\">2101</span><br><span class=\"line\"></span><br><span class=\"line\">g 3</span><br><span class=\"line\">0100</span><br><span class=\"line\">1000</span><br><span class=\"line\">0010</span><br><span class=\"line\">2111</span><br><span class=\"line\"></span><br><span class=\"line\">e 2</span><br><span class=\"line\">//将第2列全部置为0</span><br><span class=\"line\">0000</span><br><span class=\"line\">1000</span><br><span class=\"line\">0010</span><br><span class=\"line\">2011</span><br></pre></td></tr></table></figure>\n<p>最后peanut = peanut＊matrix＊matrix…..＊matrix = peanut＊(matrix^m)故可用矩阵快速求幂<br>peanut的前n个数即为每只猫咪拥有的花生米数</p>\n<p>＃Answer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =100+5;</span><br><span class=\"line\">struct Matrix</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 matrix[N][N];</span><br><span class=\"line\"> __int64 row,coloumn;</span><br><span class=\"line\"> Matrix()&#123;</span><br><span class=\"line\"> memset(matrix,0,sizeof(matrix));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix getE(__int64 n)//获取n*n的单位矩阵</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Matrix matrix;</span><br><span class=\"line\"> matrix.coloumn=n;</span><br><span class=\"line\"> matrix.row = n;</span><br><span class=\"line\"> int i;</span><br><span class=\"line\"> for(i=0;i&lt;n;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  matrix.matrix[i][i]=1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return matrix;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix initP(__int64 n)//初始化花生米矩阵</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Matrix matrix;</span><br><span class=\"line\"> matrix.coloumn = n;</span><br><span class=\"line\"> matrix.row =1;</span><br><span class=\"line\"> matrix.matrix[0][n-1]=1;</span><br><span class=\"line\"> return matrix;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix mutiply(Matrix a,Matrix b)//返回a*b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 i,j,k;</span><br><span class=\"line\"> Matrix ans;</span><br><span class=\"line\"> ans.row = a.row;</span><br><span class=\"line\"> ans.coloumn = b.coloumn;</span><br><span class=\"line\"> for(i=0;i&lt;a.row;i++)</span><br><span class=\"line\">   for(k=0;k&lt;a.coloumn;k++)</span><br><span class=\"line\">    if(a.matrix[i][k])//优化</span><br><span class=\"line\">for(j=0;j&lt;b.coloumn;j++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">         ans.matrix[i][j]=ans.matrix[i][j]+a.matrix[i][k]*b.matrix[k][j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 n,m,k;</span><br><span class=\"line\"> while(scanf(&quot;%I64d%I64d%I64d&quot;,&amp;n,&amp;m,&amp;k)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Matrix matrix;//操作矩阵</span><br><span class=\"line\">        Matrix peanut;//花生米</span><br><span class=\"line\">if(n==0&amp;&amp;m==0&amp;&amp;k==0)break;</span><br><span class=\"line\">       matrix = getE(n+1);</span><br><span class=\"line\">    peanut = initP(n+1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    __int64 i;</span><br><span class=\"line\">       char op[5];</span><br><span class=\"line\">    __int64 x,y;</span><br><span class=\"line\">    while(k--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">   scanf(&quot;%s&quot;,op);</span><br><span class=\"line\">   if(op[0]==&apos;g&apos;)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">             scanf(&quot;%I64d&quot;,&amp;x);//给x一颗花生米</span><br><span class=\"line\">    matrix.matrix[n][x-1]++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else</span><br><span class=\"line\">    if(op[0]==&apos;e&apos;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                scanf(&quot;%I64d&quot;,&amp;x);//x吃掉所有的花生米</span><br><span class=\"line\">for(i=0;i&lt;=n;i++)</span><br><span class=\"line\">     matrix.matrix[i][x-1]=0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     scanf(&quot;%I64d%I64d&quot;,&amp;x,&amp;y);//交换x与y的花生米</span><br><span class=\"line\">for(i=0;i&lt;=n;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      __int64 tt = matrix.matrix[i][x-1];</span><br><span class=\"line\">      matrix.matrix[i][x-1]=matrix.matrix[i][y-1];</span><br><span class=\"line\">      matrix.matrix[i][y-1] = tt;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">    while(m)          </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(m&amp;1)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">     peanut = mutiply(peanut,matrix);</span><br><span class=\"line\">     &#125;    </span><br><span class=\"line\">    m&gt;&gt;=1;</span><br><span class=\"line\">    matrix = mutiply(matrix,matrix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;%I64d&quot;,peanut.matrix[0][0]);</span><br><span class=\"line\">    for(i=1;i&lt;n;i++)</span><br><span class=\"line\">     printf(&quot; %I64d&quot;,peanut.matrix[0][i]);</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=3735\">POJ 3735 Training little cats</a></p>\n<h1 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h1><p>矩阵建模，矩阵的快速幂</p>\n<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>已知有n只猫咪，开始时每只猫咪有花生米0颗，先有一组操作：<br>由下面三个中的k个操作组成：</p>\n<ul>\n<li>g i 给i只猫咪一颗花生米</li>\n<li>e i 让第i只猫咪吃掉它拥有的所有花生米</li>\n<li><p>s i j 将猫咪i与猫咪j的拥有的花生米交换</p>\n<p>现将上述操作做m次后，问每只猫咪有多少颗花生米？</p>\n</li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>因m的数据范围较大，用矩阵连乘。</p>\n<p>构建矩阵模型，peanut[N] = {0,0，。。。。0,1}：即前n个数为0,最后一个数取1<br>matrix[N][N],初始化条件下为单位矩阵，。。。</p>\n<p>对猫咪进行操作转化为在对矩阵peanut进行操作，一组操作过程转化为矩阵matrix,那么m次操作，即对peanut*(matrix^m)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXP:</span><br><span class=\"line\">input:</span><br><span class=\"line\">316</span><br><span class=\"line\">g 1</span><br><span class=\"line\">g 2</span><br><span class=\"line\">g 2</span><br><span class=\"line\">s 12</span><br><span class=\"line\">g 3</span><br><span class=\"line\">e 2</span><br></pre></td></tr></table></figure>\n<p>初始化下矩阵:peanut<br>0001 即每只猫咪的花生米个数为0</p>\n<p>初始化下matrix为单位矩阵</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">0001</span><br></pre></td></tr></table></figure>\n<p>经过操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g 1</span><br></pre></td></tr></table></figure></p>\n<p>给1号1颗花生米，即在第一列的最后一行加1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">1001</span><br><span class=\"line\"></span><br><span class=\"line\">g 2</span><br><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">1101</span><br><span class=\"line\"></span><br><span class=\"line\">g 2</span><br><span class=\"line\">1000</span><br><span class=\"line\">0100</span><br><span class=\"line\">0010</span><br><span class=\"line\">1201</span><br><span class=\"line\"></span><br><span class=\"line\">s 12</span><br><span class=\"line\">//即交换第1,2列</span><br><span class=\"line\">0100</span><br><span class=\"line\">1000</span><br><span class=\"line\">0010</span><br><span class=\"line\">2101</span><br><span class=\"line\"></span><br><span class=\"line\">g 3</span><br><span class=\"line\">0100</span><br><span class=\"line\">1000</span><br><span class=\"line\">0010</span><br><span class=\"line\">2111</span><br><span class=\"line\"></span><br><span class=\"line\">e 2</span><br><span class=\"line\">//将第2列全部置为0</span><br><span class=\"line\">0000</span><br><span class=\"line\">1000</span><br><span class=\"line\">0010</span><br><span class=\"line\">2011</span><br></pre></td></tr></table></figure>\n<p>最后peanut = peanut＊matrix＊matrix…..＊matrix = peanut＊(matrix^m)故可用矩阵快速求幂<br>peanut的前n个数即为每只猫咪拥有的花生米数</p>\n<p>＃Answer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =100+5;</span><br><span class=\"line\">struct Matrix</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 matrix[N][N];</span><br><span class=\"line\"> __int64 row,coloumn;</span><br><span class=\"line\"> Matrix()&#123;</span><br><span class=\"line\"> memset(matrix,0,sizeof(matrix));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix getE(__int64 n)//获取n*n的单位矩阵</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Matrix matrix;</span><br><span class=\"line\"> matrix.coloumn=n;</span><br><span class=\"line\"> matrix.row = n;</span><br><span class=\"line\"> int i;</span><br><span class=\"line\"> for(i=0;i&lt;n;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  matrix.matrix[i][i]=1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return matrix;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix initP(__int64 n)//初始化花生米矩阵</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Matrix matrix;</span><br><span class=\"line\"> matrix.coloumn = n;</span><br><span class=\"line\"> matrix.row =1;</span><br><span class=\"line\"> matrix.matrix[0][n-1]=1;</span><br><span class=\"line\"> return matrix;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Matrix mutiply(Matrix a,Matrix b)//返回a*b</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 i,j,k;</span><br><span class=\"line\"> Matrix ans;</span><br><span class=\"line\"> ans.row = a.row;</span><br><span class=\"line\"> ans.coloumn = b.coloumn;</span><br><span class=\"line\"> for(i=0;i&lt;a.row;i++)</span><br><span class=\"line\">   for(k=0;k&lt;a.coloumn;k++)</span><br><span class=\"line\">    if(a.matrix[i][k])//优化</span><br><span class=\"line\">for(j=0;j&lt;b.coloumn;j++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">         ans.matrix[i][j]=ans.matrix[i][j]+a.matrix[i][k]*b.matrix[k][j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 n,m,k;</span><br><span class=\"line\"> while(scanf(&quot;%I64d%I64d%I64d&quot;,&amp;n,&amp;m,&amp;k)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Matrix matrix;//操作矩阵</span><br><span class=\"line\">        Matrix peanut;//花生米</span><br><span class=\"line\">if(n==0&amp;&amp;m==0&amp;&amp;k==0)break;</span><br><span class=\"line\">       matrix = getE(n+1);</span><br><span class=\"line\">    peanut = initP(n+1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    __int64 i;</span><br><span class=\"line\">       char op[5];</span><br><span class=\"line\">    __int64 x,y;</span><br><span class=\"line\">    while(k--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">   scanf(&quot;%s&quot;,op);</span><br><span class=\"line\">   if(op[0]==&apos;g&apos;)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">             scanf(&quot;%I64d&quot;,&amp;x);//给x一颗花生米</span><br><span class=\"line\">    matrix.matrix[n][x-1]++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else</span><br><span class=\"line\">    if(op[0]==&apos;e&apos;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                scanf(&quot;%I64d&quot;,&amp;x);//x吃掉所有的花生米</span><br><span class=\"line\">for(i=0;i&lt;=n;i++)</span><br><span class=\"line\">     matrix.matrix[i][x-1]=0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     scanf(&quot;%I64d%I64d&quot;,&amp;x,&amp;y);//交换x与y的花生米</span><br><span class=\"line\">for(i=0;i&lt;=n;i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      __int64 tt = matrix.matrix[i][x-1];</span><br><span class=\"line\">      matrix.matrix[i][x-1]=matrix.matrix[i][y-1];</span><br><span class=\"line\">      matrix.matrix[i][y-1] = tt;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">    while(m)          </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(m&amp;1)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">     peanut = mutiply(peanut,matrix);</span><br><span class=\"line\">     &#125;    </span><br><span class=\"line\">    m&gt;&gt;=1;</span><br><span class=\"line\">    matrix = mutiply(matrix,matrix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;%I64d&quot;,peanut.matrix[0][0]);</span><br><span class=\"line\">    for(i=1;i&lt;n;i++)</span><br><span class=\"line\">     printf(&quot; %I64d&quot;,peanut.matrix[0][i]);</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"HDU 1074 Doing Homework [状态压缩DP]","keywords":["algorithm","POJ"],"description":"HDU 1074 Doing Homework 解题报告","comments":1,"_content":"[HDU 1074 Doing Homework ](http://acm.hdu.edu.cn/showproblem.php?pid=1074)\n\n# 算法核心：\n\n状态压缩DP\n\n# 大意：\n\n有n门课程作业，每门作业的截止时间为D,需要花费的时间为C，若作业不能按时完成，每超期1天扣1分。\n这n门作业按课程的字典序先后输入\n问完成这n门作业至少要扣多少分，并输出扣分最少的做作业顺序\n\nPS:达到扣分最少的方案有多种，请输出字典序最小的那一组方案\n\n# 分析：\n\nn<=15，由题意知，只需对这n份作业进行全排列，选出扣分最少的即可。\n用一个二进制数存储这n份作业的完成情况，第1.。。。n个作业状况分别\n对应二进制数的第0，1.。。。。,n-1位则由题意，故数字上限为2^n\n其中 2^n-1即为n项作业全部完成，0为没有作业完成。。。\n\n用dp[i]记录完成作业状态为i时的信息（所需时间，前一个状态，最少损失的分数）。\n递推条件如下\n\n1. 状态a能做第i号作业的条件是a中作业i尚未完成，即a&i=0。\n2. 若有两个状态dp[a],dp[b]都能到达dp[i],那么选择能使到达i扣分小的那一条路径，若分数相同，转入3\n3. 这两种状态扣的分数相同，那么选择字典序小的，由于作业按字典序输入，故即dp[i].pre = min(a,b);\n\n初始化：dp[0].cost = 0;dp[0].pre=-1;dp[0].reduced = 0;\n\n最后dp[2^n-1].reduced即为最少扣分，课程安排可递归的输出\n\n# Answer\n\n```\n\n#include<stdio.h>\n#include<string.h>\nconstint N =65536;\n\nstruct node\n{ \n int cost;//所需要的时间\nint pre;//前一状态\nint reduced;//最少损失的分数\n}dp[N];//dp[i][j]表示在第i天完成作业信息为j\nbool visited[N];//表示完成j的状态是否被访问\n\nstruct course\n{\n int deadtime;//截止日期\nint cost;//所需日期\nchar name[201];\n}course[16];\n\nvoid output(int status)//递归输出课程安排表\n{\n int curjob= dp[status].pre^status;\n int curid =0;\n curjob>>=1;\n while(curjob)\n {\n  curid++;\n  curjob>>=1;\n }\n if(dp[status].pre!=0)//输出其前面的课程\n {\n  int preday = dp[status].cost-course[curid].cost;\n  output(dp[status].pre);\n }\n printf(\"%s\\n\",course[curid].name);\n}\n\n\nint main()\n{\n int T;\n while(scanf(\"%d\",&T)!=EOF)\n  while(T--)\n {\n  int n;\n  scanf(\"%d\",&n);//n门课程\nint i,j;\n  int upper =1<<(n);\n        int dayupper =0;\n  for(i=0;i<n;i++)\n  {\n   scanf(\"%s%d%d\",course[i].name,&course[i].deadtime,&course[i].cost);\n      dayupper+=course[i].cost;\n  }\n\n      memset(visited,false,sizeof(visited));\n\n   dp[0].cost=0;\n   dp[0].pre=-1;\n   dp[0].reduced =0;\n   visited[0]=true;\n\n   int work;\n   int tupper = upper-1;\n\n   for(j=0;j<tupper;j++)//遍历所有状态\n   {\n    \n     for(work=0;work<n;work++)\n     {\n      int cur =1<<work;\n      if((cur&j)==0)//该项作业尚未做过\n      {\n                   int curtemp=cur|j; \n       int day=dp[j].cost+course[work].cost;\n       dp[curtemp].cost = day;\n                   int reduce = day-course[work].deadtime;\n       if(reduce<0)reduce=0;\n       reduce+=dp[j].reduced;\n      \n       if(visited[curtemp])//该状态已有访问信息\n       {\n        if(reduce<dp[curtemp].reduced)\n        {\n         dp[curtemp].reduced=reduce;\n         dp[curtemp].pre=j;\n        }\n        //else\n        // if(reduce==dp[curtemp].reduced)//扣分相同，取字典序小的那一个，由于这\n        // {                                 //里j是按从小到达搜索的，默认已是按字典序，不需再处理\n        //  if(dp[curtemp].pre>j)\n        //   dp[curtemp].pre = j;\n        // }\n       }\n       else\n        if(visited[curtemp]==false)//该状态尚未到达过\n        {\n         visited[curtemp]=true;\n                           dp[curtemp].reduced=reduce;\n         dp[curtemp].pre=j;\n        }\n      }\n     }\n   }\n  \n   printf(\"%d\\n\",dp[tupper].reduced);  \n   output(tupper);\n   \n }\n return0;\n}\n```\n\n","source":"_posts/2011-01-28-Algorithm-HDU-1074-Doing-Homework.md","raw":"---\nlayout: post\ntitle: \"HDU 1074 Doing Homework [状态压缩DP]\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"HDU 1074 Doing Homework 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"DP\"]\ncomments: true\n---\n[HDU 1074 Doing Homework ](http://acm.hdu.edu.cn/showproblem.php?pid=1074)\n\n# 算法核心：\n\n状态压缩DP\n\n# 大意：\n\n有n门课程作业，每门作业的截止时间为D,需要花费的时间为C，若作业不能按时完成，每超期1天扣1分。\n这n门作业按课程的字典序先后输入\n问完成这n门作业至少要扣多少分，并输出扣分最少的做作业顺序\n\nPS:达到扣分最少的方案有多种，请输出字典序最小的那一组方案\n\n# 分析：\n\nn<=15，由题意知，只需对这n份作业进行全排列，选出扣分最少的即可。\n用一个二进制数存储这n份作业的完成情况，第1.。。。n个作业状况分别\n对应二进制数的第0，1.。。。。,n-1位则由题意，故数字上限为2^n\n其中 2^n-1即为n项作业全部完成，0为没有作业完成。。。\n\n用dp[i]记录完成作业状态为i时的信息（所需时间，前一个状态，最少损失的分数）。\n递推条件如下\n\n1. 状态a能做第i号作业的条件是a中作业i尚未完成，即a&i=0。\n2. 若有两个状态dp[a],dp[b]都能到达dp[i],那么选择能使到达i扣分小的那一条路径，若分数相同，转入3\n3. 这两种状态扣的分数相同，那么选择字典序小的，由于作业按字典序输入，故即dp[i].pre = min(a,b);\n\n初始化：dp[0].cost = 0;dp[0].pre=-1;dp[0].reduced = 0;\n\n最后dp[2^n-1].reduced即为最少扣分，课程安排可递归的输出\n\n# Answer\n\n```\n\n#include<stdio.h>\n#include<string.h>\nconstint N =65536;\n\nstruct node\n{ \n int cost;//所需要的时间\nint pre;//前一状态\nint reduced;//最少损失的分数\n}dp[N];//dp[i][j]表示在第i天完成作业信息为j\nbool visited[N];//表示完成j的状态是否被访问\n\nstruct course\n{\n int deadtime;//截止日期\nint cost;//所需日期\nchar name[201];\n}course[16];\n\nvoid output(int status)//递归输出课程安排表\n{\n int curjob= dp[status].pre^status;\n int curid =0;\n curjob>>=1;\n while(curjob)\n {\n  curid++;\n  curjob>>=1;\n }\n if(dp[status].pre!=0)//输出其前面的课程\n {\n  int preday = dp[status].cost-course[curid].cost;\n  output(dp[status].pre);\n }\n printf(\"%s\\n\",course[curid].name);\n}\n\n\nint main()\n{\n int T;\n while(scanf(\"%d\",&T)!=EOF)\n  while(T--)\n {\n  int n;\n  scanf(\"%d\",&n);//n门课程\nint i,j;\n  int upper =1<<(n);\n        int dayupper =0;\n  for(i=0;i<n;i++)\n  {\n   scanf(\"%s%d%d\",course[i].name,&course[i].deadtime,&course[i].cost);\n      dayupper+=course[i].cost;\n  }\n\n      memset(visited,false,sizeof(visited));\n\n   dp[0].cost=0;\n   dp[0].pre=-1;\n   dp[0].reduced =0;\n   visited[0]=true;\n\n   int work;\n   int tupper = upper-1;\n\n   for(j=0;j<tupper;j++)//遍历所有状态\n   {\n    \n     for(work=0;work<n;work++)\n     {\n      int cur =1<<work;\n      if((cur&j)==0)//该项作业尚未做过\n      {\n                   int curtemp=cur|j; \n       int day=dp[j].cost+course[work].cost;\n       dp[curtemp].cost = day;\n                   int reduce = day-course[work].deadtime;\n       if(reduce<0)reduce=0;\n       reduce+=dp[j].reduced;\n      \n       if(visited[curtemp])//该状态已有访问信息\n       {\n        if(reduce<dp[curtemp].reduced)\n        {\n         dp[curtemp].reduced=reduce;\n         dp[curtemp].pre=j;\n        }\n        //else\n        // if(reduce==dp[curtemp].reduced)//扣分相同，取字典序小的那一个，由于这\n        // {                                 //里j是按从小到达搜索的，默认已是按字典序，不需再处理\n        //  if(dp[curtemp].pre>j)\n        //   dp[curtemp].pre = j;\n        // }\n       }\n       else\n        if(visited[curtemp]==false)//该状态尚未到达过\n        {\n         visited[curtemp]=true;\n                           dp[curtemp].reduced=reduce;\n         dp[curtemp].pre=j;\n        }\n      }\n     }\n   }\n  \n   printf(\"%d\\n\",dp[tupper].reduced);  \n   output(tupper);\n   \n }\n return0;\n}\n```\n\n","slug":"2011-01-28-Algorithm-HDU-1074-Doing-Homework","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgg000sqj7lo2aea05r","content":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1074\" target=\"_blank\" rel=\"external\">HDU 1074 Doing Homework </a></p>\n<h1 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h1><p>状态压缩DP</p>\n<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>有n门课程作业，每门作业的截止时间为D,需要花费的时间为C，若作业不能按时完成，每超期1天扣1分。<br>这n门作业按课程的字典序先后输入<br>问完成这n门作业至少要扣多少分，并输出扣分最少的做作业顺序</p>\n<p>PS:达到扣分最少的方案有多种，请输出字典序最小的那一组方案</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>n&lt;=15，由题意知，只需对这n份作业进行全排列，选出扣分最少的即可。<br>用一个二进制数存储这n份作业的完成情况，第1.。。。n个作业状况分别<br>对应二进制数的第0，1.。。。。,n-1位则由题意，故数字上限为2^n<br>其中 2^n-1即为n项作业全部完成，0为没有作业完成。。。</p>\n<p>用dp[i]记录完成作业状态为i时的信息（所需时间，前一个状态，最少损失的分数）。<br>递推条件如下</p>\n<ol>\n<li>状态a能做第i号作业的条件是a中作业i尚未完成，即a&amp;i=0。</li>\n<li>若有两个状态dp[a],dp[b]都能到达dp[i],那么选择能使到达i扣分小的那一条路径，若分数相同，转入3</li>\n<li>这两种状态扣的分数相同，那么选择字典序小的，由于作业按字典序输入，故即dp[i].pre = min(a,b);</li>\n</ol>\n<p>初始化：dp[0].cost = 0;dp[0].pre=-1;dp[0].reduced = 0;</p>\n<p>最后dp[2^n-1].reduced即为最少扣分，课程安排可递归的输出</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =65536;</span><br><span class=\"line\"></span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> int cost;//所需要的时间</span><br><span class=\"line\">int pre;//前一状态</span><br><span class=\"line\">int reduced;//最少损失的分数</span><br><span class=\"line\">&#125;dp[N];//dp[i][j]表示在第i天完成作业信息为j</span><br><span class=\"line\">bool visited[N];//表示完成j的状态是否被访问</span><br><span class=\"line\"></span><br><span class=\"line\">struct course</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int deadtime;//截止日期</span><br><span class=\"line\">int cost;//所需日期</span><br><span class=\"line\">char name[201];</span><br><span class=\"line\">&#125;course[16];</span><br><span class=\"line\"></span><br><span class=\"line\">void output(int status)//递归输出课程安排表</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int curjob= dp[status].pre^status;</span><br><span class=\"line\"> int curid =0;</span><br><span class=\"line\"> curjob&gt;&gt;=1;</span><br><span class=\"line\"> while(curjob)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  curid++;</span><br><span class=\"line\">  curjob&gt;&gt;=1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> if(dp[status].pre!=0)//输出其前面的课程</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int preday = dp[status].cost-course[curid].cost;</span><br><span class=\"line\">  output(dp[status].pre);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> printf(&quot;%s\\n&quot;,course[curid].name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int T;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\">  while(T--)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int n;</span><br><span class=\"line\">  scanf(&quot;%d&quot;,&amp;n);//n门课程</span><br><span class=\"line\">int i,j;</span><br><span class=\"line\">  int upper =1&lt;&lt;(n);</span><br><span class=\"line\">        int dayupper =0;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   scanf(&quot;%s%d%d&quot;,course[i].name,&amp;course[i].deadtime,&amp;course[i].cost);</span><br><span class=\"line\">      dayupper+=course[i].cost;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      memset(visited,false,sizeof(visited));</span><br><span class=\"line\"></span><br><span class=\"line\">   dp[0].cost=0;</span><br><span class=\"line\">   dp[0].pre=-1;</span><br><span class=\"line\">   dp[0].reduced =0;</span><br><span class=\"line\">   visited[0]=true;</span><br><span class=\"line\"></span><br><span class=\"line\">   int work;</span><br><span class=\"line\">   int tupper = upper-1;</span><br><span class=\"line\"></span><br><span class=\"line\">   for(j=0;j&lt;tupper;j++)//遍历所有状态</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">     for(work=0;work&lt;n;work++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      int cur =1&lt;&lt;work;</span><br><span class=\"line\">      if((cur&amp;j)==0)//该项作业尚未做过</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">                   int curtemp=cur|j; </span><br><span class=\"line\">       int day=dp[j].cost+course[work].cost;</span><br><span class=\"line\">       dp[curtemp].cost = day;</span><br><span class=\"line\">                   int reduce = day-course[work].deadtime;</span><br><span class=\"line\">       if(reduce&lt;0)reduce=0;</span><br><span class=\"line\">       reduce+=dp[j].reduced;</span><br><span class=\"line\">      </span><br><span class=\"line\">       if(visited[curtemp])//该状态已有访问信息</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        if(reduce&lt;dp[curtemp].reduced)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         dp[curtemp].reduced=reduce;</span><br><span class=\"line\">         dp[curtemp].pre=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //else</span><br><span class=\"line\">        // if(reduce==dp[curtemp].reduced)//扣分相同，取字典序小的那一个，由于这</span><br><span class=\"line\">        // &#123;                                 //里j是按从小到达搜索的，默认已是按字典序，不需再处理</span><br><span class=\"line\">        //  if(dp[curtemp].pre&gt;j)</span><br><span class=\"line\">        //   dp[curtemp].pre = j;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       else</span><br><span class=\"line\">        if(visited[curtemp]==false)//该状态尚未到达过</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         visited[curtemp]=true;</span><br><span class=\"line\">                           dp[curtemp].reduced=reduce;</span><br><span class=\"line\">         dp[curtemp].pre=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,dp[tupper].reduced);  </span><br><span class=\"line\">   output(tupper);</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1074\">HDU 1074 Doing Homework </a></p>\n<h1 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h1><p>状态压缩DP</p>\n<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>有n门课程作业，每门作业的截止时间为D,需要花费的时间为C，若作业不能按时完成，每超期1天扣1分。<br>这n门作业按课程的字典序先后输入<br>问完成这n门作业至少要扣多少分，并输出扣分最少的做作业顺序</p>\n<p>PS:达到扣分最少的方案有多种，请输出字典序最小的那一组方案</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>n&lt;=15，由题意知，只需对这n份作业进行全排列，选出扣分最少的即可。<br>用一个二进制数存储这n份作业的完成情况，第1.。。。n个作业状况分别<br>对应二进制数的第0，1.。。。。,n-1位则由题意，故数字上限为2^n<br>其中 2^n-1即为n项作业全部完成，0为没有作业完成。。。</p>\n<p>用dp[i]记录完成作业状态为i时的信息（所需时间，前一个状态，最少损失的分数）。<br>递推条件如下</p>\n<ol>\n<li>状态a能做第i号作业的条件是a中作业i尚未完成，即a&amp;i=0。</li>\n<li>若有两个状态dp[a],dp[b]都能到达dp[i],那么选择能使到达i扣分小的那一条路径，若分数相同，转入3</li>\n<li>这两种状态扣的分数相同，那么选择字典序小的，由于作业按字典序输入，故即dp[i].pre = min(a,b);</li>\n</ol>\n<p>初始化：dp[0].cost = 0;dp[0].pre=-1;dp[0].reduced = 0;</p>\n<p>最后dp[2^n-1].reduced即为最少扣分，课程安排可递归的输出</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =65536;</span><br><span class=\"line\"></span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> int cost;//所需要的时间</span><br><span class=\"line\">int pre;//前一状态</span><br><span class=\"line\">int reduced;//最少损失的分数</span><br><span class=\"line\">&#125;dp[N];//dp[i][j]表示在第i天完成作业信息为j</span><br><span class=\"line\">bool visited[N];//表示完成j的状态是否被访问</span><br><span class=\"line\"></span><br><span class=\"line\">struct course</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int deadtime;//截止日期</span><br><span class=\"line\">int cost;//所需日期</span><br><span class=\"line\">char name[201];</span><br><span class=\"line\">&#125;course[16];</span><br><span class=\"line\"></span><br><span class=\"line\">void output(int status)//递归输出课程安排表</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int curjob= dp[status].pre^status;</span><br><span class=\"line\"> int curid =0;</span><br><span class=\"line\"> curjob&gt;&gt;=1;</span><br><span class=\"line\"> while(curjob)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  curid++;</span><br><span class=\"line\">  curjob&gt;&gt;=1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> if(dp[status].pre!=0)//输出其前面的课程</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int preday = dp[status].cost-course[curid].cost;</span><br><span class=\"line\">  output(dp[status].pre);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> printf(&quot;%s\\n&quot;,course[curid].name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int T;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\">  while(T--)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int n;</span><br><span class=\"line\">  scanf(&quot;%d&quot;,&amp;n);//n门课程</span><br><span class=\"line\">int i,j;</span><br><span class=\"line\">  int upper =1&lt;&lt;(n);</span><br><span class=\"line\">        int dayupper =0;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   scanf(&quot;%s%d%d&quot;,course[i].name,&amp;course[i].deadtime,&amp;course[i].cost);</span><br><span class=\"line\">      dayupper+=course[i].cost;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      memset(visited,false,sizeof(visited));</span><br><span class=\"line\"></span><br><span class=\"line\">   dp[0].cost=0;</span><br><span class=\"line\">   dp[0].pre=-1;</span><br><span class=\"line\">   dp[0].reduced =0;</span><br><span class=\"line\">   visited[0]=true;</span><br><span class=\"line\"></span><br><span class=\"line\">   int work;</span><br><span class=\"line\">   int tupper = upper-1;</span><br><span class=\"line\"></span><br><span class=\"line\">   for(j=0;j&lt;tupper;j++)//遍历所有状态</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">     for(work=0;work&lt;n;work++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      int cur =1&lt;&lt;work;</span><br><span class=\"line\">      if((cur&amp;j)==0)//该项作业尚未做过</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">                   int curtemp=cur|j; </span><br><span class=\"line\">       int day=dp[j].cost+course[work].cost;</span><br><span class=\"line\">       dp[curtemp].cost = day;</span><br><span class=\"line\">                   int reduce = day-course[work].deadtime;</span><br><span class=\"line\">       if(reduce&lt;0)reduce=0;</span><br><span class=\"line\">       reduce+=dp[j].reduced;</span><br><span class=\"line\">      </span><br><span class=\"line\">       if(visited[curtemp])//该状态已有访问信息</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        if(reduce&lt;dp[curtemp].reduced)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         dp[curtemp].reduced=reduce;</span><br><span class=\"line\">         dp[curtemp].pre=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //else</span><br><span class=\"line\">        // if(reduce==dp[curtemp].reduced)//扣分相同，取字典序小的那一个，由于这</span><br><span class=\"line\">        // &#123;                                 //里j是按从小到达搜索的，默认已是按字典序，不需再处理</span><br><span class=\"line\">        //  if(dp[curtemp].pre&gt;j)</span><br><span class=\"line\">        //   dp[curtemp].pre = j;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       else</span><br><span class=\"line\">        if(visited[curtemp]==false)//该状态尚未到达过</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         visited[curtemp]=true;</span><br><span class=\"line\">                           dp[curtemp].reduced=reduce;</span><br><span class=\"line\">         dp[curtemp].pre=j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,dp[tupper].reduced);  </span><br><span class=\"line\">   output(tupper);</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"状态压缩 -- POJ 1185 炮兵阵地【状态压缩DP】","keywords":["algorithm","POJ"],"description":"状态压缩 -- POJ 1185 炮兵阵地 解题报告","comments":1,"_content":"[状态压缩 -- POJ 1185 炮兵阵地【状态压缩DP】 ](http://poj.org/problem?id=1185)\n\n# 核心算法：\n \n dp状态压缩\n \n 中文题\n\n# 分析：\n\ngraph[i]存储第i行的地形，用一二进制数表示:\n\n1.  山地对应位置为1\n2.  平地对应位置为0\n\nleg[N]中存放所有能够合法的单行安排状态，用二进制数表示：\n\n1. 驻兵对应位置为1\n2. 不驻兵对应位置为0\n\ndp[i][j][k]表示第i行状态为j，i-1行状态为k时最多的哨兵数目，j,k均对应leg[]中状态\n\ndp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);\n\n其中：\n  \n  1. p1为第i-1层的合法行存放状态\n  2. p2为第i-2层的合法行存放状态，\n  3. cur为当前即第i层合法行存放状态\n  4. p1,p2,cur满足互不冲突，即三行数据中的任何一列驻兵数最多只出现一个\n  cur满足不在山地驻兵，即满足leg[cur].status&graph[i]==0\n\n由此，最多的驻兵数即为dp[n-1][][]中的最大值\n\n PS:用了两个小时写代码，结果因为一个数组开小了，纠结了近四个小时。。。真悲剧。。。\n \n# Answer\n\n```\n\n#include<stdio.h>\n#include<string.h>\nconstint N =1<<11;\nconstint LEG_NUM =90;\nint dp[101][LEG_NUM][LEG_NUM];//\nint graph[110];\n\nstruct node\n{\n int army;//部队个数\nint status;//布局\n}leg[LEG_NUM];//存储单行合法的炮兵布局\nint legNum;\n\nvoid getLeg()//获取合法单行\n{\n    int i;\n legNum =0;\n leg[legNum].army =0;\n leg[legNum++].status =0;\n\n for(i=1;i<N;i++)\n {\n  int temp =i;\n  if(((temp<<1)&temp)||((temp<<2)&temp))continue;\n\n  leg[legNum].status=i;\n  leg[legNum].army =0;\n  temp = i;\n  while(temp)\n  {\n   if(temp&1)leg[legNum].army++;\n   temp>>=1;\n  }\n  legNum++;\n }\n}\n\ninline int getmax(int a,int b)\n{\n return a>b?a:b;\n}\n\nint getId(int x)//或许当前状态的上限\n{\n int left =0;\n int right = legNum;\n int ans =0;\n while(left<=right)\n {\n  int mid = (left+right)>>1;\n  if(leg[mid].status>x)\n  {\n   ans =mid;\n   right=mid-1;\n  }\n  else\n   left=mid+1;\n }\n\n return ans;\n}\n\nvoid outputAns(int n,int legnum)//计算并输出答案\n{\n  int ans =0;\n   for(int i=0;i<legnum;i++)\n    for(int j=0;j<legnum;j++)\n     ans = getmax(dp[n-1][i][j],ans);\n\n   printf(\"%d\\n\",ans);\n}\n\nint main()\n{\n getLeg();\n int n,m;\n while(scanf(\"%d%d\",&n,&m)!=EOF)\n    {\n         char str[15];\n   int i,j;\n   for(i=0;i<n;i++)\n   {\n    scanf(\"%s\",str);\n    graph[i]=0;\n    for(j=0;j<m;j++)\n    {\n     if(str[j]=='P')\n      graph[i]=graph[i]*2+0;//平原为0\nelse\n      if(str[j]=='H')\n      graph[i]=graph[i]*2+1;//山地为1\n    }\n   }\n   \n   int legnum = getId((1<<m)-1);\n \n   for(i=0;i<n;i++)\n    for(j=0;j<legnum;j++)\n     for(int k=0;k<legnum;k++)\n      dp[i][j][k]=0;\n   if(n==0)\n   {\n    printf(\"0\\n\");\n    continue;\n   }\n   \n   //初始化第一行信息\nfor(i=0;i<legnum;i++)\n   {\n    if((leg[i].status&graph[0])==0)//排除在山地安排\n      dp[0][i][0] = leg[i].army;\n   }\n\n    if(n==1)\n   {\n    outputAns(n,legnum);\n    continue;\n   }\n\n   //初始化第二行信息\n\n   for(i=0;i<legnum;i++)\n   {\n    if((leg[i].status&graph[1])==0)//排除在山地安排\nfor(j=0;j<legnum;j++)\n    {\n     if((leg[i].status&leg[j].status)==0)//两行没有冲突\n     {\n      dp[1][i][j] = getmax(dp[1][i][j],dp[0][j][0]+leg[i].army);\n     }\n    }\n   }\n\n   for(i=2;i<n;i++)\n   {\n    for(int cur =0;cur<legnum;cur++)\n    {\n     if((leg[cur].status&graph[i])==0)//排除在山地驻军\n     {\n      for(int p1=0;p1<legnum;p1++)\n      {\n       if((leg[p1].status&leg[cur].status)==0)//与上层没有冲突\n       {\n        for(int p2=0;p2<legnum;p2++)\n        {\n         if((leg[p2].status&leg[cur].status)==0)\n          //与上上层没有冲突\n         {\n          dp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);\n         }\n        }\n       }\n      }\n     }\n    }\n   }\n\n\n   outputAns(n,legnum);\n   \n }\n return0;\n}\n```\n","source":"_posts/2011-01-28-algorithm-POJ-1185.md","raw":"---\nlayout: post\ntitle: \"状态压缩 -- POJ 1185 炮兵阵地【状态压缩DP】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"状态压缩 -- POJ 1185 炮兵阵地 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"DP\"]\ncomments: true\n---\n[状态压缩 -- POJ 1185 炮兵阵地【状态压缩DP】 ](http://poj.org/problem?id=1185)\n\n# 核心算法：\n \n dp状态压缩\n \n 中文题\n\n# 分析：\n\ngraph[i]存储第i行的地形，用一二进制数表示:\n\n1.  山地对应位置为1\n2.  平地对应位置为0\n\nleg[N]中存放所有能够合法的单行安排状态，用二进制数表示：\n\n1. 驻兵对应位置为1\n2. 不驻兵对应位置为0\n\ndp[i][j][k]表示第i行状态为j，i-1行状态为k时最多的哨兵数目，j,k均对应leg[]中状态\n\ndp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);\n\n其中：\n  \n  1. p1为第i-1层的合法行存放状态\n  2. p2为第i-2层的合法行存放状态，\n  3. cur为当前即第i层合法行存放状态\n  4. p1,p2,cur满足互不冲突，即三行数据中的任何一列驻兵数最多只出现一个\n  cur满足不在山地驻兵，即满足leg[cur].status&graph[i]==0\n\n由此，最多的驻兵数即为dp[n-1][][]中的最大值\n\n PS:用了两个小时写代码，结果因为一个数组开小了，纠结了近四个小时。。。真悲剧。。。\n \n# Answer\n\n```\n\n#include<stdio.h>\n#include<string.h>\nconstint N =1<<11;\nconstint LEG_NUM =90;\nint dp[101][LEG_NUM][LEG_NUM];//\nint graph[110];\n\nstruct node\n{\n int army;//部队个数\nint status;//布局\n}leg[LEG_NUM];//存储单行合法的炮兵布局\nint legNum;\n\nvoid getLeg()//获取合法单行\n{\n    int i;\n legNum =0;\n leg[legNum].army =0;\n leg[legNum++].status =0;\n\n for(i=1;i<N;i++)\n {\n  int temp =i;\n  if(((temp<<1)&temp)||((temp<<2)&temp))continue;\n\n  leg[legNum].status=i;\n  leg[legNum].army =0;\n  temp = i;\n  while(temp)\n  {\n   if(temp&1)leg[legNum].army++;\n   temp>>=1;\n  }\n  legNum++;\n }\n}\n\ninline int getmax(int a,int b)\n{\n return a>b?a:b;\n}\n\nint getId(int x)//或许当前状态的上限\n{\n int left =0;\n int right = legNum;\n int ans =0;\n while(left<=right)\n {\n  int mid = (left+right)>>1;\n  if(leg[mid].status>x)\n  {\n   ans =mid;\n   right=mid-1;\n  }\n  else\n   left=mid+1;\n }\n\n return ans;\n}\n\nvoid outputAns(int n,int legnum)//计算并输出答案\n{\n  int ans =0;\n   for(int i=0;i<legnum;i++)\n    for(int j=0;j<legnum;j++)\n     ans = getmax(dp[n-1][i][j],ans);\n\n   printf(\"%d\\n\",ans);\n}\n\nint main()\n{\n getLeg();\n int n,m;\n while(scanf(\"%d%d\",&n,&m)!=EOF)\n    {\n         char str[15];\n   int i,j;\n   for(i=0;i<n;i++)\n   {\n    scanf(\"%s\",str);\n    graph[i]=0;\n    for(j=0;j<m;j++)\n    {\n     if(str[j]=='P')\n      graph[i]=graph[i]*2+0;//平原为0\nelse\n      if(str[j]=='H')\n      graph[i]=graph[i]*2+1;//山地为1\n    }\n   }\n   \n   int legnum = getId((1<<m)-1);\n \n   for(i=0;i<n;i++)\n    for(j=0;j<legnum;j++)\n     for(int k=0;k<legnum;k++)\n      dp[i][j][k]=0;\n   if(n==0)\n   {\n    printf(\"0\\n\");\n    continue;\n   }\n   \n   //初始化第一行信息\nfor(i=0;i<legnum;i++)\n   {\n    if((leg[i].status&graph[0])==0)//排除在山地安排\n      dp[0][i][0] = leg[i].army;\n   }\n\n    if(n==1)\n   {\n    outputAns(n,legnum);\n    continue;\n   }\n\n   //初始化第二行信息\n\n   for(i=0;i<legnum;i++)\n   {\n    if((leg[i].status&graph[1])==0)//排除在山地安排\nfor(j=0;j<legnum;j++)\n    {\n     if((leg[i].status&leg[j].status)==0)//两行没有冲突\n     {\n      dp[1][i][j] = getmax(dp[1][i][j],dp[0][j][0]+leg[i].army);\n     }\n    }\n   }\n\n   for(i=2;i<n;i++)\n   {\n    for(int cur =0;cur<legnum;cur++)\n    {\n     if((leg[cur].status&graph[i])==0)//排除在山地驻军\n     {\n      for(int p1=0;p1<legnum;p1++)\n      {\n       if((leg[p1].status&leg[cur].status)==0)//与上层没有冲突\n       {\n        for(int p2=0;p2<legnum;p2++)\n        {\n         if((leg[p2].status&leg[cur].status)==0)\n          //与上上层没有冲突\n         {\n          dp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);\n         }\n        }\n       }\n      }\n     }\n    }\n   }\n\n\n   outputAns(n,legnum);\n   \n }\n return0;\n}\n```\n","slug":"2011-01-28-algorithm-POJ-1185","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgi000wqj7lzw4ldfnv","content":"<p><a href=\"http://poj.org/problem?id=1185\" target=\"_blank\" rel=\"external\">状态压缩 – POJ 1185 炮兵阵地【状态压缩DP】 </a></p>\n<h1 id=\"核心算法：\"><a href=\"#核心算法：\" class=\"headerlink\" title=\"核心算法：\"></a>核心算法：</h1><p> dp状态压缩</p>\n<p> 中文题</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>graph[i]存储第i行的地形，用一二进制数表示:</p>\n<ol>\n<li>山地对应位置为1</li>\n<li>平地对应位置为0</li>\n</ol>\n<p>leg[N]中存放所有能够合法的单行安排状态，用二进制数表示：</p>\n<ol>\n<li>驻兵对应位置为1</li>\n<li>不驻兵对应位置为0</li>\n</ol>\n<p>dp[i][j][k]表示第i行状态为j，i-1行状态为k时最多的哨兵数目，j,k均对应leg[]中状态</p>\n<p>dp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);</p>\n<p>其中：</p>\n<ol>\n<li>p1为第i-1层的合法行存放状态</li>\n<li>p2为第i-2层的合法行存放状态，</li>\n<li>cur为当前即第i层合法行存放状态</li>\n<li>p1,p2,cur满足互不冲突，即三行数据中的任何一列驻兵数最多只出现一个<br>cur满足不在山地驻兵，即满足leg[cur].status&amp;graph[i]==0</li>\n</ol>\n<p>由此，最多的驻兵数即为dp[n-1][][]中的最大值</p>\n<p> PS:用了两个小时写代码，结果因为一个数组开小了，纠结了近四个小时。。。真悲剧。。。</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =1&lt;&lt;11;</span><br><span class=\"line\">constint LEG_NUM =90;</span><br><span class=\"line\">int dp[101][LEG_NUM][LEG_NUM];//</span><br><span class=\"line\">int graph[110];</span><br><span class=\"line\"></span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int army;//部队个数</span><br><span class=\"line\">int status;//布局</span><br><span class=\"line\">&#125;leg[LEG_NUM];//存储单行合法的炮兵布局</span><br><span class=\"line\">int legNum;</span><br><span class=\"line\"></span><br><span class=\"line\">void getLeg()//获取合法单行</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\"> legNum =0;</span><br><span class=\"line\"> leg[legNum].army =0;</span><br><span class=\"line\"> leg[legNum++].status =0;</span><br><span class=\"line\"></span><br><span class=\"line\"> for(i=1;i&lt;N;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int temp =i;</span><br><span class=\"line\">  if(((temp&lt;&lt;1)&amp;temp)||((temp&lt;&lt;2)&amp;temp))continue;</span><br><span class=\"line\"></span><br><span class=\"line\">  leg[legNum].status=i;</span><br><span class=\"line\">  leg[legNum].army =0;</span><br><span class=\"line\">  temp = i;</span><br><span class=\"line\">  while(temp)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   if(temp&amp;1)leg[legNum].army++;</span><br><span class=\"line\">   temp&gt;&gt;=1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  legNum++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inline int getmax(int a,int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> return a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int getId(int x)//或许当前状态的上限</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int left =0;</span><br><span class=\"line\"> int right = legNum;</span><br><span class=\"line\"> int ans =0;</span><br><span class=\"line\"> while(left&lt;=right)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int mid = (left+right)&gt;&gt;1;</span><br><span class=\"line\">  if(leg[mid].status&gt;x)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   ans =mid;</span><br><span class=\"line\">   right=mid-1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else</span><br><span class=\"line\">   left=mid+1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void outputAns(int n,int legnum)//计算并输出答案</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int ans =0;</span><br><span class=\"line\">   for(int i=0;i&lt;legnum;i++)</span><br><span class=\"line\">    for(int j=0;j&lt;legnum;j++)</span><br><span class=\"line\">     ans = getmax(dp[n-1][i][j],ans);</span><br><span class=\"line\"></span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> getLeg();</span><br><span class=\"line\"> int n,m;</span><br><span class=\"line\"> while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         char str[15];</span><br><span class=\"line\">   int i,j;</span><br><span class=\"line\">   for(i=0;i&lt;n;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    scanf(&quot;%s&quot;,str);</span><br><span class=\"line\">    graph[i]=0;</span><br><span class=\"line\">    for(j=0;j&lt;m;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(str[j]==&apos;P&apos;)</span><br><span class=\"line\">      graph[i]=graph[i]*2+0;//平原为0</span><br><span class=\"line\">else</span><br><span class=\"line\">      if(str[j]==&apos;H&apos;)</span><br><span class=\"line\">      graph[i]=graph[i]*2+1;//山地为1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   int legnum = getId((1&lt;&lt;m)-1);</span><br><span class=\"line\"> </span><br><span class=\"line\">   for(i=0;i&lt;n;i++)</span><br><span class=\"line\">    for(j=0;j&lt;legnum;j++)</span><br><span class=\"line\">     for(int k=0;k&lt;legnum;k++)</span><br><span class=\"line\">      dp[i][j][k]=0;</span><br><span class=\"line\">   if(n==0)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    printf(&quot;0\\n&quot;);</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   //初始化第一行信息</span><br><span class=\"line\">for(i=0;i&lt;legnum;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    if((leg[i].status&amp;graph[0])==0)//排除在山地安排</span><br><span class=\"line\">      dp[0][i][0] = leg[i].army;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(n==1)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    outputAns(n,legnum);</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   //初始化第二行信息</span><br><span class=\"line\"></span><br><span class=\"line\">   for(i=0;i&lt;legnum;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    if((leg[i].status&amp;graph[1])==0)//排除在山地安排</span><br><span class=\"line\">for(j=0;j&lt;legnum;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if((leg[i].status&amp;leg[j].status)==0)//两行没有冲突</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      dp[1][i][j] = getmax(dp[1][i][j],dp[0][j][0]+leg[i].army);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   for(i=2;i&lt;n;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    for(int cur =0;cur&lt;legnum;cur++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if((leg[cur].status&amp;graph[i])==0)//排除在山地驻军</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      for(int p1=0;p1&lt;legnum;p1++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       if((leg[p1].status&amp;leg[cur].status)==0)//与上层没有冲突</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        for(int p2=0;p2&lt;legnum;p2++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         if((leg[p2].status&amp;leg[cur].status)==0)</span><br><span class=\"line\">          //与上上层没有冲突</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">          dp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   outputAns(n,legnum);</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=1185\">状态压缩 – POJ 1185 炮兵阵地【状态压缩DP】 </a></p>\n<h1 id=\"核心算法：\"><a href=\"#核心算法：\" class=\"headerlink\" title=\"核心算法：\"></a>核心算法：</h1><p> dp状态压缩</p>\n<p> 中文题</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>graph[i]存储第i行的地形，用一二进制数表示:</p>\n<ol>\n<li>山地对应位置为1</li>\n<li>平地对应位置为0</li>\n</ol>\n<p>leg[N]中存放所有能够合法的单行安排状态，用二进制数表示：</p>\n<ol>\n<li>驻兵对应位置为1</li>\n<li>不驻兵对应位置为0</li>\n</ol>\n<p>dp[i][j][k]表示第i行状态为j，i-1行状态为k时最多的哨兵数目，j,k均对应leg[]中状态</p>\n<p>dp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);</p>\n<p>其中：</p>\n<ol>\n<li>p1为第i-1层的合法行存放状态</li>\n<li>p2为第i-2层的合法行存放状态，</li>\n<li>cur为当前即第i层合法行存放状态</li>\n<li>p1,p2,cur满足互不冲突，即三行数据中的任何一列驻兵数最多只出现一个<br>cur满足不在山地驻兵，即满足leg[cur].status&amp;graph[i]==0</li>\n</ol>\n<p>由此，最多的驻兵数即为dp[n-1][][]中的最大值</p>\n<p> PS:用了两个小时写代码，结果因为一个数组开小了，纠结了近四个小时。。。真悲剧。。。</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =1&lt;&lt;11;</span><br><span class=\"line\">constint LEG_NUM =90;</span><br><span class=\"line\">int dp[101][LEG_NUM][LEG_NUM];//</span><br><span class=\"line\">int graph[110];</span><br><span class=\"line\"></span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int army;//部队个数</span><br><span class=\"line\">int status;//布局</span><br><span class=\"line\">&#125;leg[LEG_NUM];//存储单行合法的炮兵布局</span><br><span class=\"line\">int legNum;</span><br><span class=\"line\"></span><br><span class=\"line\">void getLeg()//获取合法单行</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i;</span><br><span class=\"line\"> legNum =0;</span><br><span class=\"line\"> leg[legNum].army =0;</span><br><span class=\"line\"> leg[legNum++].status =0;</span><br><span class=\"line\"></span><br><span class=\"line\"> for(i=1;i&lt;N;i++)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int temp =i;</span><br><span class=\"line\">  if(((temp&lt;&lt;1)&amp;temp)||((temp&lt;&lt;2)&amp;temp))continue;</span><br><span class=\"line\"></span><br><span class=\"line\">  leg[legNum].status=i;</span><br><span class=\"line\">  leg[legNum].army =0;</span><br><span class=\"line\">  temp = i;</span><br><span class=\"line\">  while(temp)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   if(temp&amp;1)leg[legNum].army++;</span><br><span class=\"line\">   temp&gt;&gt;=1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  legNum++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inline int getmax(int a,int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> return a&gt;b?a:b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int getId(int x)//或许当前状态的上限</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int left =0;</span><br><span class=\"line\"> int right = legNum;</span><br><span class=\"line\"> int ans =0;</span><br><span class=\"line\"> while(left&lt;=right)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int mid = (left+right)&gt;&gt;1;</span><br><span class=\"line\">  if(leg[mid].status&gt;x)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   ans =mid;</span><br><span class=\"line\">   right=mid-1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  else</span><br><span class=\"line\">   left=mid+1;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void outputAns(int n,int legnum)//计算并输出答案</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int ans =0;</span><br><span class=\"line\">   for(int i=0;i&lt;legnum;i++)</span><br><span class=\"line\">    for(int j=0;j&lt;legnum;j++)</span><br><span class=\"line\">     ans = getmax(dp[n-1][i][j],ans);</span><br><span class=\"line\"></span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> getLeg();</span><br><span class=\"line\"> int n,m;</span><br><span class=\"line\"> while(scanf(&quot;%d%d&quot;,&amp;n,&amp;m)!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         char str[15];</span><br><span class=\"line\">   int i,j;</span><br><span class=\"line\">   for(i=0;i&lt;n;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    scanf(&quot;%s&quot;,str);</span><br><span class=\"line\">    graph[i]=0;</span><br><span class=\"line\">    for(j=0;j&lt;m;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(str[j]==&apos;P&apos;)</span><br><span class=\"line\">      graph[i]=graph[i]*2+0;//平原为0</span><br><span class=\"line\">else</span><br><span class=\"line\">      if(str[j]==&apos;H&apos;)</span><br><span class=\"line\">      graph[i]=graph[i]*2+1;//山地为1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   int legnum = getId((1&lt;&lt;m)-1);</span><br><span class=\"line\"> </span><br><span class=\"line\">   for(i=0;i&lt;n;i++)</span><br><span class=\"line\">    for(j=0;j&lt;legnum;j++)</span><br><span class=\"line\">     for(int k=0;k&lt;legnum;k++)</span><br><span class=\"line\">      dp[i][j][k]=0;</span><br><span class=\"line\">   if(n==0)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    printf(&quot;0\\n&quot;);</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   //初始化第一行信息</span><br><span class=\"line\">for(i=0;i&lt;legnum;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    if((leg[i].status&amp;graph[0])==0)//排除在山地安排</span><br><span class=\"line\">      dp[0][i][0] = leg[i].army;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(n==1)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    outputAns(n,legnum);</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   //初始化第二行信息</span><br><span class=\"line\"></span><br><span class=\"line\">   for(i=0;i&lt;legnum;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    if((leg[i].status&amp;graph[1])==0)//排除在山地安排</span><br><span class=\"line\">for(j=0;j&lt;legnum;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if((leg[i].status&amp;leg[j].status)==0)//两行没有冲突</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      dp[1][i][j] = getmax(dp[1][i][j],dp[0][j][0]+leg[i].army);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   for(i=2;i&lt;n;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    for(int cur =0;cur&lt;legnum;cur++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if((leg[cur].status&amp;graph[i])==0)//排除在山地驻军</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      for(int p1=0;p1&lt;legnum;p1++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       if((leg[p1].status&amp;leg[cur].status)==0)//与上层没有冲突</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        for(int p2=0;p2&lt;legnum;p2++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         if((leg[p2].status&amp;leg[cur].status)==0)</span><br><span class=\"line\">          //与上上层没有冲突</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">          dp[i][cur][p1] = getmax(dp[i][cur][p1],dp[i-1][p1][p2]+leg[cur].army);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   outputAns(n,legnum);</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 2418 Hardwood Species【二叉查找树】","keywords":["algorithm","POJ"],"description":"POJ 2418 Hardwood Species 解题报告","comments":1,"_content":"\n[POJ 2418 Hardwood Species]()\n\n# 算法核心 \n\n二叉查找树\n\n# 题目大意：\n\n通过卫星得到了某一个区域的树名，将这些树名按字典顺序输出，\n并输出在树的总数中所占的比例，保留小数点后四位。\n\n# 主要思想：\n\n对每种树做统计，并计算出所占的比例并不难。难的是如何在规定时间内按字典顺序输出输入中涉及的树名。字典顺序可以启发我们用排序的方法解决，我们可以把树名作为关键字来比较大小，而strcmp函数也给了我们比较大小提供了条件。接下来就是要解决时间问题。如果用插入排序的算法由于大量的数据需要大量的比较，就会超时。所以这里借助了比较经典的数据结构，二叉查找树。那么我们就可以先对输入建树，然后再通过树的中序遍历来输出结果。而比例的计算可以在树的节点中增加一个空间，用于存储关键字出现的次数。\n\n# Answer\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint NameLen =40;\nlong total ;//树的总数\nstruct treeNode\n{\n char name[NameLen];\n int count;//该树出现次数\n    treeNode *left,*right;\n};\n\nvoid insert(treeNode *root,char*name)//将名字插入对应的位置\n{\n   treeNode *iNode = root;\n   bool find =false;\n   while(!find)\n   {\n      int cmp = strcmp(name,iNode->name);\n   if(cmp ==0)//名字相同\n   {\n    (iNode->count)++;\n    return;\n   }\n\n   if(cmp<0)//在左子树\n   {\n         if(iNode->left==NULL)\n   {\n   treeNode *h;\n   h=new treeNode;\n   h->count=1;\n   strcpy(h->name,name);\n   h->left = NULL;\n   h->right = NULL;\n      iNode->left = h;\n   return;\n   }\n   iNode = iNode->left;\n   }\n\n   else\n    if(cmp>0)\n    {\n     if(iNode->right == NULL)\n     {\n    treeNode *h;\n    h=new treeNode;\n    h->count=1;\n    strcpy(h->name,name);\n    h->left = NULL;\n    h->right = NULL;\n    iNode->right = h;\n    return;\n     }\n     iNode = iNode->right;\n    }\n   }\n}\n\nvoid output(treeNode *root)\n{\n   if(root->left!=NULL)\n    output(root->left);\n   printf(\"%s %.4lf\\n\",root->name,root->count*100.0/total);\n   if(root->right!=NULL)\n    output(root->right);\n}\n\nint main()\n{\n char name[NameLen];\n gets(name);\n treeNode *root;\n root =new treeNode;\n root->left = NULL;\n root->right = NULL;\n root->count =1;\n strcpy(root->name,name);\n  total =1;\n while(gets(name)!=NULL)\n {\n  insert(root,name);\n  total++;\n }\n     \n\n output(root);\n\nreturn0;\n}\n```\n","source":"_posts/2011-01-29-Algorithm-POJ-2418-Hardwood-Species.md","raw":"---\nlayout: post\ntitle: \"POJ 2418 Hardwood Species【二叉查找树】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 2418 Hardwood Species 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"Search\"]\ncomments: true\n---\n\n[POJ 2418 Hardwood Species]()\n\n# 算法核心 \n\n二叉查找树\n\n# 题目大意：\n\n通过卫星得到了某一个区域的树名，将这些树名按字典顺序输出，\n并输出在树的总数中所占的比例，保留小数点后四位。\n\n# 主要思想：\n\n对每种树做统计，并计算出所占的比例并不难。难的是如何在规定时间内按字典顺序输出输入中涉及的树名。字典顺序可以启发我们用排序的方法解决，我们可以把树名作为关键字来比较大小，而strcmp函数也给了我们比较大小提供了条件。接下来就是要解决时间问题。如果用插入排序的算法由于大量的数据需要大量的比较，就会超时。所以这里借助了比较经典的数据结构，二叉查找树。那么我们就可以先对输入建树，然后再通过树的中序遍历来输出结果。而比例的计算可以在树的节点中增加一个空间，用于存储关键字出现的次数。\n\n# Answer\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint NameLen =40;\nlong total ;//树的总数\nstruct treeNode\n{\n char name[NameLen];\n int count;//该树出现次数\n    treeNode *left,*right;\n};\n\nvoid insert(treeNode *root,char*name)//将名字插入对应的位置\n{\n   treeNode *iNode = root;\n   bool find =false;\n   while(!find)\n   {\n      int cmp = strcmp(name,iNode->name);\n   if(cmp ==0)//名字相同\n   {\n    (iNode->count)++;\n    return;\n   }\n\n   if(cmp<0)//在左子树\n   {\n         if(iNode->left==NULL)\n   {\n   treeNode *h;\n   h=new treeNode;\n   h->count=1;\n   strcpy(h->name,name);\n   h->left = NULL;\n   h->right = NULL;\n      iNode->left = h;\n   return;\n   }\n   iNode = iNode->left;\n   }\n\n   else\n    if(cmp>0)\n    {\n     if(iNode->right == NULL)\n     {\n    treeNode *h;\n    h=new treeNode;\n    h->count=1;\n    strcpy(h->name,name);\n    h->left = NULL;\n    h->right = NULL;\n    iNode->right = h;\n    return;\n     }\n     iNode = iNode->right;\n    }\n   }\n}\n\nvoid output(treeNode *root)\n{\n   if(root->left!=NULL)\n    output(root->left);\n   printf(\"%s %.4lf\\n\",root->name,root->count*100.0/total);\n   if(root->right!=NULL)\n    output(root->right);\n}\n\nint main()\n{\n char name[NameLen];\n gets(name);\n treeNode *root;\n root =new treeNode;\n root->left = NULL;\n root->right = NULL;\n root->count =1;\n strcpy(root->name,name);\n  total =1;\n while(gets(name)!=NULL)\n {\n  insert(root,name);\n  total++;\n }\n     \n\n output(root);\n\nreturn0;\n}\n```\n","slug":"2011-01-29-Algorithm-POJ-2418-Hardwood-Species","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgj000yqj7lo5yv36mw","content":"<p><a href=\"\">POJ 2418 Hardwood Species</a></p>\n<h1 id=\"算法核心\"><a href=\"#算法核心\" class=\"headerlink\" title=\"算法核心\"></a>算法核心</h1><p>二叉查找树</p>\n<h1 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h1><p>通过卫星得到了某一个区域的树名，将这些树名按字典顺序输出，<br>并输出在树的总数中所占的比例，保留小数点后四位。</p>\n<h1 id=\"主要思想：\"><a href=\"#主要思想：\" class=\"headerlink\" title=\"主要思想：\"></a>主要思想：</h1><p>对每种树做统计，并计算出所占的比例并不难。难的是如何在规定时间内按字典顺序输出输入中涉及的树名。字典顺序可以启发我们用排序的方法解决，我们可以把树名作为关键字来比较大小，而strcmp函数也给了我们比较大小提供了条件。接下来就是要解决时间问题。如果用插入排序的算法由于大量的数据需要大量的比较，就会超时。所以这里借助了比较经典的数据结构，二叉查找树。那么我们就可以先对输入建树，然后再通过树的中序遍历来输出结果。而比例的计算可以在树的节点中增加一个空间，用于存储关键字出现的次数。</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint NameLen =40;</span><br><span class=\"line\">long total ;//树的总数</span><br><span class=\"line\">struct treeNode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> char name[NameLen];</span><br><span class=\"line\"> int count;//该树出现次数</span><br><span class=\"line\">    treeNode *left,*right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(treeNode *root,char*name)//将名字插入对应的位置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   treeNode *iNode = root;</span><br><span class=\"line\">   bool find =false;</span><br><span class=\"line\">   while(!find)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      int cmp = strcmp(name,iNode-&gt;name);</span><br><span class=\"line\">   if(cmp ==0)//名字相同</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    (iNode-&gt;count)++;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(cmp&lt;0)//在左子树</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">         if(iNode-&gt;left==NULL)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">   treeNode *h;</span><br><span class=\"line\">   h=new treeNode;</span><br><span class=\"line\">   h-&gt;count=1;</span><br><span class=\"line\">   strcpy(h-&gt;name,name);</span><br><span class=\"line\">   h-&gt;left = NULL;</span><br><span class=\"line\">   h-&gt;right = NULL;</span><br><span class=\"line\">      iNode-&gt;left = h;</span><br><span class=\"line\">   return;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   iNode = iNode-&gt;left;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   else</span><br><span class=\"line\">    if(cmp&gt;0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(iNode-&gt;right == NULL)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">    treeNode *h;</span><br><span class=\"line\">    h=new treeNode;</span><br><span class=\"line\">    h-&gt;count=1;</span><br><span class=\"line\">    strcpy(h-&gt;name,name);</span><br><span class=\"line\">    h-&gt;left = NULL;</span><br><span class=\"line\">    h-&gt;right = NULL;</span><br><span class=\"line\">    iNode-&gt;right = h;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     iNode = iNode-&gt;right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void output(treeNode *root)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   if(root-&gt;left!=NULL)</span><br><span class=\"line\">    output(root-&gt;left);</span><br><span class=\"line\">   printf(&quot;%s %.4lf\\n&quot;,root-&gt;name,root-&gt;count*100.0/total);</span><br><span class=\"line\">   if(root-&gt;right!=NULL)</span><br><span class=\"line\">    output(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> char name[NameLen];</span><br><span class=\"line\"> gets(name);</span><br><span class=\"line\"> treeNode *root;</span><br><span class=\"line\"> root =new treeNode;</span><br><span class=\"line\"> root-&gt;left = NULL;</span><br><span class=\"line\"> root-&gt;right = NULL;</span><br><span class=\"line\"> root-&gt;count =1;</span><br><span class=\"line\"> strcpy(root-&gt;name,name);</span><br><span class=\"line\">  total =1;</span><br><span class=\"line\"> while(gets(name)!=NULL)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  insert(root,name);</span><br><span class=\"line\">  total++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\"> output(root);</span><br><span class=\"line\"></span><br><span class=\"line\">return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"\">POJ 2418 Hardwood Species</a></p>\n<h1 id=\"算法核心\"><a href=\"#算法核心\" class=\"headerlink\" title=\"算法核心\"></a>算法核心</h1><p>二叉查找树</p>\n<h1 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h1><p>通过卫星得到了某一个区域的树名，将这些树名按字典顺序输出，<br>并输出在树的总数中所占的比例，保留小数点后四位。</p>\n<h1 id=\"主要思想：\"><a href=\"#主要思想：\" class=\"headerlink\" title=\"主要思想：\"></a>主要思想：</h1><p>对每种树做统计，并计算出所占的比例并不难。难的是如何在规定时间内按字典顺序输出输入中涉及的树名。字典顺序可以启发我们用排序的方法解决，我们可以把树名作为关键字来比较大小，而strcmp函数也给了我们比较大小提供了条件。接下来就是要解决时间问题。如果用插入排序的算法由于大量的数据需要大量的比较，就会超时。所以这里借助了比较经典的数据结构，二叉查找树。那么我们就可以先对输入建树，然后再通过树的中序遍历来输出结果。而比例的计算可以在树的节点中增加一个空间，用于存储关键字出现的次数。</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint NameLen =40;</span><br><span class=\"line\">long total ;//树的总数</span><br><span class=\"line\">struct treeNode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> char name[NameLen];</span><br><span class=\"line\"> int count;//该树出现次数</span><br><span class=\"line\">    treeNode *left,*right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(treeNode *root,char*name)//将名字插入对应的位置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   treeNode *iNode = root;</span><br><span class=\"line\">   bool find =false;</span><br><span class=\"line\">   while(!find)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      int cmp = strcmp(name,iNode-&gt;name);</span><br><span class=\"line\">   if(cmp ==0)//名字相同</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    (iNode-&gt;count)++;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   if(cmp&lt;0)//在左子树</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">         if(iNode-&gt;left==NULL)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">   treeNode *h;</span><br><span class=\"line\">   h=new treeNode;</span><br><span class=\"line\">   h-&gt;count=1;</span><br><span class=\"line\">   strcpy(h-&gt;name,name);</span><br><span class=\"line\">   h-&gt;left = NULL;</span><br><span class=\"line\">   h-&gt;right = NULL;</span><br><span class=\"line\">      iNode-&gt;left = h;</span><br><span class=\"line\">   return;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   iNode = iNode-&gt;left;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   else</span><br><span class=\"line\">    if(cmp&gt;0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(iNode-&gt;right == NULL)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">    treeNode *h;</span><br><span class=\"line\">    h=new treeNode;</span><br><span class=\"line\">    h-&gt;count=1;</span><br><span class=\"line\">    strcpy(h-&gt;name,name);</span><br><span class=\"line\">    h-&gt;left = NULL;</span><br><span class=\"line\">    h-&gt;right = NULL;</span><br><span class=\"line\">    iNode-&gt;right = h;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     iNode = iNode-&gt;right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void output(treeNode *root)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   if(root-&gt;left!=NULL)</span><br><span class=\"line\">    output(root-&gt;left);</span><br><span class=\"line\">   printf(&quot;%s %.4lf\\n&quot;,root-&gt;name,root-&gt;count*100.0/total);</span><br><span class=\"line\">   if(root-&gt;right!=NULL)</span><br><span class=\"line\">    output(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> char name[NameLen];</span><br><span class=\"line\"> gets(name);</span><br><span class=\"line\"> treeNode *root;</span><br><span class=\"line\"> root =new treeNode;</span><br><span class=\"line\"> root-&gt;left = NULL;</span><br><span class=\"line\"> root-&gt;right = NULL;</span><br><span class=\"line\"> root-&gt;count =1;</span><br><span class=\"line\"> strcpy(root-&gt;name,name);</span><br><span class=\"line\">  total =1;</span><br><span class=\"line\"> while(gets(name)!=NULL)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  insert(root,name);</span><br><span class=\"line\">  total++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\"> output(root);</span><br><span class=\"line\"></span><br><span class=\"line\">return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 3281 Dining【Dinic】","keywords":["algorithm","POJ"],"description":"POJ 3281 Dining 解题报告","comments":1,"_content":"[POJ 3281 Dining【Dinic】 ](http://poj.org/problem?id=3281)\n\n## 核心算法\n\n网络最大流\n\n## 大意：\n \n* 有n头牛，F种食物，D种饮料，\n* 第i头牛喜欢fi种食物，di种饮料，编号分别为。。。\n \n  已知一头牛最多能吃一种食物和一种饮料，每种饮料\n  或食物最多能被一头牛吃，求以上条件下，最多能有多少头\n  牛能吃到他所喜爱的食物和饮料\n\n## 建立模型：\n \n 建立网络流模型：\n   \n1. 对每种食物建立从源点指向它的一条边，流量为1\n2. 在牛与它所喜爱的食物间建立一条边，流量为1\n3. 在牛与它所喜欢的饮料间建立一条边，流量为1\n4. 对每种饮料建立一条指向汇点的边，流量为1\n5. 在上面的基础上，将牛拆点，在拆开的点间建立一条流量为1的边\n   在以上条件下，从源点到汇点的最大流即为答案\n\n## 模型的分析：\n  \n* 条件1使得满足每种食物有且只有一个，条件4类似\n* 条件2使得每头牛只能选择自己喜欢的食物，条件3类似\n* 条件5使得每头牛最多只能选择一种饮料和食物\n\n这里  最大流使用的是dinic算法。。\n\n## Code\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint EDGE_NUM =20001;//边数\nconstint POINT_NUM =501;//点数\nstruct edge\n{\n int v;//点\nint next;//下一边\nint value;//当前边流量\n}edge[2*EDGE_NUM];//边信息，以邻接表形式存储\nint p[POINT_NUM];//p[i]记录最后一条以i为起点的边的id,即以i为起点的最后一条边为edge[p[i]],而edge[p[i]].next则为以i为起点的倒数第二条边，以此类推\nint level[POINT_NUM];//level[i]记录i点的层次\nint que[POINT_NUM],out[POINT_NUM];//辅助数组\nint edgeNumber;\nvoid init()\n{\n edgeNumber =0;\n memset(p,-1,sizeof(p));\n}\ninline void addEdge(int from,int to,int value)//添加边，以邻接表形式存储\n{\n edge[edgeNumber].v = to;\n edge[edgeNumber].value = value;\n edge[edgeNumber].next = p[from];\n p[from] = edgeNumber++;\n\n}\n\nint Dinic(int source,int sink,int n)\n{\n int i,maxFlow =0;\n while(true)\n {\n  int head,tail;\n  for(i=0;i<n;i++)level[i] =0;\n  level[source] =1;//源点为第一层\n  head =0;tail =0;\n  que[0] = source;//que这里当队里使用\nwhile(head<=tail)//BFS该剩余图，计算每个可达点层次\n  {\n   int cur = que[head++];\n   for(i=p[cur];i!=-1;i=edge[i].next)\n   {\n    if(edge[i].value>0&&level[edge[i].v]==0)\n    {\n     level[edge[i].v] = level[cur]+1;\n     que[++tail] = edge[i].v;\n    }\n   }\n  }\n\n\n  if(level[sink]==0)break;//不存在增广路\n\n  for(i=0;i<n;i++)out[i]=p[i];//out[i]动态记录可用边\n\n  int q =-1;//q为已经搜索到的点的个数,que存放途径边信息\nwhile(true)//DFS剩余图，查找增广路\n  {\n   if(q<0)//当前路为空\n   {\n               int cur =out[source];\n      for(;cur!=-1;cur=edge[cur].next)//查找第一条边\n      {\n                   if(edge[cur].value>0&&out[edge[cur].v]!=-1&&level[edge[cur].v]==2)//合法第一条边必须满足：1.流量大于0;2.终点有可用边 3:终点层次为2\nbreak;\n      }\n\n      if(cur==-1)break;//找不到第二层，当前剩余图已经没有增广路\n\n      que[++q]=cur;//存入第一条边id\nout[source]=edge[cur].next;\n   }\n\n   int curnode = edge[que[q]].v;//当前路的终点\n   \n   if(curnode==sink)//找到一条增广路\n   {\n                int thisflow = edge[que[0]].value;//thisflow为当前增广路的流量\nint index =0;//标记最小流量边的id\nfor(i=1;i<=q;i++)\n    {\n     if(thisflow>edge[que[i]].value)\n     {\n      thisflow=edge[que[i]].value;\n      index = i;\n     }\n    }\n\n    maxFlow+=thisflow;\n    for(i=0;i<=q;i++)\n    {\n     edge[que[i]].value-=thisflow;\n     edge[que[i]^1].value+=thisflow;//与其方向相反的边\n    }\n              \n    q = index-1;//查找下一条增广路时可直接使用当前路的前q条边\n \n   }\n   else//尚未找到汇点\n   {\n    int cur =out[curnode];\n    for(;cur!=-1;cur=edge[cur].next)\n    {\n     if(edge[cur].value>0&&out[edge[cur].v]!=-1&&level[edge[cur].v]==level[curnode]+1)\n      break;\n    }\n    if(cur==-1)//没有下一条路\n    {\n     out[curnode]=-1;//标记当前点的可达边为0\n     q--;\n    }\n    else\n    {\n     que[++q]=cur;\n     out[curnode]=edge[cur].next;//下一次搜索时可达边从edge[cur].next开始查找\n    }\n   }\n  }\n\n \n\n }\n\n return maxFlow;\n\n}\nint main()\n{\n   int Nn,Ff,Dd;\n   while(scanf(\"%d%d%d\",&Nn,&Ff,&Dd)!=EOF)\n   {\n      init();\n      int foodstart =1;\n      int cow1 = Ff+2;\n      int cow2 = cow1+Nn+1;\n      int drinkstart = cow2+Nn+1;\n      int end = drinkstart+Dd+1;\n\n      int i;\n      for(i=0;i<Nn;i++)//添加牛边\n      {\n           addEdge(cow1+i,cow2+i,1);\n           addEdge(cow2+i,cow1+i,0);\n      }\n\n      for(i=0;i<Ff;i++)//添加食物边\n      {\n          addEdge(0,foodstart+i,1);\n          addEdge(foodstart+i,0,0);\n      }\n\n      for(i=0;i<Dd;i++)//添加饮料\n      {\n          addEdge(drinkstart+i,end,1);\n          addEdge(end,drinkstart+i,0);\n      }\n\n      for(i=0;i<Nn;i++)\n      {\n          int f,d;\n          scanf(\"%d%d\",&f,&d);\n          int x;\n          while(f--)\n          {\n             scanf(\"%d\",&x);\n             x--;\n             addEdge(foodstart+x,cow1+i,1);\n             addEdge(cow1+i,foodstart+x,0);\n          }\n          while(d--)\n          {\n              scanf(\"%d\",&x);\n              x--;\n              addEdge(cow2+i,drinkstart+x,1);\n              addEdge(drinkstart+x,cow2+i,0);\n          }\n      }\n\n\n      printf(\"%d\\n\",Dinic(0,end,end+1));\n   }\n   return0;\n}\n```\n\n","source":"_posts/2011-01-29-algorithm-POJ-3281-Dining.md","raw":"---\nlayout: post\ntitle: \"POJ 3281 Dining【Dinic】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 3281 Dining 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"网络流\"]\ncomments: true\n---\n[POJ 3281 Dining【Dinic】 ](http://poj.org/problem?id=3281)\n\n## 核心算法\n\n网络最大流\n\n## 大意：\n \n* 有n头牛，F种食物，D种饮料，\n* 第i头牛喜欢fi种食物，di种饮料，编号分别为。。。\n \n  已知一头牛最多能吃一种食物和一种饮料，每种饮料\n  或食物最多能被一头牛吃，求以上条件下，最多能有多少头\n  牛能吃到他所喜爱的食物和饮料\n\n## 建立模型：\n \n 建立网络流模型：\n   \n1. 对每种食物建立从源点指向它的一条边，流量为1\n2. 在牛与它所喜爱的食物间建立一条边，流量为1\n3. 在牛与它所喜欢的饮料间建立一条边，流量为1\n4. 对每种饮料建立一条指向汇点的边，流量为1\n5. 在上面的基础上，将牛拆点，在拆开的点间建立一条流量为1的边\n   在以上条件下，从源点到汇点的最大流即为答案\n\n## 模型的分析：\n  \n* 条件1使得满足每种食物有且只有一个，条件4类似\n* 条件2使得每头牛只能选择自己喜欢的食物，条件3类似\n* 条件5使得每头牛最多只能选择一种饮料和食物\n\n这里  最大流使用的是dinic算法。。\n\n## Code\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint EDGE_NUM =20001;//边数\nconstint POINT_NUM =501;//点数\nstruct edge\n{\n int v;//点\nint next;//下一边\nint value;//当前边流量\n}edge[2*EDGE_NUM];//边信息，以邻接表形式存储\nint p[POINT_NUM];//p[i]记录最后一条以i为起点的边的id,即以i为起点的最后一条边为edge[p[i]],而edge[p[i]].next则为以i为起点的倒数第二条边，以此类推\nint level[POINT_NUM];//level[i]记录i点的层次\nint que[POINT_NUM],out[POINT_NUM];//辅助数组\nint edgeNumber;\nvoid init()\n{\n edgeNumber =0;\n memset(p,-1,sizeof(p));\n}\ninline void addEdge(int from,int to,int value)//添加边，以邻接表形式存储\n{\n edge[edgeNumber].v = to;\n edge[edgeNumber].value = value;\n edge[edgeNumber].next = p[from];\n p[from] = edgeNumber++;\n\n}\n\nint Dinic(int source,int sink,int n)\n{\n int i,maxFlow =0;\n while(true)\n {\n  int head,tail;\n  for(i=0;i<n;i++)level[i] =0;\n  level[source] =1;//源点为第一层\n  head =0;tail =0;\n  que[0] = source;//que这里当队里使用\nwhile(head<=tail)//BFS该剩余图，计算每个可达点层次\n  {\n   int cur = que[head++];\n   for(i=p[cur];i!=-1;i=edge[i].next)\n   {\n    if(edge[i].value>0&&level[edge[i].v]==0)\n    {\n     level[edge[i].v] = level[cur]+1;\n     que[++tail] = edge[i].v;\n    }\n   }\n  }\n\n\n  if(level[sink]==0)break;//不存在增广路\n\n  for(i=0;i<n;i++)out[i]=p[i];//out[i]动态记录可用边\n\n  int q =-1;//q为已经搜索到的点的个数,que存放途径边信息\nwhile(true)//DFS剩余图，查找增广路\n  {\n   if(q<0)//当前路为空\n   {\n               int cur =out[source];\n      for(;cur!=-1;cur=edge[cur].next)//查找第一条边\n      {\n                   if(edge[cur].value>0&&out[edge[cur].v]!=-1&&level[edge[cur].v]==2)//合法第一条边必须满足：1.流量大于0;2.终点有可用边 3:终点层次为2\nbreak;\n      }\n\n      if(cur==-1)break;//找不到第二层，当前剩余图已经没有增广路\n\n      que[++q]=cur;//存入第一条边id\nout[source]=edge[cur].next;\n   }\n\n   int curnode = edge[que[q]].v;//当前路的终点\n   \n   if(curnode==sink)//找到一条增广路\n   {\n                int thisflow = edge[que[0]].value;//thisflow为当前增广路的流量\nint index =0;//标记最小流量边的id\nfor(i=1;i<=q;i++)\n    {\n     if(thisflow>edge[que[i]].value)\n     {\n      thisflow=edge[que[i]].value;\n      index = i;\n     }\n    }\n\n    maxFlow+=thisflow;\n    for(i=0;i<=q;i++)\n    {\n     edge[que[i]].value-=thisflow;\n     edge[que[i]^1].value+=thisflow;//与其方向相反的边\n    }\n              \n    q = index-1;//查找下一条增广路时可直接使用当前路的前q条边\n \n   }\n   else//尚未找到汇点\n   {\n    int cur =out[curnode];\n    for(;cur!=-1;cur=edge[cur].next)\n    {\n     if(edge[cur].value>0&&out[edge[cur].v]!=-1&&level[edge[cur].v]==level[curnode]+1)\n      break;\n    }\n    if(cur==-1)//没有下一条路\n    {\n     out[curnode]=-1;//标记当前点的可达边为0\n     q--;\n    }\n    else\n    {\n     que[++q]=cur;\n     out[curnode]=edge[cur].next;//下一次搜索时可达边从edge[cur].next开始查找\n    }\n   }\n  }\n\n \n\n }\n\n return maxFlow;\n\n}\nint main()\n{\n   int Nn,Ff,Dd;\n   while(scanf(\"%d%d%d\",&Nn,&Ff,&Dd)!=EOF)\n   {\n      init();\n      int foodstart =1;\n      int cow1 = Ff+2;\n      int cow2 = cow1+Nn+1;\n      int drinkstart = cow2+Nn+1;\n      int end = drinkstart+Dd+1;\n\n      int i;\n      for(i=0;i<Nn;i++)//添加牛边\n      {\n           addEdge(cow1+i,cow2+i,1);\n           addEdge(cow2+i,cow1+i,0);\n      }\n\n      for(i=0;i<Ff;i++)//添加食物边\n      {\n          addEdge(0,foodstart+i,1);\n          addEdge(foodstart+i,0,0);\n      }\n\n      for(i=0;i<Dd;i++)//添加饮料\n      {\n          addEdge(drinkstart+i,end,1);\n          addEdge(end,drinkstart+i,0);\n      }\n\n      for(i=0;i<Nn;i++)\n      {\n          int f,d;\n          scanf(\"%d%d\",&f,&d);\n          int x;\n          while(f--)\n          {\n             scanf(\"%d\",&x);\n             x--;\n             addEdge(foodstart+x,cow1+i,1);\n             addEdge(cow1+i,foodstart+x,0);\n          }\n          while(d--)\n          {\n              scanf(\"%d\",&x);\n              x--;\n              addEdge(cow2+i,drinkstart+x,1);\n              addEdge(drinkstart+x,cow2+i,0);\n          }\n      }\n\n\n      printf(\"%d\\n\",Dinic(0,end,end+1));\n   }\n   return0;\n}\n```\n\n","slug":"2011-01-29-algorithm-POJ-3281-Dining","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgm0012qj7ls3f5p7we","content":"<p><a href=\"http://poj.org/problem?id=3281\" target=\"_blank\" rel=\"external\">POJ 3281 Dining【Dinic】 </a></p>\n<h2 id=\"核心算法\"><a href=\"#核心算法\" class=\"headerlink\" title=\"核心算法\"></a>核心算法</h2><p>网络最大流</p>\n<h2 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h2><ul>\n<li>有n头牛，F种食物，D种饮料，</li>\n<li><p>第i头牛喜欢fi种食物，di种饮料，编号分别为。。。</p>\n<p>已知一头牛最多能吃一种食物和一种饮料，每种饮料<br>或食物最多能被一头牛吃，求以上条件下，最多能有多少头<br>牛能吃到他所喜爱的食物和饮料</p>\n</li>\n</ul>\n<h2 id=\"建立模型：\"><a href=\"#建立模型：\" class=\"headerlink\" title=\"建立模型：\"></a>建立模型：</h2><p> 建立网络流模型：</p>\n<ol>\n<li>对每种食物建立从源点指向它的一条边，流量为1</li>\n<li>在牛与它所喜爱的食物间建立一条边，流量为1</li>\n<li>在牛与它所喜欢的饮料间建立一条边，流量为1</li>\n<li>对每种饮料建立一条指向汇点的边，流量为1</li>\n<li>在上面的基础上，将牛拆点，在拆开的点间建立一条流量为1的边<br>在以上条件下，从源点到汇点的最大流即为答案</li>\n</ol>\n<h2 id=\"模型的分析：\"><a href=\"#模型的分析：\" class=\"headerlink\" title=\"模型的分析：\"></a>模型的分析：</h2><ul>\n<li>条件1使得满足每种食物有且只有一个，条件4类似</li>\n<li>条件2使得每头牛只能选择自己喜欢的食物，条件3类似</li>\n<li>条件5使得每头牛最多只能选择一种饮料和食物</li>\n</ul>\n<p>这里  最大流使用的是dinic算法。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint EDGE_NUM =20001;//边数</span><br><span class=\"line\">constint POINT_NUM =501;//点数</span><br><span class=\"line\">struct edge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int v;//点</span><br><span class=\"line\">int next;//下一边</span><br><span class=\"line\">int value;//当前边流量</span><br><span class=\"line\">&#125;edge[2*EDGE_NUM];//边信息，以邻接表形式存储</span><br><span class=\"line\">int p[POINT_NUM];//p[i]记录最后一条以i为起点的边的id,即以i为起点的最后一条边为edge[p[i]],而edge[p[i]].next则为以i为起点的倒数第二条边，以此类推</span><br><span class=\"line\">int level[POINT_NUM];//level[i]记录i点的层次</span><br><span class=\"line\">int que[POINT_NUM],out[POINT_NUM];//辅助数组</span><br><span class=\"line\">int edgeNumber;</span><br><span class=\"line\">void init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> edgeNumber =0;</span><br><span class=\"line\"> memset(p,-1,sizeof(p));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inline void addEdge(int from,int to,int value)//添加边，以邻接表形式存储</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> edge[edgeNumber].v = to;</span><br><span class=\"line\"> edge[edgeNumber].value = value;</span><br><span class=\"line\"> edge[edgeNumber].next = p[from];</span><br><span class=\"line\"> p[from] = edgeNumber++;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int Dinic(int source,int sink,int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int i,maxFlow =0;</span><br><span class=\"line\"> while(true)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int head,tail;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)level[i] =0;</span><br><span class=\"line\">  level[source] =1;//源点为第一层</span><br><span class=\"line\">  head =0;tail =0;</span><br><span class=\"line\">  que[0] = source;//que这里当队里使用</span><br><span class=\"line\">while(head&lt;=tail)//BFS该剩余图，计算每个可达点层次</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   int cur = que[head++];</span><br><span class=\"line\">   for(i=p[cur];i!=-1;i=edge[i].next)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    if(edge[i].value&gt;0&amp;&amp;level[edge[i].v]==0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     level[edge[i].v] = level[cur]+1;</span><br><span class=\"line\">     que[++tail] = edge[i].v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  if(level[sink]==0)break;//不存在增广路</span><br><span class=\"line\"></span><br><span class=\"line\">  for(i=0;i&lt;n;i++)out[i]=p[i];//out[i]动态记录可用边</span><br><span class=\"line\"></span><br><span class=\"line\">  int q =-1;//q为已经搜索到的点的个数,que存放途径边信息</span><br><span class=\"line\">while(true)//DFS剩余图，查找增广路</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   if(q&lt;0)//当前路为空</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">               int cur =out[source];</span><br><span class=\"line\">      for(;cur!=-1;cur=edge[cur].next)//查找第一条边</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">                   if(edge[cur].value&gt;0&amp;&amp;out[edge[cur].v]!=-1&amp;&amp;level[edge[cur].v]==2)//合法第一条边必须满足：1.流量大于0;2.终点有可用边 3:终点层次为2</span><br><span class=\"line\">break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if(cur==-1)break;//找不到第二层，当前剩余图已经没有增广路</span><br><span class=\"line\"></span><br><span class=\"line\">      que[++q]=cur;//存入第一条边id</span><br><span class=\"line\">out[source]=edge[cur].next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   int curnode = edge[que[q]].v;//当前路的终点</span><br><span class=\"line\">   </span><br><span class=\"line\">   if(curnode==sink)//找到一条增广路</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">                int thisflow = edge[que[0]].value;//thisflow为当前增广路的流量</span><br><span class=\"line\">int index =0;//标记最小流量边的id</span><br><span class=\"line\">for(i=1;i&lt;=q;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(thisflow&gt;edge[que[i]].value)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      thisflow=edge[que[i]].value;</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    maxFlow+=thisflow;</span><br><span class=\"line\">    for(i=0;i&lt;=q;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     edge[que[i]].value-=thisflow;</span><br><span class=\"line\">     edge[que[i]^1].value+=thisflow;//与其方向相反的边</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">              </span><br><span class=\"line\">    q = index-1;//查找下一条增广路时可直接使用当前路的前q条边</span><br><span class=\"line\"> </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else//尚未找到汇点</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    int cur =out[curnode];</span><br><span class=\"line\">    for(;cur!=-1;cur=edge[cur].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(edge[cur].value&gt;0&amp;&amp;out[edge[cur].v]!=-1&amp;&amp;level[edge[cur].v]==level[curnode]+1)</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(cur==-1)//没有下一条路</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     out[curnode]=-1;//标记当前点的可达边为0</span><br><span class=\"line\">     q--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     que[++q]=cur;</span><br><span class=\"line\">     out[curnode]=edge[cur].next;//下一次搜索时可达边从edge[cur].next开始查找</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> return maxFlow;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int Nn,Ff,Dd;</span><br><span class=\"line\">   while(scanf(&quot;%d%d%d&quot;,&amp;Nn,&amp;Ff,&amp;Dd)!=EOF)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      init();</span><br><span class=\"line\">      int foodstart =1;</span><br><span class=\"line\">      int cow1 = Ff+2;</span><br><span class=\"line\">      int cow2 = cow1+Nn+1;</span><br><span class=\"line\">      int drinkstart = cow2+Nn+1;</span><br><span class=\"line\">      int end = drinkstart+Dd+1;</span><br><span class=\"line\"></span><br><span class=\"line\">      int i;</span><br><span class=\"line\">      for(i=0;i&lt;Nn;i++)//添加牛边</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">           addEdge(cow1+i,cow2+i,1);</span><br><span class=\"line\">           addEdge(cow2+i,cow1+i,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      for(i=0;i&lt;Ff;i++)//添加食物边</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          addEdge(0,foodstart+i,1);</span><br><span class=\"line\">          addEdge(foodstart+i,0,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      for(i=0;i&lt;Dd;i++)//添加饮料</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          addEdge(drinkstart+i,end,1);</span><br><span class=\"line\">          addEdge(end,drinkstart+i,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      for(i=0;i&lt;Nn;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          int f,d;</span><br><span class=\"line\">          scanf(&quot;%d%d&quot;,&amp;f,&amp;d);</span><br><span class=\"line\">          int x;</span><br><span class=\"line\">          while(f--)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">             scanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">             x--;</span><br><span class=\"line\">             addEdge(foodstart+x,cow1+i,1);</span><br><span class=\"line\">             addEdge(cow1+i,foodstart+x,0);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          while(d--)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              scanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">              x--;</span><br><span class=\"line\">              addEdge(cow2+i,drinkstart+x,1);</span><br><span class=\"line\">              addEdge(drinkstart+x,cow2+i,0);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      printf(&quot;%d\\n&quot;,Dinic(0,end,end+1));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=3281\">POJ 3281 Dining【Dinic】 </a></p>\n<h2 id=\"核心算法\"><a href=\"#核心算法\" class=\"headerlink\" title=\"核心算法\"></a>核心算法</h2><p>网络最大流</p>\n<h2 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h2><ul>\n<li>有n头牛，F种食物，D种饮料，</li>\n<li><p>第i头牛喜欢fi种食物，di种饮料，编号分别为。。。</p>\n<p>已知一头牛最多能吃一种食物和一种饮料，每种饮料<br>或食物最多能被一头牛吃，求以上条件下，最多能有多少头<br>牛能吃到他所喜爱的食物和饮料</p>\n</li>\n</ul>\n<h2 id=\"建立模型：\"><a href=\"#建立模型：\" class=\"headerlink\" title=\"建立模型：\"></a>建立模型：</h2><p> 建立网络流模型：</p>\n<ol>\n<li>对每种食物建立从源点指向它的一条边，流量为1</li>\n<li>在牛与它所喜爱的食物间建立一条边，流量为1</li>\n<li>在牛与它所喜欢的饮料间建立一条边，流量为1</li>\n<li>对每种饮料建立一条指向汇点的边，流量为1</li>\n<li>在上面的基础上，将牛拆点，在拆开的点间建立一条流量为1的边<br>在以上条件下，从源点到汇点的最大流即为答案</li>\n</ol>\n<h2 id=\"模型的分析：\"><a href=\"#模型的分析：\" class=\"headerlink\" title=\"模型的分析：\"></a>模型的分析：</h2><ul>\n<li>条件1使得满足每种食物有且只有一个，条件4类似</li>\n<li>条件2使得每头牛只能选择自己喜欢的食物，条件3类似</li>\n<li>条件5使得每头牛最多只能选择一种饮料和食物</li>\n</ul>\n<p>这里  最大流使用的是dinic算法。。</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint EDGE_NUM =20001;//边数</span><br><span class=\"line\">constint POINT_NUM =501;//点数</span><br><span class=\"line\">struct edge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int v;//点</span><br><span class=\"line\">int next;//下一边</span><br><span class=\"line\">int value;//当前边流量</span><br><span class=\"line\">&#125;edge[2*EDGE_NUM];//边信息，以邻接表形式存储</span><br><span class=\"line\">int p[POINT_NUM];//p[i]记录最后一条以i为起点的边的id,即以i为起点的最后一条边为edge[p[i]],而edge[p[i]].next则为以i为起点的倒数第二条边，以此类推</span><br><span class=\"line\">int level[POINT_NUM];//level[i]记录i点的层次</span><br><span class=\"line\">int que[POINT_NUM],out[POINT_NUM];//辅助数组</span><br><span class=\"line\">int edgeNumber;</span><br><span class=\"line\">void init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> edgeNumber =0;</span><br><span class=\"line\"> memset(p,-1,sizeof(p));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inline void addEdge(int from,int to,int value)//添加边，以邻接表形式存储</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> edge[edgeNumber].v = to;</span><br><span class=\"line\"> edge[edgeNumber].value = value;</span><br><span class=\"line\"> edge[edgeNumber].next = p[from];</span><br><span class=\"line\"> p[from] = edgeNumber++;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int Dinic(int source,int sink,int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int i,maxFlow =0;</span><br><span class=\"line\"> while(true)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int head,tail;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)level[i] =0;</span><br><span class=\"line\">  level[source] =1;//源点为第一层</span><br><span class=\"line\">  head =0;tail =0;</span><br><span class=\"line\">  que[0] = source;//que这里当队里使用</span><br><span class=\"line\">while(head&lt;=tail)//BFS该剩余图，计算每个可达点层次</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   int cur = que[head++];</span><br><span class=\"line\">   for(i=p[cur];i!=-1;i=edge[i].next)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    if(edge[i].value&gt;0&amp;&amp;level[edge[i].v]==0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     level[edge[i].v] = level[cur]+1;</span><br><span class=\"line\">     que[++tail] = edge[i].v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  if(level[sink]==0)break;//不存在增广路</span><br><span class=\"line\"></span><br><span class=\"line\">  for(i=0;i&lt;n;i++)out[i]=p[i];//out[i]动态记录可用边</span><br><span class=\"line\"></span><br><span class=\"line\">  int q =-1;//q为已经搜索到的点的个数,que存放途径边信息</span><br><span class=\"line\">while(true)//DFS剩余图，查找增广路</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   if(q&lt;0)//当前路为空</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">               int cur =out[source];</span><br><span class=\"line\">      for(;cur!=-1;cur=edge[cur].next)//查找第一条边</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">                   if(edge[cur].value&gt;0&amp;&amp;out[edge[cur].v]!=-1&amp;&amp;level[edge[cur].v]==2)//合法第一条边必须满足：1.流量大于0;2.终点有可用边 3:终点层次为2</span><br><span class=\"line\">break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if(cur==-1)break;//找不到第二层，当前剩余图已经没有增广路</span><br><span class=\"line\"></span><br><span class=\"line\">      que[++q]=cur;//存入第一条边id</span><br><span class=\"line\">out[source]=edge[cur].next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   int curnode = edge[que[q]].v;//当前路的终点</span><br><span class=\"line\">   </span><br><span class=\"line\">   if(curnode==sink)//找到一条增广路</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">                int thisflow = edge[que[0]].value;//thisflow为当前增广路的流量</span><br><span class=\"line\">int index =0;//标记最小流量边的id</span><br><span class=\"line\">for(i=1;i&lt;=q;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(thisflow&gt;edge[que[i]].value)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      thisflow=edge[que[i]].value;</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    maxFlow+=thisflow;</span><br><span class=\"line\">    for(i=0;i&lt;=q;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     edge[que[i]].value-=thisflow;</span><br><span class=\"line\">     edge[que[i]^1].value+=thisflow;//与其方向相反的边</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">              </span><br><span class=\"line\">    q = index-1;//查找下一条增广路时可直接使用当前路的前q条边</span><br><span class=\"line\"> </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else//尚未找到汇点</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    int cur =out[curnode];</span><br><span class=\"line\">    for(;cur!=-1;cur=edge[cur].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(edge[cur].value&gt;0&amp;&amp;out[edge[cur].v]!=-1&amp;&amp;level[edge[cur].v]==level[curnode]+1)</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(cur==-1)//没有下一条路</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     out[curnode]=-1;//标记当前点的可达边为0</span><br><span class=\"line\">     q--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     que[++q]=cur;</span><br><span class=\"line\">     out[curnode]=edge[cur].next;//下一次搜索时可达边从edge[cur].next开始查找</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> return maxFlow;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int Nn,Ff,Dd;</span><br><span class=\"line\">   while(scanf(&quot;%d%d%d&quot;,&amp;Nn,&amp;Ff,&amp;Dd)!=EOF)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      init();</span><br><span class=\"line\">      int foodstart =1;</span><br><span class=\"line\">      int cow1 = Ff+2;</span><br><span class=\"line\">      int cow2 = cow1+Nn+1;</span><br><span class=\"line\">      int drinkstart = cow2+Nn+1;</span><br><span class=\"line\">      int end = drinkstart+Dd+1;</span><br><span class=\"line\"></span><br><span class=\"line\">      int i;</span><br><span class=\"line\">      for(i=0;i&lt;Nn;i++)//添加牛边</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">           addEdge(cow1+i,cow2+i,1);</span><br><span class=\"line\">           addEdge(cow2+i,cow1+i,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      for(i=0;i&lt;Ff;i++)//添加食物边</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          addEdge(0,foodstart+i,1);</span><br><span class=\"line\">          addEdge(foodstart+i,0,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      for(i=0;i&lt;Dd;i++)//添加饮料</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          addEdge(drinkstart+i,end,1);</span><br><span class=\"line\">          addEdge(end,drinkstart+i,0);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      for(i=0;i&lt;Nn;i++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          int f,d;</span><br><span class=\"line\">          scanf(&quot;%d%d&quot;,&amp;f,&amp;d);</span><br><span class=\"line\">          int x;</span><br><span class=\"line\">          while(f--)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">             scanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">             x--;</span><br><span class=\"line\">             addEdge(foodstart+x,cow1+i,1);</span><br><span class=\"line\">             addEdge(cow1+i,foodstart+x,0);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          while(d--)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              scanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">              x--;</span><br><span class=\"line\">              addEdge(cow2+i,drinkstart+x,1);</span><br><span class=\"line\">              addEdge(drinkstart+x,cow2+i,0);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      printf(&quot;%d\\n&quot;,Dinic(0,end,end+1));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 3067 Japan【一维树状数组】","keywords":["algorithm","POJ"],"description":"POJ 3067 Japan 解题报告","comments":1,"_content":"\nPOJ 3067 Japan【一维树状数组】\n=========\n\n[POJ 3067 Japan](http://poj.org/problem?id=3067)\n\n核心算法：\n--------\n一维树状数组\n大意\n------\nJapan在东边有n座城市，从北到南编号依次为1,2,3...n\n在西边有m座城市，从北到南编号分别为1,2,3...m\n现要在南北城市之间修建k条超级高速公路，求会出现多少个十字路口\n（注：每个十字路口只能由两条交叉的路所构成）\n输入：\n-------\n```\nT   .....cases数\nn,m,k\n以下k行每行对应于一条高速公路，由两个数字（xi,yi）组成，xi对应于东城编号,yi西城编号\n```\n输出：\n-----\n```\n十字路口数目\n```\n\n分析：\n\n1. 对该数组先按y从大到小排序，若y相等，则按x从大到小排序\n2. 从前往后扫描各条高速公路，对路（xi,yi）其与前面点的交点数目为其左上角路的个数，即所有的(xj,yj),其中xj<xi,yj>yi.\n3. 与poj 2352类似地，用数组数组c[i]存储x轴的信息\n\nAnswer\n---\n```\n#include<stdio.h>\n#include<string.h>\n#include<algorithm>\nusing namespace std;\nconst int N = 1001;\nconst int K = 1000010;\n\n__int64 c[N];\nint n,m,k;\n\nstruct node\n{\n int x,y;\n bool operator <(const node &A){//先按y从大到小排序，若y相同，按x从小到大排序\n if(y==A.y)return x>A.x;\n return y>=A.y;\n }\n}point[K];\ninline int lowbit(int x)\n{\n return x&(-x);\n}\n\nvoid modify(int x,int add)\n{\n   while(x<=n)\n   {\n    c[x]+=add;\n    x+=lowbit(x);\n   }\n}\n__int64 sum(int x)\n{\n __int64 ans=0;\n while(x>0)\n {\n  ans+=c[x];\n  x-=lowbit(x);\n }\n return ans;\n}\nint main()\n{\n int T;\n while(scanf(\"%d\",&T)!=EOF)\n {\n  int cases;\n  for(cases=1;cases<=T;cases++)\n  {\n   memset(c,0,sizeof(c));\n  \n   scanf(\"%d%d%d\",&n,&m,&k);\n   int i;\n   __int64 pnum = 0;//点个数\n   for(i=0;i<k;i++)\n   {\n    int xx,yy;\n    scanf(\"%d%d\",&xx,&yy);\n    \n    {\n    \n     point[pnum].x = xx;\n     point[pnum].y = yy;\n     pnum++;\n    }\n   }\n\n   sort(point,point+pnum);//对其排序\n\n   __int64 ans = 0;\n   for(i=0;i<pnum;i++)\n   {\n      modify(point[i].x,1);\n      ans+=sum(point[i].x-1);\n   }\n           printf(\"Test case %d: %I64d\\n\",cases,ans);\n  }\n }\n return 0;\n}\n```\n","source":"_posts/2011-02-10-Algorithm-POJ-3067-Japan.md","raw":"---\nlayout: post\ntitle: \"POJ 3067 Japan【一维树状数组】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 3067 Japan 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"dp\"]\ncomments: true\n---\n\nPOJ 3067 Japan【一维树状数组】\n=========\n\n[POJ 3067 Japan](http://poj.org/problem?id=3067)\n\n核心算法：\n--------\n一维树状数组\n大意\n------\nJapan在东边有n座城市，从北到南编号依次为1,2,3...n\n在西边有m座城市，从北到南编号分别为1,2,3...m\n现要在南北城市之间修建k条超级高速公路，求会出现多少个十字路口\n（注：每个十字路口只能由两条交叉的路所构成）\n输入：\n-------\n```\nT   .....cases数\nn,m,k\n以下k行每行对应于一条高速公路，由两个数字（xi,yi）组成，xi对应于东城编号,yi西城编号\n```\n输出：\n-----\n```\n十字路口数目\n```\n\n分析：\n\n1. 对该数组先按y从大到小排序，若y相等，则按x从大到小排序\n2. 从前往后扫描各条高速公路，对路（xi,yi）其与前面点的交点数目为其左上角路的个数，即所有的(xj,yj),其中xj<xi,yj>yi.\n3. 与poj 2352类似地，用数组数组c[i]存储x轴的信息\n\nAnswer\n---\n```\n#include<stdio.h>\n#include<string.h>\n#include<algorithm>\nusing namespace std;\nconst int N = 1001;\nconst int K = 1000010;\n\n__int64 c[N];\nint n,m,k;\n\nstruct node\n{\n int x,y;\n bool operator <(const node &A){//先按y从大到小排序，若y相同，按x从小到大排序\n if(y==A.y)return x>A.x;\n return y>=A.y;\n }\n}point[K];\ninline int lowbit(int x)\n{\n return x&(-x);\n}\n\nvoid modify(int x,int add)\n{\n   while(x<=n)\n   {\n    c[x]+=add;\n    x+=lowbit(x);\n   }\n}\n__int64 sum(int x)\n{\n __int64 ans=0;\n while(x>0)\n {\n  ans+=c[x];\n  x-=lowbit(x);\n }\n return ans;\n}\nint main()\n{\n int T;\n while(scanf(\"%d\",&T)!=EOF)\n {\n  int cases;\n  for(cases=1;cases<=T;cases++)\n  {\n   memset(c,0,sizeof(c));\n  \n   scanf(\"%d%d%d\",&n,&m,&k);\n   int i;\n   __int64 pnum = 0;//点个数\n   for(i=0;i<k;i++)\n   {\n    int xx,yy;\n    scanf(\"%d%d\",&xx,&yy);\n    \n    {\n    \n     point[pnum].x = xx;\n     point[pnum].y = yy;\n     pnum++;\n    }\n   }\n\n   sort(point,point+pnum);//对其排序\n\n   __int64 ans = 0;\n   for(i=0;i<pnum;i++)\n   {\n      modify(point[i].x,1);\n      ans+=sum(point[i].x-1);\n   }\n           printf(\"Test case %d: %I64d\\n\",cases,ans);\n  }\n }\n return 0;\n}\n```\n","slug":"2011-02-10-Algorithm-POJ-3067-Japan","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgn0015qj7lonzq37ne","content":"<h1 id=\"POJ-3067-Japan【一维树状数组】\"><a href=\"#POJ-3067-Japan【一维树状数组】\" class=\"headerlink\" title=\"POJ 3067 Japan【一维树状数组】\"></a>POJ 3067 Japan【一维树状数组】</h1><p><a href=\"http://poj.org/problem?id=3067\" target=\"_blank\" rel=\"external\">POJ 3067 Japan</a></p>\n<h2 id=\"核心算法：\"><a href=\"#核心算法：\" class=\"headerlink\" title=\"核心算法：\"></a>核心算法：</h2><p>一维树状数组</p>\n<h2 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h2><p>Japan在东边有n座城市，从北到南编号依次为1,2,3…n<br>在西边有m座城市，从北到南编号分别为1,2,3…m<br>现要在南北城市之间修建k条超级高速公路，求会出现多少个十字路口<br>（注：每个十字路口只能由两条交叉的路所构成）</p>\n<h2 id=\"输入：\"><a href=\"#输入：\" class=\"headerlink\" title=\"输入：\"></a>输入：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T   .....cases数</span><br><span class=\"line\">n,m,k</span><br><span class=\"line\">以下k行每行对应于一条高速公路，由两个数字（xi,yi）组成，xi对应于东城编号,yi西城编号</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出：\"><a href=\"#输出：\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十字路口数目</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<ol>\n<li>对该数组先按y从大到小排序，若y相等，则按x从大到小排序</li>\n<li>从前往后扫描各条高速公路，对路（xi,yi）其与前面点的交点数目为其左上角路的个数，即所有的(xj,yj),其中xj<xi,yj>yi.</xi,yj></li>\n<li>与poj 2352类似地，用数组数组c[i]存储x轴的信息</li>\n</ol>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int N = 1001;</span><br><span class=\"line\">const int K = 1000010;</span><br><span class=\"line\"></span><br><span class=\"line\">__int64 c[N];</span><br><span class=\"line\">int n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int x,y;</span><br><span class=\"line\"> bool operator &lt;(const node &amp;A)&#123;//先按y从大到小排序，若y相同，按x从小到大排序</span><br><span class=\"line\"> if(y==A.y)return x&gt;A.x;</span><br><span class=\"line\"> return y&gt;=A.y;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;point[K];</span><br><span class=\"line\">inline int lowbit(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> return x&amp;(-x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void modify(int x,int add)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   while(x&lt;=n)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    c[x]+=add;</span><br><span class=\"line\">    x+=lowbit(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">__int64 sum(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 ans=0;</span><br><span class=\"line\"> while(x&gt;0)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ans+=c[x];</span><br><span class=\"line\">  x-=lowbit(x);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int T;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int cases;</span><br><span class=\"line\">  for(cases=1;cases&lt;=T;cases++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   memset(c,0,sizeof(c));</span><br><span class=\"line\">  </span><br><span class=\"line\">   scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k);</span><br><span class=\"line\">   int i;</span><br><span class=\"line\">   __int64 pnum = 0;//点个数</span><br><span class=\"line\">   for(i=0;i&lt;k;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    int xx,yy;</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;,&amp;xx,&amp;yy);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">     point[pnum].x = xx;</span><br><span class=\"line\">     point[pnum].y = yy;</span><br><span class=\"line\">     pnum++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   sort(point,point+pnum);//对其排序</span><br><span class=\"line\"></span><br><span class=\"line\">   __int64 ans = 0;</span><br><span class=\"line\">   for(i=0;i&lt;pnum;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      modify(point[i].x,1);</span><br><span class=\"line\">      ans+=sum(point[i].x-1);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">           printf(&quot;Test case %d: %I64d\\n&quot;,cases,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"POJ-3067-Japan【一维树状数组】\"><a href=\"#POJ-3067-Japan【一维树状数组】\" class=\"headerlink\" title=\"POJ 3067 Japan【一维树状数组】\"></a>POJ 3067 Japan【一维树状数组】</h1><p><a href=\"http://poj.org/problem?id=3067\">POJ 3067 Japan</a></p>\n<h2 id=\"核心算法：\"><a href=\"#核心算法：\" class=\"headerlink\" title=\"核心算法：\"></a>核心算法：</h2><p>一维树状数组</p>\n<h2 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h2><p>Japan在东边有n座城市，从北到南编号依次为1,2,3…n<br>在西边有m座城市，从北到南编号分别为1,2,3…m<br>现要在南北城市之间修建k条超级高速公路，求会出现多少个十字路口<br>（注：每个十字路口只能由两条交叉的路所构成）</p>\n<h2 id=\"输入：\"><a href=\"#输入：\" class=\"headerlink\" title=\"输入：\"></a>输入：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T   .....cases数</span><br><span class=\"line\">n,m,k</span><br><span class=\"line\">以下k行每行对应于一条高速公路，由两个数字（xi,yi）组成，xi对应于东城编号,yi西城编号</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出：\"><a href=\"#输出：\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十字路口数目</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<ol>\n<li>对该数组先按y从大到小排序，若y相等，则按x从大到小排序</li>\n<li>从前往后扫描各条高速公路，对路（xi,yi）其与前面点的交点数目为其左上角路的个数，即所有的(xj,yj),其中xj<xi,yj>yi.</li>\n<li>与poj 2352类似地，用数组数组c[i]存储x轴的信息</li>\n</ol>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int N = 1001;</span><br><span class=\"line\">const int K = 1000010;</span><br><span class=\"line\"></span><br><span class=\"line\">__int64 c[N];</span><br><span class=\"line\">int n,m,k;</span><br><span class=\"line\"></span><br><span class=\"line\">struct node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int x,y;</span><br><span class=\"line\"> bool operator &lt;(const node &amp;A)&#123;//先按y从大到小排序，若y相同，按x从小到大排序</span><br><span class=\"line\"> if(y==A.y)return x&gt;A.x;</span><br><span class=\"line\"> return y&gt;=A.y;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;point[K];</span><br><span class=\"line\">inline int lowbit(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> return x&amp;(-x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void modify(int x,int add)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   while(x&lt;=n)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    c[x]+=add;</span><br><span class=\"line\">    x+=lowbit(x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">__int64 sum(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> __int64 ans=0;</span><br><span class=\"line\"> while(x&gt;0)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ans+=c[x];</span><br><span class=\"line\">  x-=lowbit(x);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int T;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int cases;</span><br><span class=\"line\">  for(cases=1;cases&lt;=T;cases++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   memset(c,0,sizeof(c));</span><br><span class=\"line\">  </span><br><span class=\"line\">   scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k);</span><br><span class=\"line\">   int i;</span><br><span class=\"line\">   __int64 pnum = 0;//点个数</span><br><span class=\"line\">   for(i=0;i&lt;k;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    int xx,yy;</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;,&amp;xx,&amp;yy);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">     point[pnum].x = xx;</span><br><span class=\"line\">     point[pnum].y = yy;</span><br><span class=\"line\">     pnum++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   sort(point,point+pnum);//对其排序</span><br><span class=\"line\"></span><br><span class=\"line\">   __int64 ans = 0;</span><br><span class=\"line\">   for(i=0;i&lt;pnum;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      modify(point[i].x,1);</span><br><span class=\"line\">      ans+=sum(point[i].x-1);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">           printf(&quot;Test case %d: %I64d\\n&quot;,cases,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 1948 Triangular Pastures[二维01背包]","keywords":["algorithm","POJ"],"description":"背包问题--POJ 1948 Triangular Pastures 解题报告","comments":1,"_content":"\n\n[POJ 1948 Triangular Pastures](http://poj.org/problem?id=1948)\n\n# 题目描述：\n>给最多40根木棍，每根长度不超过40，\n>要用完所有的木棍构成面积最大的三角形，\n>求出最大的面积。\n\n# 算法核心\n\n二维01背包\n \n***使用到海伦公式***：\n\n\n  已知三角形的三边长度a,b,c,求面积\n  S=√[p(p-a)(p-b)(p-c)] \n  而公式里的p为半周长： \n  p=(a+b+c)/2\n\n# 分析：\n用dp[i][j][k]表示到第i根木棒能否摆出边长分别为j,k的三角形\n     易得 \n     \n``` \ndp[i][j][k] = dp[i-1][j-x[i]][k]|dp[i-1][j][k-x[i]]|dp[i-1][j][k];\n```\n\n  简单的\n  空间压缩，化为二维dp，注意：这里每根木棒只能使用一次，\n  是01背包，要倒着扫（刚开始错在这里了。。。）\n  \n# Answer\n\n```\n#include<stdio.h>\n#include<string.h>\n#include<math.h>\nconstint N =801;\nbool dp[N][N];//dp[i][j]表示取两边分别为i,j可达\nint x[N];\nint main()\n{\n int n;\n while(scanf(\"%d\",&n)!=EOF)\n {\n  int i,j,k;\n  int sum =0;\n  for(i=0;i<n;i++)\n  {\n   scanf(\"%d\",&x[i]);\n   sum+=x[i];\n  }\n\n  memset(dp,false,sizeof(dp));\n  dp[0][0]=true;\n  int half = sum>>1;\n  for(i=0;i<n;i++)\n   for(j=half;j>=0;j--)\n    for(k=j;k>=0;k--)\n    {\n     if(x[i]<=j)\n     dp[j][k]|=dp[j-x[i]][k];\n     if(k>=x[i])\n      dp[j][k]|=dp[j][k-x[i]];\n    }\n       double ha = sum/2.0;\n    double ans =-1;\n    for(i=0;i<half;i++)\n     for(j=0;j<=i;j++)\n     {\n      if(dp[i][j])\n      {\n       k=sum-i-j;\n       if(i+j>k&&i+k>j&&k+j>i)\n       {\n        double temp = ha*(ha-i)*(ha-j)*(ha-k);\n        if(temp>ans)ans=temp;\n       }\n      }\n     }\n\n     intout;\n     if(ans<0)out=-1;\n        else\n     out= (int)(sqrt(ans)*100);\n \n   printf(\"%d\\n\",out);\n }\n return0;\n}\n\n```\n","source":"_posts/2011-02-11-Algorithm-POJ-1948-Triangular-Pastures.md","raw":"---\nlayout: post\ntitle: \"POJ 1948 Triangular Pastures[二维01背包]\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"背包问题--POJ 1948 Triangular Pastures 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"dp\"]\ncomments: true\n---\n\n\n[POJ 1948 Triangular Pastures](http://poj.org/problem?id=1948)\n\n# 题目描述：\n>给最多40根木棍，每根长度不超过40，\n>要用完所有的木棍构成面积最大的三角形，\n>求出最大的面积。\n\n# 算法核心\n\n二维01背包\n \n***使用到海伦公式***：\n\n\n  已知三角形的三边长度a,b,c,求面积\n  S=√[p(p-a)(p-b)(p-c)] \n  而公式里的p为半周长： \n  p=(a+b+c)/2\n\n# 分析：\n用dp[i][j][k]表示到第i根木棒能否摆出边长分别为j,k的三角形\n     易得 \n     \n``` \ndp[i][j][k] = dp[i-1][j-x[i]][k]|dp[i-1][j][k-x[i]]|dp[i-1][j][k];\n```\n\n  简单的\n  空间压缩，化为二维dp，注意：这里每根木棒只能使用一次，\n  是01背包，要倒着扫（刚开始错在这里了。。。）\n  \n# Answer\n\n```\n#include<stdio.h>\n#include<string.h>\n#include<math.h>\nconstint N =801;\nbool dp[N][N];//dp[i][j]表示取两边分别为i,j可达\nint x[N];\nint main()\n{\n int n;\n while(scanf(\"%d\",&n)!=EOF)\n {\n  int i,j,k;\n  int sum =0;\n  for(i=0;i<n;i++)\n  {\n   scanf(\"%d\",&x[i]);\n   sum+=x[i];\n  }\n\n  memset(dp,false,sizeof(dp));\n  dp[0][0]=true;\n  int half = sum>>1;\n  for(i=0;i<n;i++)\n   for(j=half;j>=0;j--)\n    for(k=j;k>=0;k--)\n    {\n     if(x[i]<=j)\n     dp[j][k]|=dp[j-x[i]][k];\n     if(k>=x[i])\n      dp[j][k]|=dp[j][k-x[i]];\n    }\n       double ha = sum/2.0;\n    double ans =-1;\n    for(i=0;i<half;i++)\n     for(j=0;j<=i;j++)\n     {\n      if(dp[i][j])\n      {\n       k=sum-i-j;\n       if(i+j>k&&i+k>j&&k+j>i)\n       {\n        double temp = ha*(ha-i)*(ha-j)*(ha-k);\n        if(temp>ans)ans=temp;\n       }\n      }\n     }\n\n     intout;\n     if(ans<0)out=-1;\n        else\n     out= (int)(sqrt(ans)*100);\n \n   printf(\"%d\\n\",out);\n }\n return0;\n}\n\n```\n","slug":"2011-02-11-Algorithm-POJ-1948-Triangular-Pastures","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgr0019qj7lwhd8hn33","content":"<p><a href=\"http://poj.org/problem?id=1948\" target=\"_blank\" rel=\"external\">POJ 1948 Triangular Pastures</a></p>\n<h1 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h1><blockquote>\n<p>给最多40根木棍，每根长度不超过40，<br>要用完所有的木棍构成面积最大的三角形，<br>求出最大的面积。</p>\n</blockquote>\n<h1 id=\"算法核心\"><a href=\"#算法核心\" class=\"headerlink\" title=\"算法核心\"></a>算法核心</h1><p>二维01背包</p>\n<p><strong><em>使用到海伦公式</em></strong>：</p>\n<p>  已知三角形的三边长度a,b,c,求面积<br>  S=√[p(p-a)(p-b)(p-c)]<br>  而公式里的p为半周长：<br>  p=(a+b+c)/2</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>用dp[i][j][k]表示到第i根木棒能否摆出边长分别为j,k的三角形<br>     易得 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i][j][k] = dp[i-1][j-x[i]][k]|dp[i-1][j][k-x[i]]|dp[i-1][j][k];</span><br></pre></td></tr></table></figure>\n<p>  简单的<br>  空间压缩，化为二维dp，注意：这里每根木棒只能使用一次，<br>  是01背包，要倒着扫（刚开始错在这里了。。。）</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;math.h&gt;</span><br><span class=\"line\">constint N =801;</span><br><span class=\"line\">bool dp[N][N];//dp[i][j]表示取两边分别为i,j可达</span><br><span class=\"line\">int x[N];</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int n;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;n)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int i,j,k;</span><br><span class=\"line\">  int sum =0;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   scanf(&quot;%d&quot;,&amp;x[i]);</span><br><span class=\"line\">   sum+=x[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  memset(dp,false,sizeof(dp));</span><br><span class=\"line\">  dp[0][0]=true;</span><br><span class=\"line\">  int half = sum&gt;&gt;1;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">   for(j=half;j&gt;=0;j--)</span><br><span class=\"line\">    for(k=j;k&gt;=0;k--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(x[i]&lt;=j)</span><br><span class=\"line\">     dp[j][k]|=dp[j-x[i]][k];</span><br><span class=\"line\">     if(k&gt;=x[i])</span><br><span class=\"line\">      dp[j][k]|=dp[j][k-x[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       double ha = sum/2.0;</span><br><span class=\"line\">    double ans =-1;</span><br><span class=\"line\">    for(i=0;i&lt;half;i++)</span><br><span class=\"line\">     for(j=0;j&lt;=i;j++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      if(dp[i][j])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       k=sum-i-j;</span><br><span class=\"line\">       if(i+j&gt;k&amp;&amp;i+k&gt;j&amp;&amp;k+j&gt;i)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        double temp = ha*(ha-i)*(ha-j)*(ha-k);</span><br><span class=\"line\">        if(temp&gt;ans)ans=temp;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     intout;</span><br><span class=\"line\">     if(ans&lt;0)out=-1;</span><br><span class=\"line\">        else</span><br><span class=\"line\">     out= (int)(sqrt(ans)*100);</span><br><span class=\"line\"> </span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,out);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=1948\">POJ 1948 Triangular Pastures</a></p>\n<h1 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h1><blockquote>\n<p>给最多40根木棍，每根长度不超过40，<br>要用完所有的木棍构成面积最大的三角形，<br>求出最大的面积。</p>\n</blockquote>\n<h1 id=\"算法核心\"><a href=\"#算法核心\" class=\"headerlink\" title=\"算法核心\"></a>算法核心</h1><p>二维01背包</p>\n<p><strong><em>使用到海伦公式</em></strong>：</p>\n<p>  已知三角形的三边长度a,b,c,求面积<br>  S=√[p(p-a)(p-b)(p-c)]<br>  而公式里的p为半周长：<br>  p=(a+b+c)/2</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>用dp[i][j][k]表示到第i根木棒能否摆出边长分别为j,k的三角形<br>     易得 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i][j][k] = dp[i-1][j-x[i]][k]|dp[i-1][j][k-x[i]]|dp[i-1][j][k];</span><br></pre></td></tr></table></figure>\n<p>  简单的<br>  空间压缩，化为二维dp，注意：这里每根木棒只能使用一次，<br>  是01背包，要倒着扫（刚开始错在这里了。。。）</p>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;math.h&gt;</span><br><span class=\"line\">constint N =801;</span><br><span class=\"line\">bool dp[N][N];//dp[i][j]表示取两边分别为i,j可达</span><br><span class=\"line\">int x[N];</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int n;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;n)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  int i,j,k;</span><br><span class=\"line\">  int sum =0;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   scanf(&quot;%d&quot;,&amp;x[i]);</span><br><span class=\"line\">   sum+=x[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  memset(dp,false,sizeof(dp));</span><br><span class=\"line\">  dp[0][0]=true;</span><br><span class=\"line\">  int half = sum&gt;&gt;1;</span><br><span class=\"line\">  for(i=0;i&lt;n;i++)</span><br><span class=\"line\">   for(j=half;j&gt;=0;j--)</span><br><span class=\"line\">    for(k=j;k&gt;=0;k--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     if(x[i]&lt;=j)</span><br><span class=\"line\">     dp[j][k]|=dp[j-x[i]][k];</span><br><span class=\"line\">     if(k&gt;=x[i])</span><br><span class=\"line\">      dp[j][k]|=dp[j][k-x[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       double ha = sum/2.0;</span><br><span class=\"line\">    double ans =-1;</span><br><span class=\"line\">    for(i=0;i&lt;half;i++)</span><br><span class=\"line\">     for(j=0;j&lt;=i;j++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">      if(dp[i][j])</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">       k=sum-i-j;</span><br><span class=\"line\">       if(i+j&gt;k&amp;&amp;i+k&gt;j&amp;&amp;k+j&gt;i)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">        double temp = ha*(ha-i)*(ha-j)*(ha-k);</span><br><span class=\"line\">        if(temp&gt;ans)ans=temp;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     intout;</span><br><span class=\"line\">     if(ans&lt;0)out=-1;</span><br><span class=\"line\">        else</span><br><span class=\"line\">     out= (int)(sqrt(ans)*100);</span><br><span class=\"line\"> </span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,out);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"POJ 1681 Painter's Problem【状态压缩，枚举】","keywords":["algorithm","POJ"],"description":"POJ 1681 Painter's Problem 解题报告","comments":1,"_content":"\n[POJ 1681 Painter's Problem](http://poj.org/problem?id=1681)\n\n# 算法核心：\n\n状态压缩，枚举\n\n# 大意：\n\n有一面n*n的墙，对其中某一格子上色，则其上、下、左、右及自身的颜色均变色，颜色仅有黄色和白色两种，已知墙面信息，问能否将墙面全部变为黄色，若能，至少需要涂色几次？\n\n# 分析：\n\n1. 通过状态压缩，枚举第一行的着色网格\n2. 通过已知的第一行着色状态，根据上层信息依次推得下层着色状态\n3. 对2退出的第n层着色状态进行判断，若合法，更新当前最小值。\n\n# Answer\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint N =17;\nconstint inf =99999;\nbool graph[N][N];//graph[i][j]存储最初的颜色，黄色为0，白色为1\nbool swap[N][N];//swap[i][j]存储该格是否进行染色\nint main()\n{\n int T;\n while(scanf(\"%d\",&T)!=EOF)\n {\n  while(T--)\n  {\n   int n;\n   scanf(\"%d\",&n);\n   long upper =1<<n;\n   long cur,i,j;\n   char str[N];\n   memset(graph,0,sizeof(graph));\n   for(i=1;i<=n;i++)\n   {\n    scanf(\"%s\",str);\n    for(j=0;j<n;j++)\n    {\n                  if(str[j]=='w')graph[i][j+1]=true;\n    }\n   }\n   int ans = inf;\n   for(cur=0;cur<upper;cur++)//枚举第一行按钮状态\n   {\n    memset(swap,false,sizeof(swap));\n    long tcur = cur;\n    for(i=1;i<=n;i++)\n    {\n     swap[1][i]=cur&1;\n     cur>>=1;\n    }\n               cur=tcur;\n    for(i=2;i<=n;i++)\n    {\n                      for(j=1;j<=n;j++)\n        swap[i][j]=(graph[i-1][j]^swap[i-1][j]^swap[i-1][j-1]^swap[i-1][j+1]^swap[i-2][j]);\n    }\n\n    bool flag =true;\n       \n    for(i=1;i<=n;i++)\n     if(swap[n][i]^swap[n-1][i]^swap[n][i-1]^swap[n][i+1]^graph[n][i]){\n     flag=false;\n     break;\n     }\n\n    if(flag)\n    {\n                   int step=0;\n       for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n         if(swap[i][j])\n         step++;\n\n        if(step<ans)ans=step;\n    }\n   }\n\n            if(ans==inf)printf(\"inf\\n\");\n   else\n    printf(\"%d\\n\",ans);\n  }\n \n }\n return0;\n}\n```\n","source":"_posts/2011-02-11-POJ-1681-Painter's-Problem.md","raw":"---\nlayout: post\ntitle: \"POJ 1681 Painter's Problem【状态压缩，枚举】\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"POJ 1681 Painter's Problem 解题报告\"\ncategory: \"algorithm\"\ntags: [\"ACM\",\"dp\"]\ncomments: true \n---\n\n[POJ 1681 Painter's Problem](http://poj.org/problem?id=1681)\n\n# 算法核心：\n\n状态压缩，枚举\n\n# 大意：\n\n有一面n*n的墙，对其中某一格子上色，则其上、下、左、右及自身的颜色均变色，颜色仅有黄色和白色两种，已知墙面信息，问能否将墙面全部变为黄色，若能，至少需要涂色几次？\n\n# 分析：\n\n1. 通过状态压缩，枚举第一行的着色网格\n2. 通过已知的第一行着色状态，根据上层信息依次推得下层着色状态\n3. 对2退出的第n层着色状态进行判断，若合法，更新当前最小值。\n\n# Answer\n\n```\n#include<stdio.h>\n#include<string.h>\nconstint N =17;\nconstint inf =99999;\nbool graph[N][N];//graph[i][j]存储最初的颜色，黄色为0，白色为1\nbool swap[N][N];//swap[i][j]存储该格是否进行染色\nint main()\n{\n int T;\n while(scanf(\"%d\",&T)!=EOF)\n {\n  while(T--)\n  {\n   int n;\n   scanf(\"%d\",&n);\n   long upper =1<<n;\n   long cur,i,j;\n   char str[N];\n   memset(graph,0,sizeof(graph));\n   for(i=1;i<=n;i++)\n   {\n    scanf(\"%s\",str);\n    for(j=0;j<n;j++)\n    {\n                  if(str[j]=='w')graph[i][j+1]=true;\n    }\n   }\n   int ans = inf;\n   for(cur=0;cur<upper;cur++)//枚举第一行按钮状态\n   {\n    memset(swap,false,sizeof(swap));\n    long tcur = cur;\n    for(i=1;i<=n;i++)\n    {\n     swap[1][i]=cur&1;\n     cur>>=1;\n    }\n               cur=tcur;\n    for(i=2;i<=n;i++)\n    {\n                      for(j=1;j<=n;j++)\n        swap[i][j]=(graph[i-1][j]^swap[i-1][j]^swap[i-1][j-1]^swap[i-1][j+1]^swap[i-2][j]);\n    }\n\n    bool flag =true;\n       \n    for(i=1;i<=n;i++)\n     if(swap[n][i]^swap[n-1][i]^swap[n][i-1]^swap[n][i+1]^graph[n][i]){\n     flag=false;\n     break;\n     }\n\n    if(flag)\n    {\n                   int step=0;\n       for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n         if(swap[i][j])\n         step++;\n\n        if(step<ans)ans=step;\n    }\n   }\n\n            if(ans==inf)printf(\"inf\\n\");\n   else\n    printf(\"%d\\n\",ans);\n  }\n \n }\n return0;\n}\n```\n","slug":"2011-02-11-POJ-1681-Painter's-Problem","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgt001cqj7l1haxl7bi","content":"<p><a href=\"http://poj.org/problem?id=1681\" target=\"_blank\" rel=\"external\">POJ 1681 Painter’s Problem</a></p>\n<h1 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h1><p>状态压缩，枚举</p>\n<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>有一面n*n的墙，对其中某一格子上色，则其上、下、左、右及自身的颜色均变色，颜色仅有黄色和白色两种，已知墙面信息，问能否将墙面全部变为黄色，若能，至少需要涂色几次？</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><ol>\n<li>通过状态压缩，枚举第一行的着色网格</li>\n<li>通过已知的第一行着色状态，根据上层信息依次推得下层着色状态</li>\n<li>对2退出的第n层着色状态进行判断，若合法，更新当前最小值。</li>\n</ol>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =17;</span><br><span class=\"line\">constint inf =99999;</span><br><span class=\"line\">bool graph[N][N];//graph[i][j]存储最初的颜色，黄色为0，白色为1</span><br><span class=\"line\">bool swap[N][N];//swap[i][j]存储该格是否进行染色</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int T;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  while(T--)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   int n;</span><br><span class=\"line\">   scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">   long upper =1&lt;&lt;n;</span><br><span class=\"line\">   long cur,i,j;</span><br><span class=\"line\">   char str[N];</span><br><span class=\"line\">   memset(graph,0,sizeof(graph));</span><br><span class=\"line\">   for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    scanf(&quot;%s&quot;,str);</span><br><span class=\"line\">    for(j=0;j&lt;n;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                  if(str[j]==&apos;w&apos;)graph[i][j+1]=true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   int ans = inf;</span><br><span class=\"line\">   for(cur=0;cur&lt;upper;cur++)//枚举第一行按钮状态</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    memset(swap,false,sizeof(swap));</span><br><span class=\"line\">    long tcur = cur;</span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     swap[1][i]=cur&amp;1;</span><br><span class=\"line\">     cur&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">               cur=tcur;</span><br><span class=\"line\">    for(i=2;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                      for(j=1;j&lt;=n;j++)</span><br><span class=\"line\">        swap[i][j]=(graph[i-1][j]^swap[i-1][j]^swap[i-1][j-1]^swap[i-1][j+1]^swap[i-2][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    bool flag =true;</span><br><span class=\"line\">       </span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">     if(swap[n][i]^swap[n-1][i]^swap[n][i-1]^swap[n][i+1]^graph[n][i])&#123;</span><br><span class=\"line\">     flag=false;</span><br><span class=\"line\">     break;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(flag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                   int step=0;</span><br><span class=\"line\">       for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">        for(j=1;j&lt;=n;j++)</span><br><span class=\"line\">         if(swap[i][j])</span><br><span class=\"line\">         step++;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(step&lt;ans)ans=step;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(ans==inf)printf(&quot;inf\\n&quot;);</span><br><span class=\"line\">   else</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://poj.org/problem?id=1681\">POJ 1681 Painter’s Problem</a></p>\n<h1 id=\"算法核心：\"><a href=\"#算法核心：\" class=\"headerlink\" title=\"算法核心：\"></a>算法核心：</h1><p>状态压缩，枚举</p>\n<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>有一面n*n的墙，对其中某一格子上色，则其上、下、左、右及自身的颜色均变色，颜色仅有黄色和白色两种，已知墙面信息，问能否将墙面全部变为黄色，若能，至少需要涂色几次？</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><ol>\n<li>通过状态压缩，枚举第一行的着色网格</li>\n<li>通过已知的第一行着色状态，根据上层信息依次推得下层着色状态</li>\n<li>对2退出的第n层着色状态进行判断，若合法，更新当前最小值。</li>\n</ol>\n<h1 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">constint N =17;</span><br><span class=\"line\">constint inf =99999;</span><br><span class=\"line\">bool graph[N][N];//graph[i][j]存储最初的颜色，黄色为0，白色为1</span><br><span class=\"line\">bool swap[N][N];//swap[i][j]存储该格是否进行染色</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int T;</span><br><span class=\"line\"> while(scanf(&quot;%d&quot;,&amp;T)!=EOF)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  while(T--)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   int n;</span><br><span class=\"line\">   scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">   long upper =1&lt;&lt;n;</span><br><span class=\"line\">   long cur,i,j;</span><br><span class=\"line\">   char str[N];</span><br><span class=\"line\">   memset(graph,0,sizeof(graph));</span><br><span class=\"line\">   for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    scanf(&quot;%s&quot;,str);</span><br><span class=\"line\">    for(j=0;j&lt;n;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                  if(str[j]==&apos;w&apos;)graph[i][j+1]=true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   int ans = inf;</span><br><span class=\"line\">   for(cur=0;cur&lt;upper;cur++)//枚举第一行按钮状态</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    memset(swap,false,sizeof(swap));</span><br><span class=\"line\">    long tcur = cur;</span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     swap[1][i]=cur&amp;1;</span><br><span class=\"line\">     cur&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">               cur=tcur;</span><br><span class=\"line\">    for(i=2;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                      for(j=1;j&lt;=n;j++)</span><br><span class=\"line\">        swap[i][j]=(graph[i-1][j]^swap[i-1][j]^swap[i-1][j-1]^swap[i-1][j+1]^swap[i-2][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    bool flag =true;</span><br><span class=\"line\">       </span><br><span class=\"line\">    for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">     if(swap[n][i]^swap[n-1][i]^swap[n][i-1]^swap[n][i+1]^graph[n][i])&#123;</span><br><span class=\"line\">     flag=false;</span><br><span class=\"line\">     break;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(flag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                   int step=0;</span><br><span class=\"line\">       for(i=1;i&lt;=n;i++)</span><br><span class=\"line\">        for(j=1;j&lt;=n;j++)</span><br><span class=\"line\">         if(swap[i][j])</span><br><span class=\"line\">         step++;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(step&lt;ans)ans=step;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(ans==inf)printf(&quot;inf\\n&quot;);</span><br><span class=\"line\">   else</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;,ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> return0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"SkipList","keywords":["levigo","leveldb","go"],"description":"SkipList","comments":1,"_content":"\n# SkipList\n\n<ul>\n<li><a href=\"#skiplist\">SkipList</a><ul>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#特征\">特征</a></li>\n<li><a href=\"#构造过程\">构造过程</a></li>\n<li><a href=\"#复杂度\">复杂度</a></li>\n<li><a href=\"#复杂度证明\">复杂度证明</a><ul>\n<li><a href=\"#空间复杂度-on\">空间复杂度 O(n)</a></li>\n<li><a href=\"#skip-list高度\">Skip List高度</a></li>\n</ul>\n</li>\n<li><a href=\"#实现源码\">实现源码</a></li>\n<li><a href=\"#参考资料\">参考资料</a></li>\n</ul>\n</li>\n</ul>\n\n## 概述\n\n跳表是个概率性数据结构，可以被看作是二叉树的一个变种。跳表是由William Pugh在1990年发明的。它是一种用户维护有序元素的数据结构。\n\n## 特征\n\n一个跳表，应该具有以下特征：\n1. 一个跳表应该有几个层（level）组成；\n2. 跳表的第一层包含所有的元素；\n3. 每一层都是一个有序的链表；\n4. 如果元素x出现在第i层，则所有比i小的层都包含x；\n5. 第i层的元素通过一个down指针指向下一层拥有相同值的元素；\n6. 在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；\n7. Top指针指向最高层的第一个元素。\n\n## 构造过程\n\n跳表的构造过程是：\n1. 给定一个有序的链表。\n2. 选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。\n3. 为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素\n4. 重复2、3步，直到不再能选择出除最大最小元素以外的元素。\n\n## 复杂度\n\n1. The expected number of levels is O( log n )\n(here n is the numer of elements)\n2. The expected time for insert/delete/find is O( log n )\n3. The expected size (number of cells) is O(n )\n\n## 复杂度证明\n\n关于时空效率的证明：\n\n### 空间复杂度 O(n)\n\n对于每层的期待：第一层n，第二层n/2，第三层n/22，...，直到 n/2log n=1。所以，总空间需求：\nS = n + n/2 + n/22 + ... + n/2log n < n(1 + 1/2 + 1/22 + ... + 1/2∞) =2n\n因此他的空间复杂度为 2n = O(n)\n\n### Skip List高度\n\n对每层来说，它会向上增长的概率为1/2，则第m层向上增长的概率为1/2m；n个元素，则在m层元素数目的期待为Em = n/2m；当Em = 1，m = log2n即为层数的期待。故其高度期待为 Eh = O(log n)。\n*关于“高概率（high probability）”的定义：\n对于事件A，如果它发生的概率至少为1-cα/nα，其中cα仅取决于α，那么我们称它为高概率。\n在牺牲时间和/或空间的情况下，我们可以选择α的值。\n\n1. 查找的复杂度：\nclaim：在高概率的前提下，查找的时间复杂度为O(log n)\n2.  插入的复杂度：\nclaim：在高概率的前提下，插入的时间复杂度为O(log n)\n首先通过查找找到要插入的位置：O(log n)\n之后进行插入，同时对每层进行对应的更新（依照概率决定是否向上增长）：o(log n)\n\n3.  删除的复杂度：\nclaim：在高概率的前提下，删除的时间复杂度为O(log n)\n\n## 实现源码\n\n[skiplist.cpp](https://github.com/AndreMouche/algorithms_study/blob/master/data_structure/skiplist.cpp)\n\n## 参考资料\nhttp://www.kernelchina.org/algorithm/SL.ppt\nhttp://epaperpress.com/sortsearch/skl.html\nhttp://www.spongeliu.com/63.html\nhttp://www.cnblogs.com/flyfy1/archive/2011/02/24/1963347.html\nhttp://courses.csail.mit.edu/6.046/spring04/handouts/skiplists.pdf\n","source":"_posts/2013-08-05-skiplist.md","raw":"---\nlayout: post\ntitle: \"SkipList\"\nkeywords: [\"levigo\", \"leveldb\", \"go\"]\ndescription: \"SkipList\"\ncategory: \"algorithm\"\ntags: [\"leveldb\", \"algorithm\"]\ncomments: true\n---\n\n# SkipList\n\n<ul>\n<li><a href=\"#skiplist\">SkipList</a><ul>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#特征\">特征</a></li>\n<li><a href=\"#构造过程\">构造过程</a></li>\n<li><a href=\"#复杂度\">复杂度</a></li>\n<li><a href=\"#复杂度证明\">复杂度证明</a><ul>\n<li><a href=\"#空间复杂度-on\">空间复杂度 O(n)</a></li>\n<li><a href=\"#skip-list高度\">Skip List高度</a></li>\n</ul>\n</li>\n<li><a href=\"#实现源码\">实现源码</a></li>\n<li><a href=\"#参考资料\">参考资料</a></li>\n</ul>\n</li>\n</ul>\n\n## 概述\n\n跳表是个概率性数据结构，可以被看作是二叉树的一个变种。跳表是由William Pugh在1990年发明的。它是一种用户维护有序元素的数据结构。\n\n## 特征\n\n一个跳表，应该具有以下特征：\n1. 一个跳表应该有几个层（level）组成；\n2. 跳表的第一层包含所有的元素；\n3. 每一层都是一个有序的链表；\n4. 如果元素x出现在第i层，则所有比i小的层都包含x；\n5. 第i层的元素通过一个down指针指向下一层拥有相同值的元素；\n6. 在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；\n7. Top指针指向最高层的第一个元素。\n\n## 构造过程\n\n跳表的构造过程是：\n1. 给定一个有序的链表。\n2. 选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。\n3. 为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素\n4. 重复2、3步，直到不再能选择出除最大最小元素以外的元素。\n\n## 复杂度\n\n1. The expected number of levels is O( log n )\n(here n is the numer of elements)\n2. The expected time for insert/delete/find is O( log n )\n3. The expected size (number of cells) is O(n )\n\n## 复杂度证明\n\n关于时空效率的证明：\n\n### 空间复杂度 O(n)\n\n对于每层的期待：第一层n，第二层n/2，第三层n/22，...，直到 n/2log n=1。所以，总空间需求：\nS = n + n/2 + n/22 + ... + n/2log n < n(1 + 1/2 + 1/22 + ... + 1/2∞) =2n\n因此他的空间复杂度为 2n = O(n)\n\n### Skip List高度\n\n对每层来说，它会向上增长的概率为1/2，则第m层向上增长的概率为1/2m；n个元素，则在m层元素数目的期待为Em = n/2m；当Em = 1，m = log2n即为层数的期待。故其高度期待为 Eh = O(log n)。\n*关于“高概率（high probability）”的定义：\n对于事件A，如果它发生的概率至少为1-cα/nα，其中cα仅取决于α，那么我们称它为高概率。\n在牺牲时间和/或空间的情况下，我们可以选择α的值。\n\n1. 查找的复杂度：\nclaim：在高概率的前提下，查找的时间复杂度为O(log n)\n2.  插入的复杂度：\nclaim：在高概率的前提下，插入的时间复杂度为O(log n)\n首先通过查找找到要插入的位置：O(log n)\n之后进行插入，同时对每层进行对应的更新（依照概率决定是否向上增长）：o(log n)\n\n3.  删除的复杂度：\nclaim：在高概率的前提下，删除的时间复杂度为O(log n)\n\n## 实现源码\n\n[skiplist.cpp](https://github.com/AndreMouche/algorithms_study/blob/master/data_structure/skiplist.cpp)\n\n## 参考资料\nhttp://www.kernelchina.org/algorithm/SL.ppt\nhttp://epaperpress.com/sortsearch/skl.html\nhttp://www.spongeliu.com/63.html\nhttp://www.cnblogs.com/flyfy1/archive/2011/02/24/1963347.html\nhttp://courses.csail.mit.edu/6.046/spring04/handouts/skiplists.pdf\n","slug":"2013-08-05-skiplist","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgv001gqj7lgjsb5rv9","content":"<h1 id=\"SkipList\"><a href=\"#SkipList\" class=\"headerlink\" title=\"SkipList\"></a>SkipList</h1><ul><br><li><a href=\"#skiplist\">SkipList</a><ul><br><li><a href=\"#概述\">概述</a></li><br><li><a href=\"#特征\">特征</a></li><br><li><a href=\"#构造过程\">构造过程</a></li><br><li><a href=\"#复杂度\">复杂度</a></li><br><li><a href=\"#复杂度证明\">复杂度证明</a><ul><br><li><a href=\"#空间复杂度-on\">空间复杂度 O(n)</a></li><br><li><a href=\"#skip-list高度\">Skip List高度</a></li><br></ul><br></li><br><li><a href=\"#实现源码\">实现源码</a></li><br><li><a href=\"#参考资料\">参考资料</a></li><br></ul><br></li><br></ul>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>跳表是个概率性数据结构，可以被看作是二叉树的一个变种。跳表是由William Pugh在1990年发明的。它是一种用户维护有序元素的数据结构。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p>一个跳表，应该具有以下特征：</p>\n<ol>\n<li>一个跳表应该有几个层（level）组成；</li>\n<li>跳表的第一层包含所有的元素；</li>\n<li>每一层都是一个有序的链表；</li>\n<li>如果元素x出现在第i层，则所有比i小的层都包含x；</li>\n<li>第i层的元素通过一个down指针指向下一层拥有相同值的元素；</li>\n<li>在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；</li>\n<li>Top指针指向最高层的第一个元素。</li>\n</ol>\n<h2 id=\"构造过程\"><a href=\"#构造过程\" class=\"headerlink\" title=\"构造过程\"></a>构造过程</h2><p>跳表的构造过程是：</p>\n<ol>\n<li>给定一个有序的链表。</li>\n<li>选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。</li>\n<li>为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素</li>\n<li>重复2、3步，直到不再能选择出除最大最小元素以外的元素。</li>\n</ol>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><ol>\n<li>The expected number of levels is O( log n )<br>(here n is the numer of elements)</li>\n<li>The expected time for insert/delete/find is O( log n )</li>\n<li>The expected size (number of cells) is O(n )</li>\n</ol>\n<h2 id=\"复杂度证明\"><a href=\"#复杂度证明\" class=\"headerlink\" title=\"复杂度证明\"></a>复杂度证明</h2><p>关于时空效率的证明：</p>\n<h3 id=\"空间复杂度-O-n\"><a href=\"#空间复杂度-O-n\" class=\"headerlink\" title=\"空间复杂度 O(n)\"></a>空间复杂度 O(n)</h3><p>对于每层的期待：第一层n，第二层n/2，第三层n/22，…，直到 n/2log n=1。所以，总空间需求：<br>S = n + n/2 + n/22 + … + n/2log n &lt; n(1 + 1/2 + 1/22 + … + 1/2∞) =2n<br>因此他的空间复杂度为 2n = O(n)</p>\n<h3 id=\"Skip-List高度\"><a href=\"#Skip-List高度\" class=\"headerlink\" title=\"Skip List高度\"></a>Skip List高度</h3><p>对每层来说，它会向上增长的概率为1/2，则第m层向上增长的概率为1/2m；n个元素，则在m层元素数目的期待为Em = n/2m；当Em = 1，m = log2n即为层数的期待。故其高度期待为 Eh = O(log n)。<br>*关于“高概率（high probability）”的定义：<br>对于事件A，如果它发生的概率至少为1-cα/nα，其中cα仅取决于α，那么我们称它为高概率。<br>在牺牲时间和/或空间的情况下，我们可以选择α的值。</p>\n<ol>\n<li>查找的复杂度：<br>claim：在高概率的前提下，查找的时间复杂度为O(log n)</li>\n<li><p>插入的复杂度：<br>claim：在高概率的前提下，插入的时间复杂度为O(log n)<br>首先通过查找找到要插入的位置：O(log n)<br>之后进行插入，同时对每层进行对应的更新（依照概率决定是否向上增长）：o(log n)</p>\n</li>\n<li><p>删除的复杂度：<br>claim：在高概率的前提下，删除的时间复杂度为O(log n)</p>\n</li>\n</ol>\n<h2 id=\"实现源码\"><a href=\"#实现源码\" class=\"headerlink\" title=\"实现源码\"></a>实现源码</h2><p><a href=\"https://github.com/AndreMouche/algorithms_study/blob/master/data_structure/skiplist.cpp\" target=\"_blank\" rel=\"external\">skiplist.cpp</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.kernelchina.org/algorithm/SL.ppt\" target=\"_blank\" rel=\"external\">http://www.kernelchina.org/algorithm/SL.ppt</a><br><a href=\"http://epaperpress.com/sortsearch/skl.html\" target=\"_blank\" rel=\"external\">http://epaperpress.com/sortsearch/skl.html</a><br><a href=\"http://www.spongeliu.com/63.html\" target=\"_blank\" rel=\"external\">http://www.spongeliu.com/63.html</a><br><a href=\"http://www.cnblogs.com/flyfy1/archive/2011/02/24/1963347.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/flyfy1/archive/2011/02/24/1963347.html</a><br><a href=\"http://courses.csail.mit.edu/6.046/spring04/handouts/skiplists.pdf\" target=\"_blank\" rel=\"external\">http://courses.csail.mit.edu/6.046/spring04/handouts/skiplists.pdf</a></p>\n","excerpt":"","more":"<h1 id=\"SkipList\"><a href=\"#SkipList\" class=\"headerlink\" title=\"SkipList\"></a>SkipList</h1><ul><br><li><a href=\"#skiplist\">SkipList</a><ul><br><li><a href=\"#概述\">概述</a></li><br><li><a href=\"#特征\">特征</a></li><br><li><a href=\"#构造过程\">构造过程</a></li><br><li><a href=\"#复杂度\">复杂度</a></li><br><li><a href=\"#复杂度证明\">复杂度证明</a><ul><br><li><a href=\"#空间复杂度-on\">空间复杂度 O(n)</a></li><br><li><a href=\"#skip-list高度\">Skip List高度</a></li><br></ul><br></li><br><li><a href=\"#实现源码\">实现源码</a></li><br><li><a href=\"#参考资料\">参考资料</a></li><br></ul><br></li><br></ul>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>跳表是个概率性数据结构，可以被看作是二叉树的一个变种。跳表是由William Pugh在1990年发明的。它是一种用户维护有序元素的数据结构。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h2><p>一个跳表，应该具有以下特征：</p>\n<ol>\n<li>一个跳表应该有几个层（level）组成；</li>\n<li>跳表的第一层包含所有的元素；</li>\n<li>每一层都是一个有序的链表；</li>\n<li>如果元素x出现在第i层，则所有比i小的层都包含x；</li>\n<li>第i层的元素通过一个down指针指向下一层拥有相同值的元素；</li>\n<li>在每一层中，-1和1两个元素都出现(分别表示INT_MIN和INT_MAX)；</li>\n<li>Top指针指向最高层的第一个元素。</li>\n</ol>\n<h2 id=\"构造过程\"><a href=\"#构造过程\" class=\"headerlink\" title=\"构造过程\"></a>构造过程</h2><p>跳表的构造过程是：</p>\n<ol>\n<li>给定一个有序的链表。</li>\n<li>选择连表中最大和最小的元素，然后从其他元素中按照一定算法随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。</li>\n<li>为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素</li>\n<li>重复2、3步，直到不再能选择出除最大最小元素以外的元素。</li>\n</ol>\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><ol>\n<li>The expected number of levels is O( log n )<br>(here n is the numer of elements)</li>\n<li>The expected time for insert/delete/find is O( log n )</li>\n<li>The expected size (number of cells) is O(n )</li>\n</ol>\n<h2 id=\"复杂度证明\"><a href=\"#复杂度证明\" class=\"headerlink\" title=\"复杂度证明\"></a>复杂度证明</h2><p>关于时空效率的证明：</p>\n<h3 id=\"空间复杂度-O-n\"><a href=\"#空间复杂度-O-n\" class=\"headerlink\" title=\"空间复杂度 O(n)\"></a>空间复杂度 O(n)</h3><p>对于每层的期待：第一层n，第二层n/2，第三层n/22，…，直到 n/2log n=1。所以，总空间需求：<br>S = n + n/2 + n/22 + … + n/2log n &lt; n(1 + 1/2 + 1/22 + … + 1/2∞) =2n<br>因此他的空间复杂度为 2n = O(n)</p>\n<h3 id=\"Skip-List高度\"><a href=\"#Skip-List高度\" class=\"headerlink\" title=\"Skip List高度\"></a>Skip List高度</h3><p>对每层来说，它会向上增长的概率为1/2，则第m层向上增长的概率为1/2m；n个元素，则在m层元素数目的期待为Em = n/2m；当Em = 1，m = log2n即为层数的期待。故其高度期待为 Eh = O(log n)。<br>*关于“高概率（high probability）”的定义：<br>对于事件A，如果它发生的概率至少为1-cα/nα，其中cα仅取决于α，那么我们称它为高概率。<br>在牺牲时间和/或空间的情况下，我们可以选择α的值。</p>\n<ol>\n<li>查找的复杂度：<br>claim：在高概率的前提下，查找的时间复杂度为O(log n)</li>\n<li><p>插入的复杂度：<br>claim：在高概率的前提下，插入的时间复杂度为O(log n)<br>首先通过查找找到要插入的位置：O(log n)<br>之后进行插入，同时对每层进行对应的更新（依照概率决定是否向上增长）：o(log n)</p>\n</li>\n<li><p>删除的复杂度：<br>claim：在高概率的前提下，删除的时间复杂度为O(log n)</p>\n</li>\n</ol>\n<h2 id=\"实现源码\"><a href=\"#实现源码\" class=\"headerlink\" title=\"实现源码\"></a>实现源码</h2><p><a href=\"https://github.com/AndreMouche/algorithms_study/blob/master/data_structure/skiplist.cpp\">skiplist.cpp</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.kernelchina.org/algorithm/SL.ppt\">http://www.kernelchina.org/algorithm/SL.ppt</a><br><a href=\"http://epaperpress.com/sortsearch/skl.html\">http://epaperpress.com/sortsearch/skl.html</a><br><a href=\"http://www.spongeliu.com/63.html\">http://www.spongeliu.com/63.html</a><br><a href=\"http://www.cnblogs.com/flyfy1/archive/2011/02/24/1963347.html\">http://www.cnblogs.com/flyfy1/archive/2011/02/24/1963347.html</a><br><a href=\"http://courses.csail.mit.edu/6.046/spring04/handouts/skiplists.pdf\">http://courses.csail.mit.edu/6.046/spring04/handouts/skiplists.pdf</a></p>\n"},{"layout":"post","title":"基于leveldb,levigo做二次开发","keywords":["levigo","leveldb","go"],"description":"基于levigo做二次开发","comments":1,"_content":"\nLeveldb是一个C++库，它有提供标准的C接口，头文件在include/leveldb/c.h中\n\nlevigo是leveldb 的一个go wrapper,它主要基于Leveldb中inlude/leveldb/c.h提供的方法做二次开发\n\n开发过程，以添加一个简单的计算功能为例：\n\n修改leveldb源码\n\n在include/leveldb/c.h中添加以下声明：\n\n```\nextern int andre_add(const int a,const int b);\n```\n\n在db/c.cc中添加andre_add对应的实现：\n\n```\nint andre_add(const int a,const int b) {\n       return (a + b)*3;\n}\n```\n\n重新编译安装Leveldb源码：\n\n```\nfun@fun:~/workspace/study/leveldb/leveldb$ make clean && make\nfun@fun:~/workspace/study/leveldb/leveldb$ sudo cp libleveldb.a libleveldb.so.1.12 /usr/lib/\nfun@fun:~/workspace/study/leveldb/leveldb$ sudo cp -r include/leveldb /usr/include/\n```\n\n至此，Leveldb库安装完毕。\n\nLevigo二次开发：\n\n为了方便开发，我将https://github.com/jmhodges/levigo fork了一份到自己的帐号下\n\n执行以下操作将levigo安装到本地：\n\n```\ngo  get github.com/AndreMouche/levigo/\n```\n\n在$GOROOT下找到对应的源码，这里以修改options.go为例,在其中添加以下function以调用andre_add：\n\n```\nfunc Andre_add(a,b int) int {\n    pa := C.int(a)\n    pb := C.int(b)\n    return int(C.andre_add(pa,pb))\n}\n```\n\n保存后,重新编译该代码：\n\n```\nfun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go clean github.com/AndreMouche/levigo\nfun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go build github.com/AndreMouche/levigo\n```\n\n编译通过，向github提交修改文件\n\n至此，在go中便可调用levigo.Andre_add()了。\n\n\n\n\n","source":"_posts/2013-08-27-基于levigo做二次开发.md","raw":"---\nlayout: post\ntitle: \"基于leveldb,levigo做二次开发\"\nkeywords: [\"levigo\", \"leveldb\", \"go\"]\ndescription: \"基于levigo做二次开发\"\ncategory: \"storage engine\"\ntags: [\"leveldb\", \"go\"]\ncomments: true\n---\n\nLeveldb是一个C++库，它有提供标准的C接口，头文件在include/leveldb/c.h中\n\nlevigo是leveldb 的一个go wrapper,它主要基于Leveldb中inlude/leveldb/c.h提供的方法做二次开发\n\n开发过程，以添加一个简单的计算功能为例：\n\n修改leveldb源码\n\n在include/leveldb/c.h中添加以下声明：\n\n```\nextern int andre_add(const int a,const int b);\n```\n\n在db/c.cc中添加andre_add对应的实现：\n\n```\nint andre_add(const int a,const int b) {\n       return (a + b)*3;\n}\n```\n\n重新编译安装Leveldb源码：\n\n```\nfun@fun:~/workspace/study/leveldb/leveldb$ make clean && make\nfun@fun:~/workspace/study/leveldb/leveldb$ sudo cp libleveldb.a libleveldb.so.1.12 /usr/lib/\nfun@fun:~/workspace/study/leveldb/leveldb$ sudo cp -r include/leveldb /usr/include/\n```\n\n至此，Leveldb库安装完毕。\n\nLevigo二次开发：\n\n为了方便开发，我将https://github.com/jmhodges/levigo fork了一份到自己的帐号下\n\n执行以下操作将levigo安装到本地：\n\n```\ngo  get github.com/AndreMouche/levigo/\n```\n\n在$GOROOT下找到对应的源码，这里以修改options.go为例,在其中添加以下function以调用andre_add：\n\n```\nfunc Andre_add(a,b int) int {\n    pa := C.int(a)\n    pb := C.int(b)\n    return int(C.andre_add(pa,pb))\n}\n```\n\n保存后,重新编译该代码：\n\n```\nfun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go clean github.com/AndreMouche/levigo\nfun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go build github.com/AndreMouche/levigo\n```\n\n编译通过，向github提交修改文件\n\n至此，在go中便可调用levigo.Andre_add()了。\n\n\n\n\n","slug":"2013-08-27-基于levigo做二次开发","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgw001jqj7ltqsfmjut","content":"<p>Leveldb是一个C++库，它有提供标准的C接口，头文件在include/leveldb/c.h中</p>\n<p>levigo是leveldb 的一个go wrapper,它主要基于Leveldb中inlude/leveldb/c.h提供的方法做二次开发</p>\n<p>开发过程，以添加一个简单的计算功能为例：</p>\n<p>修改leveldb源码</p>\n<p>在include/leveldb/c.h中添加以下声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern int andre_add(const int a,const int b);</span><br></pre></td></tr></table></figure>\n<p>在db/c.cc中添加andre_add对应的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int andre_add(const int a,const int b) &#123;</span><br><span class=\"line\">       return (a + b)*3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新编译安装Leveldb源码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@fun:~/workspace/study/leveldb/leveldb$ make clean &amp;&amp; make</span><br><span class=\"line\">fun@fun:~/workspace/study/leveldb/leveldb$ sudo cp libleveldb.a libleveldb.so.1.12 /usr/lib/</span><br><span class=\"line\">fun@fun:~/workspace/study/leveldb/leveldb$ sudo cp -r include/leveldb /usr/include/</span><br></pre></td></tr></table></figure>\n<p>至此，Leveldb库安装完毕。</p>\n<p>Levigo二次开发：</p>\n<p>为了方便开发，我将<a href=\"https://github.com/jmhodges/levigo\" target=\"_blank\" rel=\"external\">https://github.com/jmhodges/levigo</a> fork了一份到自己的帐号下</p>\n<p>执行以下操作将levigo安装到本地：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go  get github.com/AndreMouche/levigo/</span><br></pre></td></tr></table></figure>\n<p>在$GOROOT下找到对应的源码，这里以修改options.go为例,在其中添加以下function以调用andre_add：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func Andre_add(a,b int) int &#123;</span><br><span class=\"line\">    pa := C.int(a)</span><br><span class=\"line\">    pb := C.int(b)</span><br><span class=\"line\">    return int(C.andre_add(pa,pb))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存后,重新编译该代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go clean github.com/AndreMouche/levigo</span><br><span class=\"line\">fun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go build github.com/AndreMouche/levigo</span><br></pre></td></tr></table></figure>\n<p>编译通过，向github提交修改文件</p>\n<p>至此，在go中便可调用levigo.Andre_add()了。</p>\n","excerpt":"","more":"<p>Leveldb是一个C++库，它有提供标准的C接口，头文件在include/leveldb/c.h中</p>\n<p>levigo是leveldb 的一个go wrapper,它主要基于Leveldb中inlude/leveldb/c.h提供的方法做二次开发</p>\n<p>开发过程，以添加一个简单的计算功能为例：</p>\n<p>修改leveldb源码</p>\n<p>在include/leveldb/c.h中添加以下声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern int andre_add(const int a,const int b);</span><br></pre></td></tr></table></figure>\n<p>在db/c.cc中添加andre_add对应的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int andre_add(const int a,const int b) &#123;</span><br><span class=\"line\">       return (a + b)*3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新编译安装Leveldb源码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@fun:~/workspace/study/leveldb/leveldb$ make clean &amp;&amp; make</span><br><span class=\"line\">fun@fun:~/workspace/study/leveldb/leveldb$ sudo cp libleveldb.a libleveldb.so.1.12 /usr/lib/</span><br><span class=\"line\">fun@fun:~/workspace/study/leveldb/leveldb$ sudo cp -r include/leveldb /usr/include/</span><br></pre></td></tr></table></figure>\n<p>至此，Leveldb库安装完毕。</p>\n<p>Levigo二次开发：</p>\n<p>为了方便开发，我将<a href=\"https://github.com/jmhodges/levigo\">https://github.com/jmhodges/levigo</a> fork了一份到自己的帐号下</p>\n<p>执行以下操作将levigo安装到本地：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go  get github.com/AndreMouche/levigo/</span><br></pre></td></tr></table></figure>\n<p>在$GOROOT下找到对应的源码，这里以修改options.go为例,在其中添加以下function以调用andre_add：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func Andre_add(a,b int) int &#123;</span><br><span class=\"line\">    pa := C.int(a)</span><br><span class=\"line\">    pb := C.int(b)</span><br><span class=\"line\">    return int(C.andre_add(pa,pb))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存后,重新编译该代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go clean github.com/AndreMouche/levigo</span><br><span class=\"line\">fun@fun:~/software/go/go/bin/src/github.com/AndreMouche/levigo$ go build github.com/AndreMouche/levigo</span><br></pre></td></tr></table></figure>\n<p>编译通过，向github提交修改文件</p>\n<p>至此，在go中便可调用levigo.Andre_add()了。</p>\n"},{"layout":"post","title":"成长，没那么迫切","keywords":["algorithm","POJ"],"description":"三年工作小结","comments":1,"_content":"\n\n早就想敲一篇工作总结了，却因一直以为自己只是一个初出茅庐的小屁孩而迟迟不动手。再换工作时，猛然发现自己已然入行三年，想来也可笑又难以启齿，竟是混混沌沌地打了三年酱油。\n\n**2011年6月29日 大三 上海某软件公司研究院**\n\n 被这家公司录用挺意外的，说实话大学前两年的确有做梦想进这家公司，但时至大三在对自己的能力进行了各方面评估之后，自我感觉能去个珠海某公司，那已然是上天最大的眷顾了，而收到这家公司的实习录用通知时，更是激动了好几个晚上没睡好，鄙视我吧～～～～\n 好吧，当时是这样的情况，整个大学基本上玩算法但玩得很烂，而除了算法，当时是啥都不会，真的啥都不会。老大倒是挺坦然地接受我这个状态了，既然啥都不会，就从头开始学呗。\n\n**LNMP** \n\n先是装了半个月的机器，说出去真丢人，大学愣是没接触过Linux，刚开始连apt-get是啥都不知道。记得当时搭得第一套服务是Linux+mysql+php+nginx,作为一个连windows都不怎么熟悉的超级屌丝，每次编译安装都几乎要了小命，阴影至今还在……至于shell脚本是啥，不知道……\n\n**Solr**\n\n\n老大对我还是挺有耐心的，当我终于学会了什么叫编译安装和apt-get之后，开始让我学着搭建solr服务，这个阶段还算顺利，几乎把官网上所有文档看了个遍，只可以当时还不知道怎么学习开源软件，文档是看了，愣是没花时间去看源码，暴殄天物……\n\n**python**\n\n会搭搜索服务后，从哪儿获取搜索资源呢？那就猥琐一点去网上抓吧。看来看去用python最简单，于是开始用python编写简单的抓取网页数据脚本，倒也挺开心顺手。\n然后，用python搞点其它事情吧，好像做了个转码服务啥的，用gearman来做任务分发，尼玛记得回学校前夜为了装这玩意我还搞到凌晨2:00，真TM敬业啊。\n\n**Hadoop**\n\n有了数据后，自然是学做数据分析，能看得出来当时老大是一心想把我往大数据方向培养，可惜当时我的天赋情商实在太低。HDFS最终还是搭建起来了，mapreduce 也跑起来了，但mahout最终还是没学扎实，现在只记得有itemBase 和  userBase两种推荐算法，大致实现是构建模型，然后几个矩阵放在一起做计算，借助于矩阵运算天然的分布式优势，套用mapreduce自然飞快……\n \n**Objetive-C**\n\n好吧，这完全是玩去了，现在只记得Mac台式机的屏幕非常酷，老被我用来照镜子，还有就是objective－C的代理机制实在太讨厌，把一个活生生的算法爱好者弄得晕头转向……\n\n**Cloud Storage**\n\n11年正是国内云计算活跃起来的时候，作为一个资深糊涂屌丝程序员，自然跟风而动。调入云计算存储项目组后，先是学习元数据存储，知道了什么叫 r+w>n,了解动静分离，接触了maven。\n\n接着是学着用awk grep分析日志，用birt做报表。\n再接着学习用php做前段，学会了简单的javascript，css,html.\n然后是维护各种语言的SDK，包括php,ruby,c/c++,听着也许很牛逼，实际情况是玩这些的人都跑了，作为爱公司第一人，当然舍身取义顶上，伟大吧巴拉巴拉\n\n**GVStream**\n\n玩点云计算相关的东西呗。游戏那边说好像做美女游戏主播挺来钱的，一帮人坑哧坑哧开搞。\n\n先是学了点视频的基础知识，就码率音频之类的，然后就是学用ffmpeg转码，为了支持直播，把视频切成一个个小的ts文件，丢到云存储，再用云分发分发。\n\n学会了用java spring框架写restful API，用highcharts做报表，知道了mongodb 、HttpLiveStream,明白了啥是播放列表，虽然最后项目不幸夭折了，倒也乐在其中，学了不少东西。\n\n**Operation**\n\n老大说，不会运维的开发不是好开发，老大也说，云计算三分开发七分靠运维。作为一个立志要成为云计算达人的人，求老大教我运维，虽然最后只玩了半个月，但在这个过程中，知道了什么叫自动化部署脚本，知道LVS，heart Beat,opentsdb.\n\n**2013年5月17日 离职**\n\n公司忽然抽风说不让玩云计算了，通通被拉去做视频。作为云计算的忠实粉丝，当然不干，就这样，离开了第一家单位。\n\n**2013年5月31日 北京某电商公司**\n\n还是熟悉的云计算，初到公司，先是敲了一个月的报表，说好听点，叫运营监控系统哈哈。然后是学习leveldb源码，接着遍开始玩go,陆陆续续先后开发了分布式消息系统，分布式块存储，分布式对象存储元数据子系统，期间开始玩mysql，学习mysql内核。\n\n**2014年7月17日 离职**\n\n北京一年，似乎每天都很忙，却总感觉少了些什么，或许是离家太远？打好包袱，踏上归途，以为自己会不后悔，猛然发现，自己竟是那么怀念那段北漂的日子……\n\n**2014年8月6日 杭州 新的开始**\n\n或许，成长没有那么迫切。不过还是加油，好姑娘每天都会很努力嘛！\n\n\n \n","source":"_posts/2014-09-22-three-year-summary.md","raw":"---\nlayout: post\ntitle: \"成长，没那么迫切\"\nkeywords: [\"algorithm\", \"POJ\"]\ndescription: \"三年工作小结\"\ncategory: \"thinking\"\ntags: [\"summary\",\"work\"]\ncomments : true\n---\n\n\n早就想敲一篇工作总结了，却因一直以为自己只是一个初出茅庐的小屁孩而迟迟不动手。再换工作时，猛然发现自己已然入行三年，想来也可笑又难以启齿，竟是混混沌沌地打了三年酱油。\n\n**2011年6月29日 大三 上海某软件公司研究院**\n\n 被这家公司录用挺意外的，说实话大学前两年的确有做梦想进这家公司，但时至大三在对自己的能力进行了各方面评估之后，自我感觉能去个珠海某公司，那已然是上天最大的眷顾了，而收到这家公司的实习录用通知时，更是激动了好几个晚上没睡好，鄙视我吧～～～～\n 好吧，当时是这样的情况，整个大学基本上玩算法但玩得很烂，而除了算法，当时是啥都不会，真的啥都不会。老大倒是挺坦然地接受我这个状态了，既然啥都不会，就从头开始学呗。\n\n**LNMP** \n\n先是装了半个月的机器，说出去真丢人，大学愣是没接触过Linux，刚开始连apt-get是啥都不知道。记得当时搭得第一套服务是Linux+mysql+php+nginx,作为一个连windows都不怎么熟悉的超级屌丝，每次编译安装都几乎要了小命，阴影至今还在……至于shell脚本是啥，不知道……\n\n**Solr**\n\n\n老大对我还是挺有耐心的，当我终于学会了什么叫编译安装和apt-get之后，开始让我学着搭建solr服务，这个阶段还算顺利，几乎把官网上所有文档看了个遍，只可以当时还不知道怎么学习开源软件，文档是看了，愣是没花时间去看源码，暴殄天物……\n\n**python**\n\n会搭搜索服务后，从哪儿获取搜索资源呢？那就猥琐一点去网上抓吧。看来看去用python最简单，于是开始用python编写简单的抓取网页数据脚本，倒也挺开心顺手。\n然后，用python搞点其它事情吧，好像做了个转码服务啥的，用gearman来做任务分发，尼玛记得回学校前夜为了装这玩意我还搞到凌晨2:00，真TM敬业啊。\n\n**Hadoop**\n\n有了数据后，自然是学做数据分析，能看得出来当时老大是一心想把我往大数据方向培养，可惜当时我的天赋情商实在太低。HDFS最终还是搭建起来了，mapreduce 也跑起来了，但mahout最终还是没学扎实，现在只记得有itemBase 和  userBase两种推荐算法，大致实现是构建模型，然后几个矩阵放在一起做计算，借助于矩阵运算天然的分布式优势，套用mapreduce自然飞快……\n \n**Objetive-C**\n\n好吧，这完全是玩去了，现在只记得Mac台式机的屏幕非常酷，老被我用来照镜子，还有就是objective－C的代理机制实在太讨厌，把一个活生生的算法爱好者弄得晕头转向……\n\n**Cloud Storage**\n\n11年正是国内云计算活跃起来的时候，作为一个资深糊涂屌丝程序员，自然跟风而动。调入云计算存储项目组后，先是学习元数据存储，知道了什么叫 r+w>n,了解动静分离，接触了maven。\n\n接着是学着用awk grep分析日志，用birt做报表。\n再接着学习用php做前段，学会了简单的javascript，css,html.\n然后是维护各种语言的SDK，包括php,ruby,c/c++,听着也许很牛逼，实际情况是玩这些的人都跑了，作为爱公司第一人，当然舍身取义顶上，伟大吧巴拉巴拉\n\n**GVStream**\n\n玩点云计算相关的东西呗。游戏那边说好像做美女游戏主播挺来钱的，一帮人坑哧坑哧开搞。\n\n先是学了点视频的基础知识，就码率音频之类的，然后就是学用ffmpeg转码，为了支持直播，把视频切成一个个小的ts文件，丢到云存储，再用云分发分发。\n\n学会了用java spring框架写restful API，用highcharts做报表，知道了mongodb 、HttpLiveStream,明白了啥是播放列表，虽然最后项目不幸夭折了，倒也乐在其中，学了不少东西。\n\n**Operation**\n\n老大说，不会运维的开发不是好开发，老大也说，云计算三分开发七分靠运维。作为一个立志要成为云计算达人的人，求老大教我运维，虽然最后只玩了半个月，但在这个过程中，知道了什么叫自动化部署脚本，知道LVS，heart Beat,opentsdb.\n\n**2013年5月17日 离职**\n\n公司忽然抽风说不让玩云计算了，通通被拉去做视频。作为云计算的忠实粉丝，当然不干，就这样，离开了第一家单位。\n\n**2013年5月31日 北京某电商公司**\n\n还是熟悉的云计算，初到公司，先是敲了一个月的报表，说好听点，叫运营监控系统哈哈。然后是学习leveldb源码，接着遍开始玩go,陆陆续续先后开发了分布式消息系统，分布式块存储，分布式对象存储元数据子系统，期间开始玩mysql，学习mysql内核。\n\n**2014年7月17日 离职**\n\n北京一年，似乎每天都很忙，却总感觉少了些什么，或许是离家太远？打好包袱，踏上归途，以为自己会不后悔，猛然发现，自己竟是那么怀念那段北漂的日子……\n\n**2014年8月6日 杭州 新的开始**\n\n或许，成长没有那么迫切。不过还是加油，好姑娘每天都会很努力嘛！\n\n\n \n","slug":"2014-09-22-three-year-summary","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgy001nqj7l3ttv5d01","content":"<p>早就想敲一篇工作总结了，却因一直以为自己只是一个初出茅庐的小屁孩而迟迟不动手。再换工作时，猛然发现自己已然入行三年，想来也可笑又难以启齿，竟是混混沌沌地打了三年酱油。</p>\n<p><strong>2011年6月29日 大三 上海某软件公司研究院</strong></p>\n<p> 被这家公司录用挺意外的，说实话大学前两年的确有做梦想进这家公司，但时至大三在对自己的能力进行了各方面评估之后，自我感觉能去个珠海某公司，那已然是上天最大的眷顾了，而收到这家公司的实习录用通知时，更是激动了好几个晚上没睡好，鄙视我吧～～～～<br> 好吧，当时是这样的情况，整个大学基本上玩算法但玩得很烂，而除了算法，当时是啥都不会，真的啥都不会。老大倒是挺坦然地接受我这个状态了，既然啥都不会，就从头开始学呗。</p>\n<p><strong>LNMP</strong> </p>\n<p>先是装了半个月的机器，说出去真丢人，大学愣是没接触过Linux，刚开始连apt-get是啥都不知道。记得当时搭得第一套服务是Linux+mysql+php+nginx,作为一个连windows都不怎么熟悉的超级屌丝，每次编译安装都几乎要了小命，阴影至今还在……至于shell脚本是啥，不知道……</p>\n<p><strong>Solr</strong></p>\n<p>老大对我还是挺有耐心的，当我终于学会了什么叫编译安装和apt-get之后，开始让我学着搭建solr服务，这个阶段还算顺利，几乎把官网上所有文档看了个遍，只可以当时还不知道怎么学习开源软件，文档是看了，愣是没花时间去看源码，暴殄天物……</p>\n<p><strong>python</strong></p>\n<p>会搭搜索服务后，从哪儿获取搜索资源呢？那就猥琐一点去网上抓吧。看来看去用python最简单，于是开始用python编写简单的抓取网页数据脚本，倒也挺开心顺手。<br>然后，用python搞点其它事情吧，好像做了个转码服务啥的，用gearman来做任务分发，尼玛记得回学校前夜为了装这玩意我还搞到凌晨2:00，真TM敬业啊。</p>\n<p><strong>Hadoop</strong></p>\n<p>有了数据后，自然是学做数据分析，能看得出来当时老大是一心想把我往大数据方向培养，可惜当时我的天赋情商实在太低。HDFS最终还是搭建起来了，mapreduce 也跑起来了，但mahout最终还是没学扎实，现在只记得有itemBase 和  userBase两种推荐算法，大致实现是构建模型，然后几个矩阵放在一起做计算，借助于矩阵运算天然的分布式优势，套用mapreduce自然飞快……</p>\n<p><strong>Objetive-C</strong></p>\n<p>好吧，这完全是玩去了，现在只记得Mac台式机的屏幕非常酷，老被我用来照镜子，还有就是objective－C的代理机制实在太讨厌，把一个活生生的算法爱好者弄得晕头转向……</p>\n<p><strong>Cloud Storage</strong></p>\n<p>11年正是国内云计算活跃起来的时候，作为一个资深糊涂屌丝程序员，自然跟风而动。调入云计算存储项目组后，先是学习元数据存储，知道了什么叫 r+w&gt;n,了解动静分离，接触了maven。</p>\n<p>接着是学着用awk grep分析日志，用birt做报表。<br>再接着学习用php做前段，学会了简单的javascript，css,html.<br>然后是维护各种语言的SDK，包括php,ruby,c/c++,听着也许很牛逼，实际情况是玩这些的人都跑了，作为爱公司第一人，当然舍身取义顶上，伟大吧巴拉巴拉</p>\n<p><strong>GVStream</strong></p>\n<p>玩点云计算相关的东西呗。游戏那边说好像做美女游戏主播挺来钱的，一帮人坑哧坑哧开搞。</p>\n<p>先是学了点视频的基础知识，就码率音频之类的，然后就是学用ffmpeg转码，为了支持直播，把视频切成一个个小的ts文件，丢到云存储，再用云分发分发。</p>\n<p>学会了用java spring框架写restful API，用highcharts做报表，知道了mongodb 、HttpLiveStream,明白了啥是播放列表，虽然最后项目不幸夭折了，倒也乐在其中，学了不少东西。</p>\n<p><strong>Operation</strong></p>\n<p>老大说，不会运维的开发不是好开发，老大也说，云计算三分开发七分靠运维。作为一个立志要成为云计算达人的人，求老大教我运维，虽然最后只玩了半个月，但在这个过程中，知道了什么叫自动化部署脚本，知道LVS，heart Beat,opentsdb.</p>\n<p><strong>2013年5月17日 离职</strong></p>\n<p>公司忽然抽风说不让玩云计算了，通通被拉去做视频。作为云计算的忠实粉丝，当然不干，就这样，离开了第一家单位。</p>\n<p><strong>2013年5月31日 北京某电商公司</strong></p>\n<p>还是熟悉的云计算，初到公司，先是敲了一个月的报表，说好听点，叫运营监控系统哈哈。然后是学习leveldb源码，接着遍开始玩go,陆陆续续先后开发了分布式消息系统，分布式块存储，分布式对象存储元数据子系统，期间开始玩mysql，学习mysql内核。</p>\n<p><strong>2014年7月17日 离职</strong></p>\n<p>北京一年，似乎每天都很忙，却总感觉少了些什么，或许是离家太远？打好包袱，踏上归途，以为自己会不后悔，猛然发现，自己竟是那么怀念那段北漂的日子……</p>\n<p><strong>2014年8月6日 杭州 新的开始</strong></p>\n<p>或许，成长没有那么迫切。不过还是加油，好姑娘每天都会很努力嘛！</p>\n","excerpt":"","more":"<p>早就想敲一篇工作总结了，却因一直以为自己只是一个初出茅庐的小屁孩而迟迟不动手。再换工作时，猛然发现自己已然入行三年，想来也可笑又难以启齿，竟是混混沌沌地打了三年酱油。</p>\n<p><strong>2011年6月29日 大三 上海某软件公司研究院</strong></p>\n<p> 被这家公司录用挺意外的，说实话大学前两年的确有做梦想进这家公司，但时至大三在对自己的能力进行了各方面评估之后，自我感觉能去个珠海某公司，那已然是上天最大的眷顾了，而收到这家公司的实习录用通知时，更是激动了好几个晚上没睡好，鄙视我吧～～～～<br> 好吧，当时是这样的情况，整个大学基本上玩算法但玩得很烂，而除了算法，当时是啥都不会，真的啥都不会。老大倒是挺坦然地接受我这个状态了，既然啥都不会，就从头开始学呗。</p>\n<p><strong>LNMP</strong> </p>\n<p>先是装了半个月的机器，说出去真丢人，大学愣是没接触过Linux，刚开始连apt-get是啥都不知道。记得当时搭得第一套服务是Linux+mysql+php+nginx,作为一个连windows都不怎么熟悉的超级屌丝，每次编译安装都几乎要了小命，阴影至今还在……至于shell脚本是啥，不知道……</p>\n<p><strong>Solr</strong></p>\n<p>老大对我还是挺有耐心的，当我终于学会了什么叫编译安装和apt-get之后，开始让我学着搭建solr服务，这个阶段还算顺利，几乎把官网上所有文档看了个遍，只可以当时还不知道怎么学习开源软件，文档是看了，愣是没花时间去看源码，暴殄天物……</p>\n<p><strong>python</strong></p>\n<p>会搭搜索服务后，从哪儿获取搜索资源呢？那就猥琐一点去网上抓吧。看来看去用python最简单，于是开始用python编写简单的抓取网页数据脚本，倒也挺开心顺手。<br>然后，用python搞点其它事情吧，好像做了个转码服务啥的，用gearman来做任务分发，尼玛记得回学校前夜为了装这玩意我还搞到凌晨2:00，真TM敬业啊。</p>\n<p><strong>Hadoop</strong></p>\n<p>有了数据后，自然是学做数据分析，能看得出来当时老大是一心想把我往大数据方向培养，可惜当时我的天赋情商实在太低。HDFS最终还是搭建起来了，mapreduce 也跑起来了，但mahout最终还是没学扎实，现在只记得有itemBase 和  userBase两种推荐算法，大致实现是构建模型，然后几个矩阵放在一起做计算，借助于矩阵运算天然的分布式优势，套用mapreduce自然飞快……</p>\n<p><strong>Objetive-C</strong></p>\n<p>好吧，这完全是玩去了，现在只记得Mac台式机的屏幕非常酷，老被我用来照镜子，还有就是objective－C的代理机制实在太讨厌，把一个活生生的算法爱好者弄得晕头转向……</p>\n<p><strong>Cloud Storage</strong></p>\n<p>11年正是国内云计算活跃起来的时候，作为一个资深糊涂屌丝程序员，自然跟风而动。调入云计算存储项目组后，先是学习元数据存储，知道了什么叫 r+w&gt;n,了解动静分离，接触了maven。</p>\n<p>接着是学着用awk grep分析日志，用birt做报表。<br>再接着学习用php做前段，学会了简单的javascript，css,html.<br>然后是维护各种语言的SDK，包括php,ruby,c/c++,听着也许很牛逼，实际情况是玩这些的人都跑了，作为爱公司第一人，当然舍身取义顶上，伟大吧巴拉巴拉</p>\n<p><strong>GVStream</strong></p>\n<p>玩点云计算相关的东西呗。游戏那边说好像做美女游戏主播挺来钱的，一帮人坑哧坑哧开搞。</p>\n<p>先是学了点视频的基础知识，就码率音频之类的，然后就是学用ffmpeg转码，为了支持直播，把视频切成一个个小的ts文件，丢到云存储，再用云分发分发。</p>\n<p>学会了用java spring框架写restful API，用highcharts做报表，知道了mongodb 、HttpLiveStream,明白了啥是播放列表，虽然最后项目不幸夭折了，倒也乐在其中，学了不少东西。</p>\n<p><strong>Operation</strong></p>\n<p>老大说，不会运维的开发不是好开发，老大也说，云计算三分开发七分靠运维。作为一个立志要成为云计算达人的人，求老大教我运维，虽然最后只玩了半个月，但在这个过程中，知道了什么叫自动化部署脚本，知道LVS，heart Beat,opentsdb.</p>\n<p><strong>2013年5月17日 离职</strong></p>\n<p>公司忽然抽风说不让玩云计算了，通通被拉去做视频。作为云计算的忠实粉丝，当然不干，就这样，离开了第一家单位。</p>\n<p><strong>2013年5月31日 北京某电商公司</strong></p>\n<p>还是熟悉的云计算，初到公司，先是敲了一个月的报表，说好听点，叫运营监控系统哈哈。然后是学习leveldb源码，接着遍开始玩go,陆陆续续先后开发了分布式消息系统，分布式块存储，分布式对象存储元数据子系统，期间开始玩mysql，学习mysql内核。</p>\n<p><strong>2014年7月17日 离职</strong></p>\n<p>北京一年，似乎每天都很忙，却总感觉少了些什么，或许是离家太远？打好包袱，踏上归途，以为自己会不后悔，猛然发现，自己竟是那么怀念那段北漂的日子……</p>\n<p><strong>2014年8月6日 杭州 新的开始</strong></p>\n<p>或许，成长没有那么迫切。不过还是加油，好姑娘每天都会很努力嘛！</p>\n"},{"layout":"post","title":"MAC上编译安装nginx","keywords":["nginx","install"],"description":"configure and install nginx on mac","comments":1,"_content":"\n## 安装PCRE\n\n\n可以在[官网](http://www.pcre.org/)下载pcre最新版。\n\n```\ntar zxvf pcre-8.36.tar.bz2 \ncd pcre-8.36\nsudo ./configure --prefix=/usr/local\nsudo make \nsudo make install\n```\n\n## 安装Nginx\n\n在[Nginx官网](http://nginx.org/)下载Nginx 最新版\n\n```\ntar zxvf nginx-1.6.2.tar.gz\ncd nginx-1.6.2\n./configure\n```\n\n### 编译概要\n\n```\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + md5: using system crypto library\n  + sha1: using system crypto library\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  nginx configuration prefix: \"/usr/local/nginx/conf\"\n  nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n\n```\n\n由于直接使用默认参数make时出现MD5算法不能通过错误:\n\n```\nsrc/core/ngx_crypt.c:82:5: error: 'MD5_Init' is deprecated: first deprecated in OS X 10.7 [-Werror,-Wdeprecated-declarations]\n    ngx_md5_init(&md5);\n```\n\n参考[此处](http://www.bingfengsa.com/info/31397.html)，即这里不能使用系统默认的crypto，使用ssl模块取代之，即在编译时加入以下参数\n\n```\n./configure --prefix=/usr/local --with-http_ssl_module --with-cc-opt=\"-Wno-deprecated-declarations\"\nsudo make\nsudo make install\n```\n\n### 编译概要\n\n```\nConfiguration summary\n  + using system PCRE library\n  + using system OpenSSL library\n  + md5: using OpenSSL library\n  + sha1: using OpenSSL library\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local\"\n  nginx binary file: \"/usr/local/sbin/nginx\"\n  nginx configuration prefix: \"/usr/local/conf\"\n  nginx configuration file: \"/usr/local/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/logs/error.log\"\n  nginx http access log file: \"/usr/local/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n\n```\n\n## 启动服务\n```\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx \n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx\nnobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process\nroot            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx\n```\n\n打开浏览器访问localhost:\n![Alt welcome_to_nginx.png](/images/welcome_to_nginx.png)\n## 停止服务\n\n```\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx\nnobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process\nroot            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx\n```\n\n设置环境变量：\n\n```\nexport PATH=/usr/local/bin/:/usr/local/sbin/:$PATH\n```\n\n启动Nginx\n\n```\n sudo nginx \n```\n\n需要停止Nginx的时候运行\n\n```\n sudo nginx -s stop\n``` \n\n参考：[在Mac OS X 10.9上编译安装nginx](http://www.kazaff.me/2013/07/18/%E5%9C%A8mac-os-x-10-9%E4%B8%8A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/)\n","source":"_posts/2014-10-09-configure-install-nginx-on-mac.md","raw":"---\nlayout: post\ntitle: \"MAC上编译安装nginx\"\nkeywords: [\"nginx\", \"install\"]\ndescription: \"configure and install nginx on mac\"\ncategory: \"nginx\"\ntags: [\"nginx\",\"mac\"]\ncomments: true\n---\n\n## 安装PCRE\n\n\n可以在[官网](http://www.pcre.org/)下载pcre最新版。\n\n```\ntar zxvf pcre-8.36.tar.bz2 \ncd pcre-8.36\nsudo ./configure --prefix=/usr/local\nsudo make \nsudo make install\n```\n\n## 安装Nginx\n\n在[Nginx官网](http://nginx.org/)下载Nginx 最新版\n\n```\ntar zxvf nginx-1.6.2.tar.gz\ncd nginx-1.6.2\n./configure\n```\n\n### 编译概要\n\n```\nConfiguration summary\n  + using system PCRE library\n  + OpenSSL library is not used\n  + md5: using system crypto library\n  + sha1: using system crypto library\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  nginx configuration prefix: \"/usr/local/nginx/conf\"\n  nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n\n```\n\n由于直接使用默认参数make时出现MD5算法不能通过错误:\n\n```\nsrc/core/ngx_crypt.c:82:5: error: 'MD5_Init' is deprecated: first deprecated in OS X 10.7 [-Werror,-Wdeprecated-declarations]\n    ngx_md5_init(&md5);\n```\n\n参考[此处](http://www.bingfengsa.com/info/31397.html)，即这里不能使用系统默认的crypto，使用ssl模块取代之，即在编译时加入以下参数\n\n```\n./configure --prefix=/usr/local --with-http_ssl_module --with-cc-opt=\"-Wno-deprecated-declarations\"\nsudo make\nsudo make install\n```\n\n### 编译概要\n\n```\nConfiguration summary\n  + using system PCRE library\n  + using system OpenSSL library\n  + md5: using OpenSSL library\n  + sha1: using OpenSSL library\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local\"\n  nginx binary file: \"/usr/local/sbin/nginx\"\n  nginx configuration prefix: \"/usr/local/conf\"\n  nginx configuration file: \"/usr/local/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/logs/error.log\"\n  nginx http access log file: \"/usr/local/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n\n```\n\n## 启动服务\n```\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx \n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx\nnobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process\nroot            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx\n```\n\n打开浏览器访问localhost:\n![Alt welcome_to_nginx.png](/images/welcome_to_nginx.png)\n## 停止服务\n\n```\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx\nnobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process\nroot            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop\n[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx\nwuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx\n```\n\n设置环境变量：\n\n```\nexport PATH=/usr/local/bin/:/usr/local/sbin/:$PATH\n```\n\n启动Nginx\n\n```\n sudo nginx \n```\n\n需要停止Nginx的时候运行\n\n```\n sudo nginx -s stop\n``` \n\n参考：[在Mac OS X 10.9上编译安装nginx](http://www.kazaff.me/2013/07/18/%E5%9C%A8mac-os-x-10-9%E4%B8%8A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/)\n","slug":"2014-10-09-configure-install-nginx-on-mac","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhgz001rqj7lsrt99zgh","content":"<h2 id=\"安装PCRE\"><a href=\"#安装PCRE\" class=\"headerlink\" title=\"安装PCRE\"></a>安装PCRE</h2><p>可以在<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"external\">官网</a>下载pcre最新版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf pcre-8.36.tar.bz2 </span><br><span class=\"line\">cd pcre-8.36</span><br><span class=\"line\">sudo ./configure --prefix=/usr/local</span><br><span class=\"line\">sudo make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p>在<a href=\"http://nginx.org/\" target=\"_blank\" rel=\"external\">Nginx官网</a>下载Nginx 最新版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.6.2.tar.gz</span><br><span class=\"line\">cd nginx-1.6.2</span><br><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译概要\"><a href=\"#编译概要\" class=\"headerlink\" title=\"编译概要\"></a>编译概要</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + OpenSSL library is not used</span><br><span class=\"line\">  + md5: using system crypto library</span><br><span class=\"line\">  + sha1: using system crypto library</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class=\"line\">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span><br><span class=\"line\">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class=\"line\">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class=\"line\">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span><br><span class=\"line\">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span><br><span class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure>\n<p>由于直接使用默认参数make时出现MD5算法不能通过错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/core/ngx_crypt.c:82:5: error: &apos;MD5_Init&apos; is deprecated: first deprecated in OS X 10.7 [-Werror,-Wdeprecated-declarations]</span><br><span class=\"line\">    ngx_md5_init(&amp;md5);</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"http://www.bingfengsa.com/info/31397.html\" target=\"_blank\" rel=\"external\">此处</a>，即这里不能使用系统默认的crypto，使用ssl模块取代之，即在编译时加入以下参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local --with-http_ssl_module --with-cc-opt=&quot;-Wno-deprecated-declarations&quot;</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译概要-1\"><a href=\"#编译概要-1\" class=\"headerlink\" title=\"编译概要\"></a>编译概要</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + using system OpenSSL library</span><br><span class=\"line\">  + md5: using OpenSSL library</span><br><span class=\"line\">  + sha1: using OpenSSL library</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: &quot;/usr/local&quot;</span><br><span class=\"line\">  nginx binary file: &quot;/usr/local/sbin/nginx&quot;</span><br><span class=\"line\">  nginx configuration prefix: &quot;/usr/local/conf&quot;</span><br><span class=\"line\">  nginx configuration file: &quot;/usr/local/conf/nginx.conf&quot;</span><br><span class=\"line\">  nginx pid file: &quot;/usr/local/logs/nginx.pid&quot;</span><br><span class=\"line\">  nginx error log file: &quot;/usr/local/logs/error.log&quot;</span><br><span class=\"line\">  nginx http access log file: &quot;/usr/local/logs/access.log&quot;</span><br><span class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx </span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx</span><br><span class=\"line\">nobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process</span><br><span class=\"line\">root            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx</span><br></pre></td></tr></table></figure>\n<p>打开浏览器访问localhost:<br><img src=\"/images/welcome_to_nginx.png\" alt=\"Alt welcome_to_nginx.png\"></p>\n<h2 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx</span><br><span class=\"line\">nobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process</span><br><span class=\"line\">root            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx</span><br></pre></td></tr></table></figure>\n<p>设置环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/usr/local/bin/:/usr/local/sbin/:$PATH</span><br></pre></td></tr></table></figure>\n<p>启动Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n<p>需要停止Nginx的时候运行</p>\n<pre><code>sudo nginx -s stop\n</code></pre><p>参考：<a href=\"http://www.kazaff.me/2013/07/18/%E5%9C%A8mac-os-x-10-9%E4%B8%8A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/\" target=\"_blank\" rel=\"external\">在Mac OS X 10.9上编译安装nginx</a></p>\n","excerpt":"","more":"<h2 id=\"安装PCRE\"><a href=\"#安装PCRE\" class=\"headerlink\" title=\"安装PCRE\"></a>安装PCRE</h2><p>可以在<a href=\"http://www.pcre.org/\">官网</a>下载pcre最新版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf pcre-8.36.tar.bz2 </span><br><span class=\"line\">cd pcre-8.36</span><br><span class=\"line\">sudo ./configure --prefix=/usr/local</span><br><span class=\"line\">sudo make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p>在<a href=\"http://nginx.org/\">Nginx官网</a>下载Nginx 最新版</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf nginx-1.6.2.tar.gz</span><br><span class=\"line\">cd nginx-1.6.2</span><br><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译概要\"><a href=\"#编译概要\" class=\"headerlink\" title=\"编译概要\"></a>编译概要</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + OpenSSL library is not used</span><br><span class=\"line\">  + md5: using system crypto library</span><br><span class=\"line\">  + sha1: using system crypto library</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class=\"line\">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span><br><span class=\"line\">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class=\"line\">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class=\"line\">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span><br><span class=\"line\">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span><br><span class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure>\n<p>由于直接使用默认参数make时出现MD5算法不能通过错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/core/ngx_crypt.c:82:5: error: &apos;MD5_Init&apos; is deprecated: first deprecated in OS X 10.7 [-Werror,-Wdeprecated-declarations]</span><br><span class=\"line\">    ngx_md5_init(&amp;md5);</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"http://www.bingfengsa.com/info/31397.html\">此处</a>，即这里不能使用系统默认的crypto，使用ssl模块取代之，即在编译时加入以下参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local --with-http_ssl_module --with-cc-opt=&quot;-Wno-deprecated-declarations&quot;</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译概要-1\"><a href=\"#编译概要-1\" class=\"headerlink\" title=\"编译概要\"></a>编译概要</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using system PCRE library</span><br><span class=\"line\">  + using system OpenSSL library</span><br><span class=\"line\">  + md5: using OpenSSL library</span><br><span class=\"line\">  + sha1: using OpenSSL library</span><br><span class=\"line\">  + using system zlib library</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: &quot;/usr/local&quot;</span><br><span class=\"line\">  nginx binary file: &quot;/usr/local/sbin/nginx&quot;</span><br><span class=\"line\">  nginx configuration prefix: &quot;/usr/local/conf&quot;</span><br><span class=\"line\">  nginx configuration file: &quot;/usr/local/conf/nginx.conf&quot;</span><br><span class=\"line\">  nginx pid file: &quot;/usr/local/logs/nginx.pid&quot;</span><br><span class=\"line\">  nginx error log file: &quot;/usr/local/logs/error.log&quot;</span><br><span class=\"line\">  nginx http access log file: &quot;/usr/local/logs/access.log&quot;</span><br><span class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx </span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx</span><br><span class=\"line\">nobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process</span><br><span class=\"line\">root            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx</span><br></pre></td></tr></table></figure>\n<p>打开浏览器访问localhost:<br><img src=\"/images/welcome_to_nginx.png\" alt=\"Alt welcome_to_nginx.png\"></p>\n<h2 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36319   0.0  0.0  2432784    600 s001  S+    8:28PM   0:00.00 grep nginx</span><br><span class=\"line\">nobody          36316   0.0  0.0  2453500    908   ??  S     8:27PM   0:00.00 nginx: worker process</span><br><span class=\"line\">root            36315   0.0  0.0  2445088    340   ??  Ss    8:27PM   0:00.00 nginx: master process /usr/local/sbin/nginx</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ sudo /usr/local/sbin/nginx -s stop</span><br><span class=\"line\">[wuxuelian@fun:~/study/nginx/software/nginx-1.6.2]$ ps aux | grep nginx</span><br><span class=\"line\">wuxuelian       36323   0.0  0.0  2442000    628 s001  S+    8:28PM   0:00.00 grep nginx</span><br></pre></td></tr></table></figure>\n<p>设置环境变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/usr/local/bin/:/usr/local/sbin/:$PATH</span><br></pre></td></tr></table></figure>\n<p>启动Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n<p>需要停止Nginx的时候运行</p>\n<pre><code>sudo nginx -s stop\n</code></pre><p>参考：<a href=\"http://www.kazaff.me/2013/07/18/%E5%9C%A8mac-os-x-10-9%E4%B8%8A%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/\">在Mac OS X 10.9上编译安装nginx</a></p>\n"},{"layout":"post","title":"使用GraphicsMagick提取图片基本信息","keywords":["GraphicsMagick","PingImage"],"description":"Get pic info with graphicsMagick ","comments":1,"_content":"\n## 使用GraphicsMagick提取图片基本信息\n\n通过使用[PingImage](http://www.graphicsmagick.org/api/constitute.html#pingimage)获取图片基本属性。\n\n## PingImage\n\n### 简介\n\n```\nImage *PingImage( const ImageInfo *image_info, ExceptionInfo *exception );\n```\n\n### 说明\n\n* 它返回指定图片除像素（Pixels）以外的所有属性。\n* 相比ReadImage它更快，且使用更少内存。\n* 执行失败时，返回Image为NULL，且通过exception返回详细失败信息。\n\n### 参数\n\n**image_info **\n 该参数为由文件或文件名初始化的ImageInfo对象\n\n\n\n## Sample\n\n参考GraphicsMagick[官方文档](http://www.graphicsmagick.org/api/types.html#image)\n提取图片基本信息\n\n### Code \n\nimage_info.cpp\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/types.h>\n#include <magick/api.h>\n#include<iostream>\nusing namespace std;\n\nint main ( int argc, char **argv )\n{\n    Image\n        *image = (Image *) NULL;\n\n    char\n        infile[MaxTextExtent],\n        outfile[MaxTextExtent];\n\n    int\n        arg = 1,\n            exit_status = 0;\n\n    ImageInfo\n        *imageInfo;\n\n    ExceptionInfo\n        exception;\n\n    InitializeMagick(NULL);\n    imageInfo=CloneImageInfo(0);\n    GetExceptionInfo(&exception);\n\n    if (argc != 2)\n    {\n        (void) fprintf ( stderr, \"Usage: %s infile\\n\", argv[0] );\n        (void) fflush(stderr);\n        exit_status = 1;\n        goto program_exit;\n    }\n\n    (void) strncpy(infile, argv[arg], MaxTextExtent-1 );\n\n    (void) strcpy(imageInfo->filename, infile);\n    \n    if((image = PingImage(imageInfo,&exception)) == NULL) {\n          printf(\"PingImage fail, path = %s\",infile);\n          exit_status = -1;\n          goto program_exit;\n    }\n    \n    cout << \"image Type:\" << image->magick << endl;\n    cout << \"image width:\" << image->columns << endl;\n    cout << \"image height:\" << image->rows << endl;\n    cout << \"Image colorspace:\" << image->colorspace << endl;\n\n    /*switch(image->colorspace){\n       \n    \n    }*/\n\n\n\n\nprogram_exit:\n\n    if (image != (Image *) NULL)\n        DestroyImage(image);\n\n    if (imageInfo != (ImageInfo *) NULL)\n        DestroyImageInfo(imageInfo);\n    DestroyMagick();\n\n    return exit_status;\n}\n\n```\n\n### 编译\n\n```\ng++ image_info.cpp `GraphicsMagick-config --cppflags --ldflags --libs`\n```\n","source":"_posts/2014-10-09-graphicsmagick-pingImage.md","raw":"---\nlayout: post\ntitle: \"使用GraphicsMagick提取图片基本信息\"\nkeywords: [\"GraphicsMagick\", \"PingImage\"]\ndescription: \"Get pic info with graphicsMagick \"\ncategory: \"GraphicsMagick\"\ntags: [\"GraphicsMagick\"]\ncomments: true\n---\n\n## 使用GraphicsMagick提取图片基本信息\n\n通过使用[PingImage](http://www.graphicsmagick.org/api/constitute.html#pingimage)获取图片基本属性。\n\n## PingImage\n\n### 简介\n\n```\nImage *PingImage( const ImageInfo *image_info, ExceptionInfo *exception );\n```\n\n### 说明\n\n* 它返回指定图片除像素（Pixels）以外的所有属性。\n* 相比ReadImage它更快，且使用更少内存。\n* 执行失败时，返回Image为NULL，且通过exception返回详细失败信息。\n\n### 参数\n\n**image_info **\n 该参数为由文件或文件名初始化的ImageInfo对象\n\n\n\n## Sample\n\n参考GraphicsMagick[官方文档](http://www.graphicsmagick.org/api/types.html#image)\n提取图片基本信息\n\n### Code \n\nimage_info.cpp\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/types.h>\n#include <magick/api.h>\n#include<iostream>\nusing namespace std;\n\nint main ( int argc, char **argv )\n{\n    Image\n        *image = (Image *) NULL;\n\n    char\n        infile[MaxTextExtent],\n        outfile[MaxTextExtent];\n\n    int\n        arg = 1,\n            exit_status = 0;\n\n    ImageInfo\n        *imageInfo;\n\n    ExceptionInfo\n        exception;\n\n    InitializeMagick(NULL);\n    imageInfo=CloneImageInfo(0);\n    GetExceptionInfo(&exception);\n\n    if (argc != 2)\n    {\n        (void) fprintf ( stderr, \"Usage: %s infile\\n\", argv[0] );\n        (void) fflush(stderr);\n        exit_status = 1;\n        goto program_exit;\n    }\n\n    (void) strncpy(infile, argv[arg], MaxTextExtent-1 );\n\n    (void) strcpy(imageInfo->filename, infile);\n    \n    if((image = PingImage(imageInfo,&exception)) == NULL) {\n          printf(\"PingImage fail, path = %s\",infile);\n          exit_status = -1;\n          goto program_exit;\n    }\n    \n    cout << \"image Type:\" << image->magick << endl;\n    cout << \"image width:\" << image->columns << endl;\n    cout << \"image height:\" << image->rows << endl;\n    cout << \"Image colorspace:\" << image->colorspace << endl;\n\n    /*switch(image->colorspace){\n       \n    \n    }*/\n\n\n\n\nprogram_exit:\n\n    if (image != (Image *) NULL)\n        DestroyImage(image);\n\n    if (imageInfo != (ImageInfo *) NULL)\n        DestroyImageInfo(imageInfo);\n    DestroyMagick();\n\n    return exit_status;\n}\n\n```\n\n### 编译\n\n```\ng++ image_info.cpp `GraphicsMagick-config --cppflags --ldflags --libs`\n```\n","slug":"2014-10-09-graphicsmagick-pingImage","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhh0001vqj7lfg6gskeb","content":"<h2 id=\"使用GraphicsMagick提取图片基本信息\"><a href=\"#使用GraphicsMagick提取图片基本信息\" class=\"headerlink\" title=\"使用GraphicsMagick提取图片基本信息\"></a>使用GraphicsMagick提取图片基本信息</h2><p>通过使用<a href=\"http://www.graphicsmagick.org/api/constitute.html#pingimage\" target=\"_blank\" rel=\"external\">PingImage</a>获取图片基本属性。</p>\n<h2 id=\"PingImage\"><a href=\"#PingImage\" class=\"headerlink\" title=\"PingImage\"></a>PingImage</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Image *PingImage( const ImageInfo *image_info, ExceptionInfo *exception );</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>它返回指定图片除像素（Pixels）以外的所有属性。</li>\n<li>相比ReadImage它更快，且使用更少内存。</li>\n<li>执行失败时，返回Image为NULL，且通过exception返回详细失败信息。</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p><strong>image_info </strong><br> 该参数为由文件或文件名初始化的ImageInfo对象</p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><p>参考GraphicsMagick<a href=\"http://www.graphicsmagick.org/api/types.html#image\" target=\"_blank\" rel=\"external\">官方文档</a><br>提取图片基本信息</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>image_info.cpp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;magick/api.h&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( int argc, char **argv )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Image</span><br><span class=\"line\">        *image = (Image *) NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    char</span><br><span class=\"line\">        infile[MaxTextExtent],</span><br><span class=\"line\">        outfile[MaxTextExtent];</span><br><span class=\"line\"></span><br><span class=\"line\">    int</span><br><span class=\"line\">        arg = 1,</span><br><span class=\"line\">            exit_status = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    ImageInfo</span><br><span class=\"line\">        *imageInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExceptionInfo</span><br><span class=\"line\">        exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    InitializeMagick(NULL);</span><br><span class=\"line\">    imageInfo=CloneImageInfo(0);</span><br><span class=\"line\">    GetExceptionInfo(&amp;exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (argc != 2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (void) fprintf ( stderr, &quot;Usage: %s infile\\n&quot;, argv[0] );</span><br><span class=\"line\">        (void) fflush(stderr);</span><br><span class=\"line\">        exit_status = 1;</span><br><span class=\"line\">        goto program_exit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    (void) strncpy(infile, argv[arg], MaxTextExtent-1 );</span><br><span class=\"line\"></span><br><span class=\"line\">    (void) strcpy(imageInfo-&gt;filename, infile);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if((image = PingImage(imageInfo,&amp;exception)) == NULL) &#123;</span><br><span class=\"line\">          printf(&quot;PingImage fail, path = %s&quot;,infile);</span><br><span class=\"line\">          exit_status = -1;</span><br><span class=\"line\">          goto program_exit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; &quot;image Type:&quot; &lt;&lt; image-&gt;magick &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;image width:&quot; &lt;&lt; image-&gt;columns &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;image height:&quot; &lt;&lt; image-&gt;rows &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;Image colorspace:&quot; &lt;&lt; image-&gt;colorspace &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*switch(image-&gt;colorspace)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">program_exit:</span><br><span class=\"line\"></span><br><span class=\"line\">    if (image != (Image *) NULL)</span><br><span class=\"line\">        DestroyImage(image);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (imageInfo != (ImageInfo *) NULL)</span><br><span class=\"line\">        DestroyImageInfo(imageInfo);</span><br><span class=\"line\">    DestroyMagick();</span><br><span class=\"line\"></span><br><span class=\"line\">    return exit_status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ image_info.cpp `GraphicsMagick-config --cppflags --ldflags --libs`</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"使用GraphicsMagick提取图片基本信息\"><a href=\"#使用GraphicsMagick提取图片基本信息\" class=\"headerlink\" title=\"使用GraphicsMagick提取图片基本信息\"></a>使用GraphicsMagick提取图片基本信息</h2><p>通过使用<a href=\"http://www.graphicsmagick.org/api/constitute.html#pingimage\">PingImage</a>获取图片基本属性。</p>\n<h2 id=\"PingImage\"><a href=\"#PingImage\" class=\"headerlink\" title=\"PingImage\"></a>PingImage</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Image *PingImage( const ImageInfo *image_info, ExceptionInfo *exception );</span><br></pre></td></tr></table></figure>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>它返回指定图片除像素（Pixels）以外的所有属性。</li>\n<li>相比ReadImage它更快，且使用更少内存。</li>\n<li>执行失败时，返回Image为NULL，且通过exception返回详细失败信息。</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p><strong>image_info </strong><br> 该参数为由文件或文件名初始化的ImageInfo对象</p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><p>参考GraphicsMagick<a href=\"http://www.graphicsmagick.org/api/types.html#image\">官方文档</a><br>提取图片基本信息</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>image_info.cpp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;magick/api.h&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ( int argc, char **argv )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Image</span><br><span class=\"line\">        *image = (Image *) NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    char</span><br><span class=\"line\">        infile[MaxTextExtent],</span><br><span class=\"line\">        outfile[MaxTextExtent];</span><br><span class=\"line\"></span><br><span class=\"line\">    int</span><br><span class=\"line\">        arg = 1,</span><br><span class=\"line\">            exit_status = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    ImageInfo</span><br><span class=\"line\">        *imageInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    ExceptionInfo</span><br><span class=\"line\">        exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    InitializeMagick(NULL);</span><br><span class=\"line\">    imageInfo=CloneImageInfo(0);</span><br><span class=\"line\">    GetExceptionInfo(&amp;exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (argc != 2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (void) fprintf ( stderr, &quot;Usage: %s infile\\n&quot;, argv[0] );</span><br><span class=\"line\">        (void) fflush(stderr);</span><br><span class=\"line\">        exit_status = 1;</span><br><span class=\"line\">        goto program_exit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    (void) strncpy(infile, argv[arg], MaxTextExtent-1 );</span><br><span class=\"line\"></span><br><span class=\"line\">    (void) strcpy(imageInfo-&gt;filename, infile);</span><br><span class=\"line\">    </span><br><span class=\"line\">    if((image = PingImage(imageInfo,&amp;exception)) == NULL) &#123;</span><br><span class=\"line\">          printf(&quot;PingImage fail, path = %s&quot;,infile);</span><br><span class=\"line\">          exit_status = -1;</span><br><span class=\"line\">          goto program_exit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; &quot;image Type:&quot; &lt;&lt; image-&gt;magick &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;image width:&quot; &lt;&lt; image-&gt;columns &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;image height:&quot; &lt;&lt; image-&gt;rows &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;Image colorspace:&quot; &lt;&lt; image-&gt;colorspace &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    /*switch(image-&gt;colorspace)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">program_exit:</span><br><span class=\"line\"></span><br><span class=\"line\">    if (image != (Image *) NULL)</span><br><span class=\"line\">        DestroyImage(image);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (imageInfo != (ImageInfo *) NULL)</span><br><span class=\"line\">        DestroyImageInfo(imageInfo);</span><br><span class=\"line\">    DestroyMagick();</span><br><span class=\"line\"></span><br><span class=\"line\">    return exit_status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ image_info.cpp `GraphicsMagick-config --cppflags --ldflags --libs`</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"使用GraphicsMagick拼接图片","keywords":["GraphicsMagick","CompositeImage"],"description":"Composite Image with graphicsMagick ","comments":1,"_content":"\n## 使用GraphicsMagick拼接图片(打图片水印)\n\n通过使用[CompositeImage](http://www.graphicsmagick.org/api/composite.html)给图片打图片水印\n\n## CompositeImage\n### 语法\n\n```\nMagickPassFail CompositeImage( Image *canvas_image, const CompositeOperator compose,\n                               const Image *composite_image, const long x_offset,\n                               const long y_offset );\n\n```\n该接口将第二张图片（composite_image）拼接到第一张图片(canvas_image)的指定偏移上（x_offset,y_offset）\n\n### 参数\n**canvas_image**\n\n画布，顾名思义，需要被修改的图对象\n\n**compose**\n\n该参数指定了[拼接算法](http://www.graphicsmagick.org/api/types.html#compositeoperator)，主要有以下几种方式：\n\n算法 | 描述\n----  | ------\nOverCompositeOp |   结果为composite_image覆盖在canvas_image指定位置上\nInCompositeOp | 看不出与OverCompositeOp的区别 \nOutCompositeOp | 测试结果发现得到的图片为canvas_image\nAtopCompositeOp | 看不出与OverCompositeOp的区别 \nXorCompositeOp | 结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为黑色\nPlusCompositeOp| 结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255以255记\nMinusCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的记0\nAddCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255对256取模\nSubtractCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的对256取模\nDifferenceCompositeOp| 用于比较两图是否相同（测试结果貌似不太符合预计?）\nBumpmapCompositeOp|在canvas_image指定位置上打composite_image阴影\nCopyCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，哑光信息被忽略。\nCopyRedCompositeOp|结果为提取composite_image的red layer覆盖在canvas_image指定位置上\nCopyGreenCompositeOp|结果为提取composite_image的green layer覆盖在canvas_image指定位置上\nCopyBlueCompositeOp|结果为提取composite_image的blue layer覆盖在canvas_image指定位置上\nCopyOpacityCompositeOp|结果为提取composite_image的matte layer覆盖在canvas_image指定位置上\nClearCompositeOp|原图？\nDissolveCompositeOp|原图？\nDisplaceCompositeOp|对应位置有composite_image透明的阴影？\nModulateCompositeOp|调节[ HSL space](http://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4)的亮度？\nThresholdCompositeOp|打阴影？\nNoCompositeOp|不做任何事\nDarkenCompositeOp| 结果为composite_image比canvas_image暗部分覆盖在canvas_image指定位置上？\nLightenCompositeOp|结果为composite_image比canvas_image亮部分覆盖在canvas_image指定位置上？\n...|...\n\n**composite_image**\n\n复合图对象\n\n**x_offset**\n\n原图上的拼接列偏移\n\n**y_offset**\n\n原图上的拼接行偏移\n\n## Sample\n\n参考GraphicsMagick [CompositeImage](http://www.graphicsmagick.org/api/composite.html)给图片打图片水印\n\n加透明度后的水印\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/disslove.jpg\" alt=\"disslove.jpg\" title=\"disslove.jpg\" width=\"400\" />\n\n### Code \n\n [composite.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/composite.cpp)\n \n","source":"_posts/2014-10-11-graphicsmagick-CompositeImage.md","raw":"---\nlayout: post\ntitle: \"使用GraphicsMagick拼接图片\"\nkeywords: [\"GraphicsMagick\", \"CompositeImage\"]\ndescription: \"Composite Image with graphicsMagick \"\ncategory: \"GraphicsMagick\"\ntags: [\"GraphicsMagick\"]\ncomments: true\n---\n\n## 使用GraphicsMagick拼接图片(打图片水印)\n\n通过使用[CompositeImage](http://www.graphicsmagick.org/api/composite.html)给图片打图片水印\n\n## CompositeImage\n### 语法\n\n```\nMagickPassFail CompositeImage( Image *canvas_image, const CompositeOperator compose,\n                               const Image *composite_image, const long x_offset,\n                               const long y_offset );\n\n```\n该接口将第二张图片（composite_image）拼接到第一张图片(canvas_image)的指定偏移上（x_offset,y_offset）\n\n### 参数\n**canvas_image**\n\n画布，顾名思义，需要被修改的图对象\n\n**compose**\n\n该参数指定了[拼接算法](http://www.graphicsmagick.org/api/types.html#compositeoperator)，主要有以下几种方式：\n\n算法 | 描述\n----  | ------\nOverCompositeOp |   结果为composite_image覆盖在canvas_image指定位置上\nInCompositeOp | 看不出与OverCompositeOp的区别 \nOutCompositeOp | 测试结果发现得到的图片为canvas_image\nAtopCompositeOp | 看不出与OverCompositeOp的区别 \nXorCompositeOp | 结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为黑色\nPlusCompositeOp| 结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255以255记\nMinusCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的记0\nAddCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255对256取模\nSubtractCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的对256取模\nDifferenceCompositeOp| 用于比较两图是否相同（测试结果貌似不太符合预计?）\nBumpmapCompositeOp|在canvas_image指定位置上打composite_image阴影\nCopyCompositeOp|结果为composite_image覆盖在canvas_image指定位置上，哑光信息被忽略。\nCopyRedCompositeOp|结果为提取composite_image的red layer覆盖在canvas_image指定位置上\nCopyGreenCompositeOp|结果为提取composite_image的green layer覆盖在canvas_image指定位置上\nCopyBlueCompositeOp|结果为提取composite_image的blue layer覆盖在canvas_image指定位置上\nCopyOpacityCompositeOp|结果为提取composite_image的matte layer覆盖在canvas_image指定位置上\nClearCompositeOp|原图？\nDissolveCompositeOp|原图？\nDisplaceCompositeOp|对应位置有composite_image透明的阴影？\nModulateCompositeOp|调节[ HSL space](http://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4)的亮度？\nThresholdCompositeOp|打阴影？\nNoCompositeOp|不做任何事\nDarkenCompositeOp| 结果为composite_image比canvas_image暗部分覆盖在canvas_image指定位置上？\nLightenCompositeOp|结果为composite_image比canvas_image亮部分覆盖在canvas_image指定位置上？\n...|...\n\n**composite_image**\n\n复合图对象\n\n**x_offset**\n\n原图上的拼接列偏移\n\n**y_offset**\n\n原图上的拼接行偏移\n\n## Sample\n\n参考GraphicsMagick [CompositeImage](http://www.graphicsmagick.org/api/composite.html)给图片打图片水印\n\n加透明度后的水印\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/disslove.jpg\" alt=\"disslove.jpg\" title=\"disslove.jpg\" width=\"400\" />\n\n### Code \n\n [composite.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/composite.cpp)\n \n","slug":"2014-10-11-graphicsmagick-CompositeImage","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhh2001yqj7lt04ou2q0","content":"<h2 id=\"使用GraphicsMagick拼接图片-打图片水印\"><a href=\"#使用GraphicsMagick拼接图片-打图片水印\" class=\"headerlink\" title=\"使用GraphicsMagick拼接图片(打图片水印)\"></a>使用GraphicsMagick拼接图片(打图片水印)</h2><p>通过使用<a href=\"http://www.graphicsmagick.org/api/composite.html\" target=\"_blank\" rel=\"external\">CompositeImage</a>给图片打图片水印</p>\n<h2 id=\"CompositeImage\"><a href=\"#CompositeImage\" class=\"headerlink\" title=\"CompositeImage\"></a>CompositeImage</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MagickPassFail CompositeImage( Image *canvas_image, const CompositeOperator compose,</span><br><span class=\"line\">                               const Image *composite_image, const long x_offset,</span><br><span class=\"line\">                               const long y_offset );</span><br></pre></td></tr></table></figure>\n<p>该接口将第二张图片（composite_image）拼接到第一张图片(canvas_image)的指定偏移上（x_offset,y_offset）</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p><strong>canvas_image</strong></p>\n<p>画布，顾名思义，需要被修改的图对象</p>\n<p><strong>compose</strong></p>\n<p>该参数指定了<a href=\"http://www.graphicsmagick.org/api/types.html#compositeoperator\" target=\"_blank\" rel=\"external\">拼接算法</a>，主要有以下几种方式：</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OverCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>InCompositeOp</td>\n<td>看不出与OverCompositeOp的区别 </td>\n</tr>\n<tr>\n<td>OutCompositeOp</td>\n<td>测试结果发现得到的图片为canvas_image</td>\n</tr>\n<tr>\n<td>AtopCompositeOp</td>\n<td>看不出与OverCompositeOp的区别 </td>\n</tr>\n<tr>\n<td>XorCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为黑色</td>\n</tr>\n<tr>\n<td>PlusCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255以255记</td>\n</tr>\n<tr>\n<td>MinusCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的记0</td>\n</tr>\n<tr>\n<td>AddCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255对256取模</td>\n</tr>\n<tr>\n<td>SubtractCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的对256取模</td>\n</tr>\n<tr>\n<td>DifferenceCompositeOp</td>\n<td>用于比较两图是否相同（测试结果貌似不太符合预计?）</td>\n</tr>\n<tr>\n<td>BumpmapCompositeOp</td>\n<td>在canvas_image指定位置上打composite_image阴影</td>\n</tr>\n<tr>\n<td>CopyCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，哑光信息被忽略。</td>\n</tr>\n<tr>\n<td>CopyRedCompositeOp</td>\n<td>结果为提取composite_image的red layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>CopyGreenCompositeOp</td>\n<td>结果为提取composite_image的green layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>CopyBlueCompositeOp</td>\n<td>结果为提取composite_image的blue layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>CopyOpacityCompositeOp</td>\n<td>结果为提取composite_image的matte layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>ClearCompositeOp</td>\n<td>原图？</td>\n</tr>\n<tr>\n<td>DissolveCompositeOp</td>\n<td>原图？</td>\n</tr>\n<tr>\n<td>DisplaceCompositeOp</td>\n<td>对应位置有composite_image透明的阴影？</td>\n</tr>\n<tr>\n<td>ModulateCompositeOp</td>\n<td>调节<a href=\"http://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4\" target=\"_blank\" rel=\"external\"> HSL space</a>的亮度？</td>\n</tr>\n<tr>\n<td>ThresholdCompositeOp</td>\n<td>打阴影？</td>\n</tr>\n<tr>\n<td>NoCompositeOp</td>\n<td>不做任何事</td>\n</tr>\n<tr>\n<td>DarkenCompositeOp</td>\n<td>结果为composite_image比canvas_image暗部分覆盖在canvas_image指定位置上？</td>\n</tr>\n<tr>\n<td>LightenCompositeOp</td>\n<td>结果为composite_image比canvas_image亮部分覆盖在canvas_image指定位置上？</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p><strong>composite_image</strong></p>\n<p>复合图对象</p>\n<p><strong>x_offset</strong></p>\n<p>原图上的拼接列偏移</p>\n<p><strong>y_offset</strong></p>\n<p>原图上的拼接行偏移</p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><p>参考GraphicsMagick <a href=\"http://www.graphicsmagick.org/api/composite.html\" target=\"_blank\" rel=\"external\">CompositeImage</a>给图片打图片水印</p>\n<p>加透明度后的水印</p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/disslove.jpg\" alt=\"disslove.jpg\" title=\"disslove.jpg\" width=\"400\"></p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p> <a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/composite.cpp\" target=\"_blank\" rel=\"external\">composite.cpp</a></p>\n","excerpt":"","more":"<h2 id=\"使用GraphicsMagick拼接图片-打图片水印\"><a href=\"#使用GraphicsMagick拼接图片-打图片水印\" class=\"headerlink\" title=\"使用GraphicsMagick拼接图片(打图片水印)\"></a>使用GraphicsMagick拼接图片(打图片水印)</h2><p>通过使用<a href=\"http://www.graphicsmagick.org/api/composite.html\">CompositeImage</a>给图片打图片水印</p>\n<h2 id=\"CompositeImage\"><a href=\"#CompositeImage\" class=\"headerlink\" title=\"CompositeImage\"></a>CompositeImage</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MagickPassFail CompositeImage( Image *canvas_image, const CompositeOperator compose,</span><br><span class=\"line\">                               const Image *composite_image, const long x_offset,</span><br><span class=\"line\">                               const long y_offset );</span><br></pre></td></tr></table></figure>\n<p>该接口将第二张图片（composite_image）拼接到第一张图片(canvas_image)的指定偏移上（x_offset,y_offset）</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p><strong>canvas_image</strong></p>\n<p>画布，顾名思义，需要被修改的图对象</p>\n<p><strong>compose</strong></p>\n<p>该参数指定了<a href=\"http://www.graphicsmagick.org/api/types.html#compositeoperator\">拼接算法</a>，主要有以下几种方式：</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OverCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>InCompositeOp</td>\n<td>看不出与OverCompositeOp的区别 </td>\n</tr>\n<tr>\n<td>OutCompositeOp</td>\n<td>测试结果发现得到的图片为canvas_image</td>\n</tr>\n<tr>\n<td>AtopCompositeOp</td>\n<td>看不出与OverCompositeOp的区别 </td>\n</tr>\n<tr>\n<td>XorCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为黑色</td>\n</tr>\n<tr>\n<td>PlusCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255以255记</td>\n</tr>\n<tr>\n<td>MinusCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的记0</td>\n</tr>\n<tr>\n<td>AddCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据之和，超过255对256取模</td>\n</tr>\n<tr>\n<td>SubtractCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，其中重叠部分为图片数据canvas_image-composite_image，小于0的对256取模</td>\n</tr>\n<tr>\n<td>DifferenceCompositeOp</td>\n<td>用于比较两图是否相同（测试结果貌似不太符合预计?）</td>\n</tr>\n<tr>\n<td>BumpmapCompositeOp</td>\n<td>在canvas_image指定位置上打composite_image阴影</td>\n</tr>\n<tr>\n<td>CopyCompositeOp</td>\n<td>结果为composite_image覆盖在canvas_image指定位置上，哑光信息被忽略。</td>\n</tr>\n<tr>\n<td>CopyRedCompositeOp</td>\n<td>结果为提取composite_image的red layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>CopyGreenCompositeOp</td>\n<td>结果为提取composite_image的green layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>CopyBlueCompositeOp</td>\n<td>结果为提取composite_image的blue layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>CopyOpacityCompositeOp</td>\n<td>结果为提取composite_image的matte layer覆盖在canvas_image指定位置上</td>\n</tr>\n<tr>\n<td>ClearCompositeOp</td>\n<td>原图？</td>\n</tr>\n<tr>\n<td>DissolveCompositeOp</td>\n<td>原图？</td>\n</tr>\n<tr>\n<td>DisplaceCompositeOp</td>\n<td>对应位置有composite_image透明的阴影？</td>\n</tr>\n<tr>\n<td>ModulateCompositeOp</td>\n<td>调节<a href=\"http://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4\"> HSL space</a>的亮度？</td>\n</tr>\n<tr>\n<td>ThresholdCompositeOp</td>\n<td>打阴影？</td>\n</tr>\n<tr>\n<td>NoCompositeOp</td>\n<td>不做任何事</td>\n</tr>\n<tr>\n<td>DarkenCompositeOp</td>\n<td>结果为composite_image比canvas_image暗部分覆盖在canvas_image指定位置上？</td>\n</tr>\n<tr>\n<td>LightenCompositeOp</td>\n<td>结果为composite_image比canvas_image亮部分覆盖在canvas_image指定位置上？</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p><strong>composite_image</strong></p>\n<p>复合图对象</p>\n<p><strong>x_offset</strong></p>\n<p>原图上的拼接列偏移</p>\n<p><strong>y_offset</strong></p>\n<p>原图上的拼接行偏移</p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><p>参考GraphicsMagick <a href=\"http://www.graphicsmagick.org/api/composite.html\">CompositeImage</a>给图片打图片水印</p>\n<p>加透明度后的水印</p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/disslove.jpg\" alt=\"disslove.jpg\" title=\"disslove.jpg\" width=\"400\" /></p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p> <a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/composite.cpp\">composite.cpp</a></p>\n"},{"layout":"post","title":"使用GraphicsMagick打文字水印","keywords":["GraphicsMagick","AnnotateImage"],"description":"annotate pic  with graphicsMagick ","comments":1,"_content":"\n## 使用GraphicsMagick打文字水印\n\n使用[AnnotateImage](http://www.graphicsmagick.org/api/annotate.html)给图片打文字水印\n\n## 语法\n\n```\nunsigned int AnnotateImage( Image *image, DrawInfo *draw_info );\n```\n\n### DrawInfo\n\n[DrawInfo](http://www.graphicsmagick.org/api/types.html#drawinfo)数据结构用来支持通过使用绘图命令给图片注释\n主要方法\n\n方法|说明\n----- |-------\nvoid \tGetDrawInfo (const ImageInfo *, DrawInfo *)|使用默认参数分配一个DrawInfo对象\n\nDrawInfo *CloneDrawInfo( const ImageInfo *image_info, const DrawInfo *draw_info )|分配一个对象，并从其它对象拷贝所有值，若参数为空，则使用默认参数初始化对象。\n\nvoid DestroyDrawInfo( DrawInfo *draw_info )|[DestroyDrawInfo](http://www.graphicsmagick.org/api/render.html#destroydrawinfo)释放DrawInfo空间\n\nDrawImage( Image *image, const DrawInfo *draw_info )|在当前图上画东西，这个东西可以是一个字符串，也可以是文件名。用@作为前缀表示是个文件名，对因文件内容将被画在图片上。注意：该接口已经很老了，可以使用Draw这个方法替代。\n\nMD，连个Sample的搜不到，半路出家玩图片的哪懂那些专业术语，想杀人XXXXXXXXXXXX\n\n## 参数说明：\n\n参数 |类型 |说明\n----- |-------- |--------\nfont|char *|渲染文字使用的字体所在文件路径，不可为空\ngravity|(NorthWest,North,NorthEast, West,Center,East, SouthWest,South,SouthEast)|渲染文字所在位置重心，左上，中上，右上，左中，中间，右中，左下，中下，右下\npointsize|double|渲染文字大小\ngeometry|char *|文字编码后所占矩形的大小，sample \"+100+100\"\n\n## 案例\n代码[annotate.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/annotate.cpp)\n效果：\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/annotate.jpg\" alt=\"annotate.jpg\" title=\"annotate.jpg\" width=\"400\" />\n\n\n\n\n","source":"_posts/2014-10-13-annotate_image.md","raw":"---\nlayout: post\ntitle: \"使用GraphicsMagick打文字水印\"\nkeywords: [\"GraphicsMagick\", \"AnnotateImage\"]\ndescription: \"annotate pic  with graphicsMagick \"\ncategory: \"GraphicsMagick\"\ntags: [\"GraphicsMagick\"]\ncomments: true\n---\n\n## 使用GraphicsMagick打文字水印\n\n使用[AnnotateImage](http://www.graphicsmagick.org/api/annotate.html)给图片打文字水印\n\n## 语法\n\n```\nunsigned int AnnotateImage( Image *image, DrawInfo *draw_info );\n```\n\n### DrawInfo\n\n[DrawInfo](http://www.graphicsmagick.org/api/types.html#drawinfo)数据结构用来支持通过使用绘图命令给图片注释\n主要方法\n\n方法|说明\n----- |-------\nvoid \tGetDrawInfo (const ImageInfo *, DrawInfo *)|使用默认参数分配一个DrawInfo对象\n\nDrawInfo *CloneDrawInfo( const ImageInfo *image_info, const DrawInfo *draw_info )|分配一个对象，并从其它对象拷贝所有值，若参数为空，则使用默认参数初始化对象。\n\nvoid DestroyDrawInfo( DrawInfo *draw_info )|[DestroyDrawInfo](http://www.graphicsmagick.org/api/render.html#destroydrawinfo)释放DrawInfo空间\n\nDrawImage( Image *image, const DrawInfo *draw_info )|在当前图上画东西，这个东西可以是一个字符串，也可以是文件名。用@作为前缀表示是个文件名，对因文件内容将被画在图片上。注意：该接口已经很老了，可以使用Draw这个方法替代。\n\nMD，连个Sample的搜不到，半路出家玩图片的哪懂那些专业术语，想杀人XXXXXXXXXXXX\n\n## 参数说明：\n\n参数 |类型 |说明\n----- |-------- |--------\nfont|char *|渲染文字使用的字体所在文件路径，不可为空\ngravity|(NorthWest,North,NorthEast, West,Center,East, SouthWest,South,SouthEast)|渲染文字所在位置重心，左上，中上，右上，左中，中间，右中，左下，中下，右下\npointsize|double|渲染文字大小\ngeometry|char *|文字编码后所占矩形的大小，sample \"+100+100\"\n\n## 案例\n代码[annotate.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/annotate.cpp)\n效果：\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/annotate.jpg\" alt=\"annotate.jpg\" title=\"annotate.jpg\" width=\"400\" />\n\n\n\n\n","slug":"2014-10-13-annotate_image","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhh40023qj7lep50kgz4","content":"<h2 id=\"使用GraphicsMagick打文字水印\"><a href=\"#使用GraphicsMagick打文字水印\" class=\"headerlink\" title=\"使用GraphicsMagick打文字水印\"></a>使用GraphicsMagick打文字水印</h2><p>使用<a href=\"http://www.graphicsmagick.org/api/annotate.html\" target=\"_blank\" rel=\"external\">AnnotateImage</a>给图片打文字水印</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int AnnotateImage( Image *image, DrawInfo *draw_info );</span><br></pre></td></tr></table></figure>\n<h3 id=\"DrawInfo\"><a href=\"#DrawInfo\" class=\"headerlink\" title=\"DrawInfo\"></a>DrawInfo</h3><p><a href=\"http://www.graphicsmagick.org/api/types.html#drawinfo\" target=\"_blank\" rel=\"external\">DrawInfo</a>数据结构用来支持通过使用绘图命令给图片注释<br>主要方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void     GetDrawInfo (const ImageInfo <em>, DrawInfo </em>)</td>\n<td>使用默认参数分配一个DrawInfo对象</td>\n</tr>\n</tbody>\n</table>\n<p>DrawInfo <em>CloneDrawInfo( const ImageInfo </em>image_info, const DrawInfo *draw_info )|分配一个对象，并从其它对象拷贝所有值，若参数为空，则使用默认参数初始化对象。</p>\n<p>void DestroyDrawInfo( DrawInfo *draw_info )|<a href=\"http://www.graphicsmagick.org/api/render.html#destroydrawinfo\" target=\"_blank\" rel=\"external\">DestroyDrawInfo</a>释放DrawInfo空间</p>\n<p>DrawImage( Image <em>image, const DrawInfo </em>draw_info )|在当前图上画东西，这个东西可以是一个字符串，也可以是文件名。用@作为前缀表示是个文件名，对因文件内容将被画在图片上。注意：该接口已经很老了，可以使用Draw这个方法替代。</p>\n<p>MD，连个Sample的搜不到，半路出家玩图片的哪懂那些专业术语，想杀人XXXXXXXXXXXX</p>\n<h2 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>font</td>\n<td>char *</td>\n<td>渲染文字使用的字体所在文件路径，不可为空</td>\n</tr>\n<tr>\n<td>gravity</td>\n<td>(NorthWest,North,NorthEast, West,Center,East, SouthWest,South,SouthEast)</td>\n<td>渲染文字所在位置重心，左上，中上，右上，左中，中间，右中，左下，中下，右下</td>\n</tr>\n<tr>\n<td>pointsize</td>\n<td>double</td>\n<td>渲染文字大小</td>\n</tr>\n<tr>\n<td>geometry</td>\n<td>char *</td>\n<td>文字编码后所占矩形的大小，sample “+100+100”</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>代码<a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/annotate.cpp\" target=\"_blank\" rel=\"external\">annotate.cpp</a><br>效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/annotate.jpg\" alt=\"annotate.jpg\" title=\"annotate.jpg\" width=\"400\"></p>\n","excerpt":"","more":"<h2 id=\"使用GraphicsMagick打文字水印\"><a href=\"#使用GraphicsMagick打文字水印\" class=\"headerlink\" title=\"使用GraphicsMagick打文字水印\"></a>使用GraphicsMagick打文字水印</h2><p>使用<a href=\"http://www.graphicsmagick.org/api/annotate.html\">AnnotateImage</a>给图片打文字水印</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsigned int AnnotateImage( Image *image, DrawInfo *draw_info );</span><br></pre></td></tr></table></figure>\n<h3 id=\"DrawInfo\"><a href=\"#DrawInfo\" class=\"headerlink\" title=\"DrawInfo\"></a>DrawInfo</h3><p><a href=\"http://www.graphicsmagick.org/api/types.html#drawinfo\">DrawInfo</a>数据结构用来支持通过使用绘图命令给图片注释<br>主要方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void     GetDrawInfo (const ImageInfo <em>, DrawInfo </em>)</td>\n<td>使用默认参数分配一个DrawInfo对象</td>\n</tr>\n</tbody>\n</table>\n<p>DrawInfo <em>CloneDrawInfo( const ImageInfo </em>image_info, const DrawInfo *draw_info )|分配一个对象，并从其它对象拷贝所有值，若参数为空，则使用默认参数初始化对象。</p>\n<p>void DestroyDrawInfo( DrawInfo *draw_info )|<a href=\"http://www.graphicsmagick.org/api/render.html#destroydrawinfo\">DestroyDrawInfo</a>释放DrawInfo空间</p>\n<p>DrawImage( Image <em>image, const DrawInfo </em>draw_info )|在当前图上画东西，这个东西可以是一个字符串，也可以是文件名。用@作为前缀表示是个文件名，对因文件内容将被画在图片上。注意：该接口已经很老了，可以使用Draw这个方法替代。</p>\n<p>MD，连个Sample的搜不到，半路出家玩图片的哪懂那些专业术语，想杀人XXXXXXXXXXXX</p>\n<h2 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>font</td>\n<td>char *</td>\n<td>渲染文字使用的字体所在文件路径，不可为空</td>\n</tr>\n<tr>\n<td>gravity</td>\n<td>(NorthWest,North,NorthEast, West,Center,East, SouthWest,South,SouthEast)</td>\n<td>渲染文字所在位置重心，左上，中上，右上，左中，中间，右中，左下，中下，右下</td>\n</tr>\n<tr>\n<td>pointsize</td>\n<td>double</td>\n<td>渲染文字大小</td>\n</tr>\n<tr>\n<td>geometry</td>\n<td>char *</td>\n<td>文字编码后所占矩形的大小，sample “+100+100”</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>代码<a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/annotate.cpp\">annotate.cpp</a><br>效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/annotate.jpg\" alt=\"annotate.jpg\" title=\"annotate.jpg\" width=\"400\" /></p>\n"},{"layout":"post","title":"使用GraphicsMagick添加webp支持","keywords":["GraphicsMagick","webp"],"description":"support webp  in graphicsMagick ","comments":1,"_content":"\n## WEBP支持\n\n### 安装配置\n\n#### software\n\n   * GraphicsMagick 1.3.20 \n   * https://webp.googlecode.com/files/libwebp-0.4.0.tar.gz\n\n## install\n\n   * 编译安装libwebp\n   * 编译安装GraphicsMagicks时，指定libwebp安装位置：\n  \n```\n    ./configure  --prefix=/home/wuxuelian/software/graphicsmagick/build CPPFLAGS='-I/home/wuxuelian/software/libwebp/build/include' LDFLAGS='-L/home/wuxuelian/software/libwebp/build/lib' \n\n```\n    \n确保Configure结果中WEBP那项为YES\n\n```\nGraphicsMagick is configured as follows. Please verify that this\nconfiguration matches your expectations.\n\nHost system type : x86_64-apple-darwin14.0.0\nBuild system type : x86_64-apple-darwin14.0.0\n\nOption            Configure option           \tConfigured value\n-----------------------------------------------------------------\nShared libraries  --enable-shared=no    \tno\nStatic libraries  --enable-static=yes    \tyes\nGNU ld            --with-gnu-ld=no        \tno\nQuantum depth     --with-quantum-depth=8 \t8\nModules           --with-modules=no        \tno\n\nDelegate Configuration:\nBZLIB             --with-bzlib=yes          \tyes\nDPS               --with-dps=yes              \tno\nFlashPIX          --with-fpx=no              \tno\nFreeType 2.0      --with-ttf=yes          \tyes\nGhostscript       None                   \tgs (unknown)\nGhostscript fonts --with-gs-font-dir=default    none\nGhostscript lib   --with-gslib=no       \tno\nJBIG              --with-jbig=yes        \tno\nWEBP              --with-webp=yes        \tyes\nJPEG v1           --with-jpeg=yes        \tyes\nJPEG-2000         --with-jp2=yes          \tno\nLCMS v1           --with-lcms=yes        \tno\nLCMS v2           --with-lcms2=yes        \tno\nLZMA              --with-lzma=yes        \tno (failed tests)\nMagick++          --with-magick-plus-plus=yes \tyes\nPERL              --with-perl=no            \tno\nPNG               --with-png=yes          \tyes (-lpng16)\nTIFF              --with-tiff=yes        \tno\nTRIO              --with-trio=yes        \tno\nWindows fonts     --with-windows-font-dir=\tnone\nWMF               --with-wmf=yes          \tno\nX11               --with-x=             \tno\nXML               --with-xml=yes          \tyes\nZLIB              --with-zlib=yes        \tyes\n\nX11 Configuration:\n\n  Not using X11.\n\nOptions used to compile and link:\n  CC       = gcc\n  CFLAGS   = -g -O2 -Wall -D_THREAD_SAFE\n  CPPFLAGS = -I/usr/local/Cellar/freetype/2.5.3_1/include/freetype2 -I/usr/local/include/libxml2\n  CXX      = g++\n  CXXFLAGS = -D_THREAD_SAFE\n  DEFS     = -DHAVE_CONFIG_H\n  LDFLAGS  = -L/usr/local/Cellar/freetype/2.5.3_1/lib -L/usr/local/lib\n  LIBS     = -lwebp -lfreetype -ljpeg -lpng16 -lbz2 -lxml2 -lz -lm -lpthread\n```\n\n#### 测试安装是否成功\n\n```\n[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ gm convert data/god.jpg god.webp\n[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ exiftool god.webp \nExifTool Version Number         : 9.72\nFile Name                       : god.webp\nDirectory                       : .\nFile Size                       : 29 kB\nFile Modification Date/Time     : 2014:10:23 17:28:08+08:00\nFile Access Date/Time           : 2014:10:23 16:52:01+08:00\nFile Inode Change Date/Time     : 2014:10:23 17:28:08+08:00\nFile Permissions                : rw-r--r--\nFile Type                       : WEBP\nMIME Type                       : image/webp\nVP8 Version                     : 0 (bicubic reconstruction, normal loop)\nImage Width                     : 1024\nHorizontal Scale                : 0\nImage Height                    : 768\nVertical Scale                  : 0\nImage Size                      : 1024x768\n```\n\n### 其它功能支持\n\n#### 不支持interlace渐近功能\n","source":"_posts/2014-10-17-graphicsmagick-webp.md","raw":"---\nlayout: post\ntitle: \"使用GraphicsMagick添加webp支持\"\nkeywords: [\"GraphicsMagick\", \"webp\"]\ndescription: \"support webp  in graphicsMagick \"\ncategory: \"GraphicsMagick\"\ntags: [\"GraphicsMagick\"]\ncomments: true\n---\n\n## WEBP支持\n\n### 安装配置\n\n#### software\n\n   * GraphicsMagick 1.3.20 \n   * https://webp.googlecode.com/files/libwebp-0.4.0.tar.gz\n\n## install\n\n   * 编译安装libwebp\n   * 编译安装GraphicsMagicks时，指定libwebp安装位置：\n  \n```\n    ./configure  --prefix=/home/wuxuelian/software/graphicsmagick/build CPPFLAGS='-I/home/wuxuelian/software/libwebp/build/include' LDFLAGS='-L/home/wuxuelian/software/libwebp/build/lib' \n\n```\n    \n确保Configure结果中WEBP那项为YES\n\n```\nGraphicsMagick is configured as follows. Please verify that this\nconfiguration matches your expectations.\n\nHost system type : x86_64-apple-darwin14.0.0\nBuild system type : x86_64-apple-darwin14.0.0\n\nOption            Configure option           \tConfigured value\n-----------------------------------------------------------------\nShared libraries  --enable-shared=no    \tno\nStatic libraries  --enable-static=yes    \tyes\nGNU ld            --with-gnu-ld=no        \tno\nQuantum depth     --with-quantum-depth=8 \t8\nModules           --with-modules=no        \tno\n\nDelegate Configuration:\nBZLIB             --with-bzlib=yes          \tyes\nDPS               --with-dps=yes              \tno\nFlashPIX          --with-fpx=no              \tno\nFreeType 2.0      --with-ttf=yes          \tyes\nGhostscript       None                   \tgs (unknown)\nGhostscript fonts --with-gs-font-dir=default    none\nGhostscript lib   --with-gslib=no       \tno\nJBIG              --with-jbig=yes        \tno\nWEBP              --with-webp=yes        \tyes\nJPEG v1           --with-jpeg=yes        \tyes\nJPEG-2000         --with-jp2=yes          \tno\nLCMS v1           --with-lcms=yes        \tno\nLCMS v2           --with-lcms2=yes        \tno\nLZMA              --with-lzma=yes        \tno (failed tests)\nMagick++          --with-magick-plus-plus=yes \tyes\nPERL              --with-perl=no            \tno\nPNG               --with-png=yes          \tyes (-lpng16)\nTIFF              --with-tiff=yes        \tno\nTRIO              --with-trio=yes        \tno\nWindows fonts     --with-windows-font-dir=\tnone\nWMF               --with-wmf=yes          \tno\nX11               --with-x=             \tno\nXML               --with-xml=yes          \tyes\nZLIB              --with-zlib=yes        \tyes\n\nX11 Configuration:\n\n  Not using X11.\n\nOptions used to compile and link:\n  CC       = gcc\n  CFLAGS   = -g -O2 -Wall -D_THREAD_SAFE\n  CPPFLAGS = -I/usr/local/Cellar/freetype/2.5.3_1/include/freetype2 -I/usr/local/include/libxml2\n  CXX      = g++\n  CXXFLAGS = -D_THREAD_SAFE\n  DEFS     = -DHAVE_CONFIG_H\n  LDFLAGS  = -L/usr/local/Cellar/freetype/2.5.3_1/lib -L/usr/local/lib\n  LIBS     = -lwebp -lfreetype -ljpeg -lpng16 -lbz2 -lxml2 -lz -lm -lpthread\n```\n\n#### 测试安装是否成功\n\n```\n[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ gm convert data/god.jpg god.webp\n[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ exiftool god.webp \nExifTool Version Number         : 9.72\nFile Name                       : god.webp\nDirectory                       : .\nFile Size                       : 29 kB\nFile Modification Date/Time     : 2014:10:23 17:28:08+08:00\nFile Access Date/Time           : 2014:10:23 16:52:01+08:00\nFile Inode Change Date/Time     : 2014:10:23 17:28:08+08:00\nFile Permissions                : rw-r--r--\nFile Type                       : WEBP\nMIME Type                       : image/webp\nVP8 Version                     : 0 (bicubic reconstruction, normal loop)\nImage Width                     : 1024\nHorizontal Scale                : 0\nImage Height                    : 768\nVertical Scale                  : 0\nImage Size                      : 1024x768\n```\n\n### 其它功能支持\n\n#### 不支持interlace渐近功能\n","slug":"2014-10-17-graphicsmagick-webp","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhh50026qj7lbk457g18","content":"<h2 id=\"WEBP支持\"><a href=\"#WEBP支持\" class=\"headerlink\" title=\"WEBP支持\"></a>WEBP支持</h2><h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><h4 id=\"software\"><a href=\"#software\" class=\"headerlink\" title=\"software\"></a>software</h4><ul>\n<li>GraphicsMagick 1.3.20 </li>\n<li><a href=\"https://webp.googlecode.com/files/libwebp-0.4.0.tar.gz\" target=\"_blank\" rel=\"external\">https://webp.googlecode.com/files/libwebp-0.4.0.tar.gz</a></li>\n</ul>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><ul>\n<li>编译安装libwebp</li>\n<li>编译安装GraphicsMagicks时，指定libwebp安装位置：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  --prefix=/home/wuxuelian/software/graphicsmagick/build CPPFLAGS=&apos;-I/home/wuxuelian/software/libwebp/build/include&apos; LDFLAGS=&apos;-L/home/wuxuelian/software/libwebp/build/lib&apos;</span><br></pre></td></tr></table></figure>\n<p>确保Configure结果中WEBP那项为YES</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GraphicsMagick is configured as follows. Please verify that this</span><br><span class=\"line\">configuration matches your expectations.</span><br><span class=\"line\"></span><br><span class=\"line\">Host system type : x86_64-apple-darwin14.0.0</span><br><span class=\"line\">Build system type : x86_64-apple-darwin14.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">Option            Configure option           \tConfigured value</span><br><span class=\"line\">-----------------------------------------------------------------</span><br><span class=\"line\">Shared libraries  --enable-shared=no    \tno</span><br><span class=\"line\">Static libraries  --enable-static=yes    \tyes</span><br><span class=\"line\">GNU ld            --with-gnu-ld=no        \tno</span><br><span class=\"line\">Quantum depth     --with-quantum-depth=8 \t8</span><br><span class=\"line\">Modules           --with-modules=no        \tno</span><br><span class=\"line\"></span><br><span class=\"line\">Delegate Configuration:</span><br><span class=\"line\">BZLIB             --with-bzlib=yes          \tyes</span><br><span class=\"line\">DPS               --with-dps=yes              \tno</span><br><span class=\"line\">FlashPIX          --with-fpx=no              \tno</span><br><span class=\"line\">FreeType 2.0      --with-ttf=yes          \tyes</span><br><span class=\"line\">Ghostscript       None                   \tgs (unknown)</span><br><span class=\"line\">Ghostscript fonts --with-gs-font-dir=default    none</span><br><span class=\"line\">Ghostscript lib   --with-gslib=no       \tno</span><br><span class=\"line\">JBIG              --with-jbig=yes        \tno</span><br><span class=\"line\">WEBP              --with-webp=yes        \tyes</span><br><span class=\"line\">JPEG v1           --with-jpeg=yes        \tyes</span><br><span class=\"line\">JPEG-2000         --with-jp2=yes          \tno</span><br><span class=\"line\">LCMS v1           --with-lcms=yes        \tno</span><br><span class=\"line\">LCMS v2           --with-lcms2=yes        \tno</span><br><span class=\"line\">LZMA              --with-lzma=yes        \tno (failed tests)</span><br><span class=\"line\">Magick++          --with-magick-plus-plus=yes \tyes</span><br><span class=\"line\">PERL              --with-perl=no            \tno</span><br><span class=\"line\">PNG               --with-png=yes          \tyes (-lpng16)</span><br><span class=\"line\">TIFF              --with-tiff=yes        \tno</span><br><span class=\"line\">TRIO              --with-trio=yes        \tno</span><br><span class=\"line\">Windows fonts     --with-windows-font-dir=\tnone</span><br><span class=\"line\">WMF               --with-wmf=yes          \tno</span><br><span class=\"line\">X11               --with-x=             \tno</span><br><span class=\"line\">XML               --with-xml=yes          \tyes</span><br><span class=\"line\">ZLIB              --with-zlib=yes        \tyes</span><br><span class=\"line\"></span><br><span class=\"line\">X11 Configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">  Not using X11.</span><br><span class=\"line\"></span><br><span class=\"line\">Options used to compile and link:</span><br><span class=\"line\">  CC       = gcc</span><br><span class=\"line\">  CFLAGS   = -g -O2 -Wall -D_THREAD_SAFE</span><br><span class=\"line\">  CPPFLAGS = -I/usr/local/Cellar/freetype/2.5.3_1/include/freetype2 -I/usr/local/include/libxml2</span><br><span class=\"line\">  CXX      = g++</span><br><span class=\"line\">  CXXFLAGS = -D_THREAD_SAFE</span><br><span class=\"line\">  DEFS     = -DHAVE_CONFIG_H</span><br><span class=\"line\">  LDFLAGS  = -L/usr/local/Cellar/freetype/2.5.3_1/lib -L/usr/local/lib</span><br><span class=\"line\">  LIBS     = -lwebp -lfreetype -ljpeg -lpng16 -lbz2 -lxml2 -lz -lm -lpthread</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试安装是否成功\"><a href=\"#测试安装是否成功\" class=\"headerlink\" title=\"测试安装是否成功\"></a>测试安装是否成功</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ gm convert data/god.jpg god.webp</span><br><span class=\"line\">[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ exiftool god.webp </span><br><span class=\"line\">ExifTool Version Number         : 9.72</span><br><span class=\"line\">File Name                       : god.webp</span><br><span class=\"line\">Directory                       : .</span><br><span class=\"line\">File Size                       : 29 kB</span><br><span class=\"line\">File Modification Date/Time     : 2014:10:23 17:28:08+08:00</span><br><span class=\"line\">File Access Date/Time           : 2014:10:23 16:52:01+08:00</span><br><span class=\"line\">File Inode Change Date/Time     : 2014:10:23 17:28:08+08:00</span><br><span class=\"line\">File Permissions                : rw-r--r--</span><br><span class=\"line\">File Type                       : WEBP</span><br><span class=\"line\">MIME Type                       : image/webp</span><br><span class=\"line\">VP8 Version                     : 0 (bicubic reconstruction, normal loop)</span><br><span class=\"line\">Image Width                     : 1024</span><br><span class=\"line\">Horizontal Scale                : 0</span><br><span class=\"line\">Image Height                    : 768</span><br><span class=\"line\">Vertical Scale                  : 0</span><br><span class=\"line\">Image Size                      : 1024x768</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它功能支持\"><a href=\"#其它功能支持\" class=\"headerlink\" title=\"其它功能支持\"></a>其它功能支持</h3><h4 id=\"不支持interlace渐近功能\"><a href=\"#不支持interlace渐近功能\" class=\"headerlink\" title=\"不支持interlace渐近功能\"></a>不支持interlace渐近功能</h4>","excerpt":"","more":"<h2 id=\"WEBP支持\"><a href=\"#WEBP支持\" class=\"headerlink\" title=\"WEBP支持\"></a>WEBP支持</h2><h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><h4 id=\"software\"><a href=\"#software\" class=\"headerlink\" title=\"software\"></a>software</h4><ul>\n<li>GraphicsMagick 1.3.20 </li>\n<li><a href=\"https://webp.googlecode.com/files/libwebp-0.4.0.tar.gz\">https://webp.googlecode.com/files/libwebp-0.4.0.tar.gz</a></li>\n</ul>\n<h2 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h2><ul>\n<li>编译安装libwebp</li>\n<li>编译安装GraphicsMagicks时，指定libwebp安装位置：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  --prefix=/home/wuxuelian/software/graphicsmagick/build CPPFLAGS=&apos;-I/home/wuxuelian/software/libwebp/build/include&apos; LDFLAGS=&apos;-L/home/wuxuelian/software/libwebp/build/lib&apos;</span><br></pre></td></tr></table></figure>\n<p>确保Configure结果中WEBP那项为YES</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GraphicsMagick is configured as follows. Please verify that this</span><br><span class=\"line\">configuration matches your expectations.</span><br><span class=\"line\"></span><br><span class=\"line\">Host system type : x86_64-apple-darwin14.0.0</span><br><span class=\"line\">Build system type : x86_64-apple-darwin14.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">Option            Configure option           \tConfigured value</span><br><span class=\"line\">-----------------------------------------------------------------</span><br><span class=\"line\">Shared libraries  --enable-shared=no    \tno</span><br><span class=\"line\">Static libraries  --enable-static=yes    \tyes</span><br><span class=\"line\">GNU ld            --with-gnu-ld=no        \tno</span><br><span class=\"line\">Quantum depth     --with-quantum-depth=8 \t8</span><br><span class=\"line\">Modules           --with-modules=no        \tno</span><br><span class=\"line\"></span><br><span class=\"line\">Delegate Configuration:</span><br><span class=\"line\">BZLIB             --with-bzlib=yes          \tyes</span><br><span class=\"line\">DPS               --with-dps=yes              \tno</span><br><span class=\"line\">FlashPIX          --with-fpx=no              \tno</span><br><span class=\"line\">FreeType 2.0      --with-ttf=yes          \tyes</span><br><span class=\"line\">Ghostscript       None                   \tgs (unknown)</span><br><span class=\"line\">Ghostscript fonts --with-gs-font-dir=default    none</span><br><span class=\"line\">Ghostscript lib   --with-gslib=no       \tno</span><br><span class=\"line\">JBIG              --with-jbig=yes        \tno</span><br><span class=\"line\">WEBP              --with-webp=yes        \tyes</span><br><span class=\"line\">JPEG v1           --with-jpeg=yes        \tyes</span><br><span class=\"line\">JPEG-2000         --with-jp2=yes          \tno</span><br><span class=\"line\">LCMS v1           --with-lcms=yes        \tno</span><br><span class=\"line\">LCMS v2           --with-lcms2=yes        \tno</span><br><span class=\"line\">LZMA              --with-lzma=yes        \tno (failed tests)</span><br><span class=\"line\">Magick++          --with-magick-plus-plus=yes \tyes</span><br><span class=\"line\">PERL              --with-perl=no            \tno</span><br><span class=\"line\">PNG               --with-png=yes          \tyes (-lpng16)</span><br><span class=\"line\">TIFF              --with-tiff=yes        \tno</span><br><span class=\"line\">TRIO              --with-trio=yes        \tno</span><br><span class=\"line\">Windows fonts     --with-windows-font-dir=\tnone</span><br><span class=\"line\">WMF               --with-wmf=yes          \tno</span><br><span class=\"line\">X11               --with-x=             \tno</span><br><span class=\"line\">XML               --with-xml=yes          \tyes</span><br><span class=\"line\">ZLIB              --with-zlib=yes        \tyes</span><br><span class=\"line\"></span><br><span class=\"line\">X11 Configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">  Not using X11.</span><br><span class=\"line\"></span><br><span class=\"line\">Options used to compile and link:</span><br><span class=\"line\">  CC       = gcc</span><br><span class=\"line\">  CFLAGS   = -g -O2 -Wall -D_THREAD_SAFE</span><br><span class=\"line\">  CPPFLAGS = -I/usr/local/Cellar/freetype/2.5.3_1/include/freetype2 -I/usr/local/include/libxml2</span><br><span class=\"line\">  CXX      = g++</span><br><span class=\"line\">  CXXFLAGS = -D_THREAD_SAFE</span><br><span class=\"line\">  DEFS     = -DHAVE_CONFIG_H</span><br><span class=\"line\">  LDFLAGS  = -L/usr/local/Cellar/freetype/2.5.3_1/lib -L/usr/local/lib</span><br><span class=\"line\">  LIBS     = -lwebp -lfreetype -ljpeg -lpng16 -lbz2 -lxml2 -lz -lm -lpthread</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试安装是否成功\"><a href=\"#测试安装是否成功\" class=\"headerlink\" title=\"测试安装是否成功\"></a>测试安装是否成功</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ gm convert data/god.jpg god.webp</span><br><span class=\"line\">[wuxuelian@wuxuelianmaccom:~/study/github/graphicsmagick]$ exiftool god.webp </span><br><span class=\"line\">ExifTool Version Number         : 9.72</span><br><span class=\"line\">File Name                       : god.webp</span><br><span class=\"line\">Directory                       : .</span><br><span class=\"line\">File Size                       : 29 kB</span><br><span class=\"line\">File Modification Date/Time     : 2014:10:23 17:28:08+08:00</span><br><span class=\"line\">File Access Date/Time           : 2014:10:23 16:52:01+08:00</span><br><span class=\"line\">File Inode Change Date/Time     : 2014:10:23 17:28:08+08:00</span><br><span class=\"line\">File Permissions                : rw-r--r--</span><br><span class=\"line\">File Type                       : WEBP</span><br><span class=\"line\">MIME Type                       : image/webp</span><br><span class=\"line\">VP8 Version                     : 0 (bicubic reconstruction, normal loop)</span><br><span class=\"line\">Image Width                     : 1024</span><br><span class=\"line\">Horizontal Scale                : 0</span><br><span class=\"line\">Image Height                    : 768</span><br><span class=\"line\">Vertical Scale                  : 0</span><br><span class=\"line\">Image Size                      : 1024x768</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它功能支持\"><a href=\"#其它功能支持\" class=\"headerlink\" title=\"其它功能支持\"></a>其它功能支持</h3><h4 id=\"不支持interlace渐近功能\"><a href=\"#不支持interlace渐近功能\" class=\"headerlink\" title=\"不支持interlace渐近功能\"></a>不支持interlace渐近功能</h4>"},{"layout":"post","title":"使用GraphicsMagick图片渐进显示设置","keywords":["GraphicsMagick","WriteImage"],"description":"Convert Image with graphicsMagick ","comments":1,"_content":"\n## 设置图片渐进显示\n\n当网络差时，图片载入方式由模糊到清晰。该功能由WriteImage (imageInfo,image)中imageInfo的interlace参数指定：\n\n```\ntypedef enum\n {\n   UndefinedInterlace,\n   NoInterlace,        //无渐进\n   LineInterlace,      //有渐进\n   PlaneInterlace,     //不可用\n   PartitionInterlace  //不可用\n } InterlaceType;\n\n```\n\n## 检查图片是否开启渐进显示：\n\n```\nidentify -verbose test.jpg | grep Interlace\n```\n\n## 渐进显示案例\n[convert.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/convert.cpp)\n\n### LineInterlace\n\n#### 原图\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/lineinterlace.jpg\" alt=\"lineinterlace.jpg\" title=\"lineinterlace.jpg\" width=\"600\" />\n\n\n#### 显示效果\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace_1.PNG\" alt=\"interlace_1.PNG\" title=\"interlace_1.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace2.PNG\" alt=\"interlace2.PNG\" title=\"interlace2.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace3.PNG\" alt=\"interlace3.PNG\" title=\"interlace3.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace5.PNG\" alt=\"interlace5.PNG\" title=\"interlace5.PNG\" width=\"600\" />\n\n### NoneInterlace\n\n#### 原图\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace.jpg\" alt=\"nointerlace.jpg\" title=\"nointerlace.jpg\" width=\"600\" />\n\n#### 渐进效果\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace1.PNG\" alt=\"nointerlace1.PNG\" title=\"nointerlace1.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace2.PNG\" alt=\"nointerlace2.PNG\" title=\"nointerlace2.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace3.PNG\" alt=\"nointerlace3.PNG\" title=\"nointerlace3.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace4.PNG\" alt=\"nointerlace4.PNG\" title=\"nointerlace4.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace5.PNG\" alt=\"nointerlace5.PNG\" title=\"nointerlace5.PNG\" width=\"600\" />\n","source":"_posts/2014-10-20-graphicsmagick-convert-image.md","raw":"---\nlayout: post\ntitle: \"使用GraphicsMagick图片渐进显示设置\"\nkeywords: [\"GraphicsMagick\", \"WriteImage\"]\ndescription: \"Convert Image with graphicsMagick \"\ncategory: \"GraphicsMagick\"\ntags: [\"GraphicsMagick\"]\ncomments: true\n---\n\n## 设置图片渐进显示\n\n当网络差时，图片载入方式由模糊到清晰。该功能由WriteImage (imageInfo,image)中imageInfo的interlace参数指定：\n\n```\ntypedef enum\n {\n   UndefinedInterlace,\n   NoInterlace,        //无渐进\n   LineInterlace,      //有渐进\n   PlaneInterlace,     //不可用\n   PartitionInterlace  //不可用\n } InterlaceType;\n\n```\n\n## 检查图片是否开启渐进显示：\n\n```\nidentify -verbose test.jpg | grep Interlace\n```\n\n## 渐进显示案例\n[convert.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/convert.cpp)\n\n### LineInterlace\n\n#### 原图\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/lineinterlace.jpg\" alt=\"lineinterlace.jpg\" title=\"lineinterlace.jpg\" width=\"600\" />\n\n\n#### 显示效果\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace_1.PNG\" alt=\"interlace_1.PNG\" title=\"interlace_1.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace2.PNG\" alt=\"interlace2.PNG\" title=\"interlace2.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace3.PNG\" alt=\"interlace3.PNG\" title=\"interlace3.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace5.PNG\" alt=\"interlace5.PNG\" title=\"interlace5.PNG\" width=\"600\" />\n\n### NoneInterlace\n\n#### 原图\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace.jpg\" alt=\"nointerlace.jpg\" title=\"nointerlace.jpg\" width=\"600\" />\n\n#### 渐进效果\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace1.PNG\" alt=\"nointerlace1.PNG\" title=\"nointerlace1.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace2.PNG\" alt=\"nointerlace2.PNG\" title=\"nointerlace2.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace3.PNG\" alt=\"nointerlace3.PNG\" title=\"nointerlace3.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace4.PNG\" alt=\"nointerlace4.PNG\" title=\"nointerlace4.PNG\" width=\"600\" />\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace5.PNG\" alt=\"nointerlace5.PNG\" title=\"nointerlace5.PNG\" width=\"600\" />\n","slug":"2014-10-20-graphicsmagick-convert-image","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhh70029qj7ltskaq113","content":"<h2 id=\"设置图片渐进显示\"><a href=\"#设置图片渐进显示\" class=\"headerlink\" title=\"设置图片渐进显示\"></a>设置图片渐进显示</h2><p>当网络差时，图片载入方式由模糊到清晰。该功能由WriteImage (imageInfo,image)中imageInfo的interlace参数指定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef enum</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   UndefinedInterlace,</span><br><span class=\"line\">   NoInterlace,        //无渐进</span><br><span class=\"line\">   LineInterlace,      //有渐进</span><br><span class=\"line\">   PlaneInterlace,     //不可用</span><br><span class=\"line\">   PartitionInterlace  //不可用</span><br><span class=\"line\"> &#125; InterlaceType;</span><br></pre></td></tr></table></figure>\n<h2 id=\"检查图片是否开启渐进显示：\"><a href=\"#检查图片是否开启渐进显示：\" class=\"headerlink\" title=\"检查图片是否开启渐进显示：\"></a>检查图片是否开启渐进显示：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">identify -verbose test.jpg | grep Interlace</span><br></pre></td></tr></table></figure>\n<h2 id=\"渐进显示案例\"><a href=\"#渐进显示案例\" class=\"headerlink\" title=\"渐进显示案例\"></a>渐进显示案例</h2><p><a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/convert.cpp\" target=\"_blank\" rel=\"external\">convert.cpp</a></p>\n<h3 id=\"LineInterlace\"><a href=\"#LineInterlace\" class=\"headerlink\" title=\"LineInterlace\"></a>LineInterlace</h3><h4 id=\"原图\"><a href=\"#原图\" class=\"headerlink\" title=\"原图\"></a>原图</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/lineinterlace.jpg\" alt=\"lineinterlace.jpg\" title=\"lineinterlace.jpg\" width=\"600\"></p>\n<h4 id=\"显示效果\"><a href=\"#显示效果\" class=\"headerlink\" title=\"显示效果\"></a>显示效果</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace_1.PNG\" alt=\"interlace_1.PNG\" title=\"interlace_1.PNG\" width=\"600\"></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace2.PNG\" alt=\"interlace2.PNG\" title=\"interlace2.PNG\" width=\"600\"></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace3.PNG\" alt=\"interlace3.PNG\" title=\"interlace3.PNG\" width=\"600\"></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace5.PNG\" alt=\"interlace5.PNG\" title=\"interlace5.PNG\" width=\"600\"></p>\n<h3 id=\"NoneInterlace\"><a href=\"#NoneInterlace\" class=\"headerlink\" title=\"NoneInterlace\"></a>NoneInterlace</h3><h4 id=\"原图-1\"><a href=\"#原图-1\" class=\"headerlink\" title=\"原图\"></a>原图</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace.jpg\" alt=\"nointerlace.jpg\" title=\"nointerlace.jpg\" width=\"600\"></p>\n<h4 id=\"渐进效果\"><a href=\"#渐进效果\" class=\"headerlink\" title=\"渐进效果\"></a>渐进效果</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace1.PNG\" alt=\"nointerlace1.PNG\" title=\"nointerlace1.PNG\" width=\"600\"></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace2.PNG\" alt=\"nointerlace2.PNG\" title=\"nointerlace2.PNG\" width=\"600\"></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace3.PNG\" alt=\"nointerlace3.PNG\" title=\"nointerlace3.PNG\" width=\"600\"></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace4.PNG\" alt=\"nointerlace4.PNG\" title=\"nointerlace4.PNG\" width=\"600\"></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace5.PNG\" alt=\"nointerlace5.PNG\" title=\"nointerlace5.PNG\" width=\"600\"></p>\n","excerpt":"","more":"<h2 id=\"设置图片渐进显示\"><a href=\"#设置图片渐进显示\" class=\"headerlink\" title=\"设置图片渐进显示\"></a>设置图片渐进显示</h2><p>当网络差时，图片载入方式由模糊到清晰。该功能由WriteImage (imageInfo,image)中imageInfo的interlace参数指定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef enum</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   UndefinedInterlace,</span><br><span class=\"line\">   NoInterlace,        //无渐进</span><br><span class=\"line\">   LineInterlace,      //有渐进</span><br><span class=\"line\">   PlaneInterlace,     //不可用</span><br><span class=\"line\">   PartitionInterlace  //不可用</span><br><span class=\"line\"> &#125; InterlaceType;</span><br></pre></td></tr></table></figure>\n<h2 id=\"检查图片是否开启渐进显示：\"><a href=\"#检查图片是否开启渐进显示：\" class=\"headerlink\" title=\"检查图片是否开启渐进显示：\"></a>检查图片是否开启渐进显示：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">identify -verbose test.jpg | grep Interlace</span><br></pre></td></tr></table></figure>\n<h2 id=\"渐进显示案例\"><a href=\"#渐进显示案例\" class=\"headerlink\" title=\"渐进显示案例\"></a>渐进显示案例</h2><p><a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/convert.cpp\">convert.cpp</a></p>\n<h3 id=\"LineInterlace\"><a href=\"#LineInterlace\" class=\"headerlink\" title=\"LineInterlace\"></a>LineInterlace</h3><h4 id=\"原图\"><a href=\"#原图\" class=\"headerlink\" title=\"原图\"></a>原图</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/lineinterlace.jpg\" alt=\"lineinterlace.jpg\" title=\"lineinterlace.jpg\" width=\"600\" /></p>\n<h4 id=\"显示效果\"><a href=\"#显示效果\" class=\"headerlink\" title=\"显示效果\"></a>显示效果</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace_1.PNG\" alt=\"interlace_1.PNG\" title=\"interlace_1.PNG\" width=\"600\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace2.PNG\" alt=\"interlace2.PNG\" title=\"interlace2.PNG\" width=\"600\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace3.PNG\" alt=\"interlace3.PNG\" title=\"interlace3.PNG\" width=\"600\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/interlace5.PNG\" alt=\"interlace5.PNG\" title=\"interlace5.PNG\" width=\"600\" /></p>\n<h3 id=\"NoneInterlace\"><a href=\"#NoneInterlace\" class=\"headerlink\" title=\"NoneInterlace\"></a>NoneInterlace</h3><h4 id=\"原图-1\"><a href=\"#原图-1\" class=\"headerlink\" title=\"原图\"></a>原图</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace.jpg\" alt=\"nointerlace.jpg\" title=\"nointerlace.jpg\" width=\"600\" /></p>\n<h4 id=\"渐进效果\"><a href=\"#渐进效果\" class=\"headerlink\" title=\"渐进效果\"></a>渐进效果</h4><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace1.PNG\" alt=\"nointerlace1.PNG\" title=\"nointerlace1.PNG\" width=\"600\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace2.PNG\" alt=\"nointerlace2.PNG\" title=\"nointerlace2.PNG\" width=\"600\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace3.PNG\" alt=\"nointerlace3.PNG\" title=\"nointerlace3.PNG\" width=\"600\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace4.PNG\" alt=\"nointerlace4.PNG\" title=\"nointerlace4.PNG\" width=\"600\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/nointerlace5.PNG\" alt=\"nointerlace5.PNG\" title=\"nointerlace5.PNG\" width=\"600\" /></p>\n"},{"layout":"post","title":"leetcode-candy","keywords":["dp","leetcode"],"description":"leetcode-candy","comments":1,"_content":"\n\n## 大意\n\n[candy](https://oj.leetcode.com/problems/candy/)\n\n有n个小伙伴排成一列，每个小伙伴有一个评分，先给其发蛋糕，要求满足以下条件：\n\n1. 每人至少有一个蛋糕\n2. 评分较高的人所拥有的糖果数比其友邻大。\n\n问：最少需要多少糖果给这些人？\n\n## 思路\n\nDP+Greedy\n空间复杂度O(N)，时间复杂度O(N)\n\ndp[i][0]表示第i左侧有多少数字连续递减的\n\n```\nif(ratings[i]>ratings[i-1]) {\n  dp[i][0] = dp[i-1]+1\n}else {\n  dp[i][0] = 0\n}\n```\n那么第i位置要满足左邻条件的糖果数至少为dp[i][0]+1\n\n同样的，dp[i][1]表示i右侧有多少数字连续递减的，则\n\n```\nif(ratings[i]>ratings[i+1]) {\n  dp[i][1] = dp[i+1][1]+1\n} else {\n  dp[i][1] = 0;\n}\n```\n\n同样的，第i位置要满足友邻条件需要的糖果数至少为dp[i][1]+1\n那么每个位置的最小蛋糕数为\n\n```\nans[i] = max(dp[i][0],dp[i][1]) +1\n```\n\n证明：\n\n假设r[i]<r[i+1],那么\n\n1. dp[i+1][0] = dp[i][0]+1\n2. dp[i][1] = 0,dp[i+1][1]>=0\n得到：\n1. ans[i] = dp[i][0] + 1\n2. ans[i+1] = max(dp[i][0]+1,dp[i+1][1]) +1\n无论如何，ans[i+1]>ans[i] ，满足条件2.\n\n[详细代码](https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/candy.cpp)\n","source":"_posts/2014-12-10-leetcode-candy.md","raw":"---\nlayout: post\ntitle: \"leetcode-candy\"\nkeywords: [\"dp\", \"leetcode\"]\ndescription: \"leetcode-candy\"\ncategory: \"algorithm\"\ntags: [\"algorithm\",\"leetcode\"]\ncomments : true\n---\n\n\n## 大意\n\n[candy](https://oj.leetcode.com/problems/candy/)\n\n有n个小伙伴排成一列，每个小伙伴有一个评分，先给其发蛋糕，要求满足以下条件：\n\n1. 每人至少有一个蛋糕\n2. 评分较高的人所拥有的糖果数比其友邻大。\n\n问：最少需要多少糖果给这些人？\n\n## 思路\n\nDP+Greedy\n空间复杂度O(N)，时间复杂度O(N)\n\ndp[i][0]表示第i左侧有多少数字连续递减的\n\n```\nif(ratings[i]>ratings[i-1]) {\n  dp[i][0] = dp[i-1]+1\n}else {\n  dp[i][0] = 0\n}\n```\n那么第i位置要满足左邻条件的糖果数至少为dp[i][0]+1\n\n同样的，dp[i][1]表示i右侧有多少数字连续递减的，则\n\n```\nif(ratings[i]>ratings[i+1]) {\n  dp[i][1] = dp[i+1][1]+1\n} else {\n  dp[i][1] = 0;\n}\n```\n\n同样的，第i位置要满足友邻条件需要的糖果数至少为dp[i][1]+1\n那么每个位置的最小蛋糕数为\n\n```\nans[i] = max(dp[i][0],dp[i][1]) +1\n```\n\n证明：\n\n假设r[i]<r[i+1],那么\n\n1. dp[i+1][0] = dp[i][0]+1\n2. dp[i][1] = 0,dp[i+1][1]>=0\n得到：\n1. ans[i] = dp[i][0] + 1\n2. ans[i+1] = max(dp[i][0]+1,dp[i+1][1]) +1\n无论如何，ans[i+1]>ans[i] ，满足条件2.\n\n[详细代码](https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/candy.cpp)\n","slug":"2014-12-10-leetcode-candy","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhh8002cqj7ltiq91an7","content":"<h2 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h2><p><a href=\"https://oj.leetcode.com/problems/candy/\" target=\"_blank\" rel=\"external\">candy</a></p>\n<p>有n个小伙伴排成一列，每个小伙伴有一个评分，先给其发蛋糕，要求满足以下条件：</p>\n<ol>\n<li>每人至少有一个蛋糕</li>\n<li>评分较高的人所拥有的糖果数比其友邻大。</li>\n</ol>\n<p>问：最少需要多少糖果给这些人？</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>DP+Greedy<br>空间复杂度O(N)，时间复杂度O(N)</p>\n<p>dp[i][0]表示第i左侧有多少数字连续递减的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ratings[i]&gt;ratings[i-1]) &#123;</span><br><span class=\"line\">  dp[i][0] = dp[i-1]+1</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">  dp[i][0] = 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么第i位置要满足左邻条件的糖果数至少为dp[i][0]+1</p>\n<p>同样的，dp[i][1]表示i右侧有多少数字连续递减的，则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ratings[i]&gt;ratings[i+1]) &#123;</span><br><span class=\"line\">  dp[i][1] = dp[i+1][1]+1</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  dp[i][1] = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的，第i位置要满足友邻条件需要的糖果数至少为dp[i][1]+1<br>那么每个位置的最小蛋糕数为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans[i] = max(dp[i][0],dp[i][1]) +1</span><br></pre></td></tr></table></figure>\n<p>证明：</p>\n<p>假设r[i]&lt;r[i+1],那么</p>\n<ol>\n<li>dp[i+1][0] = dp[i][0]+1</li>\n<li>dp[i][1] = 0,dp[i+1][1]&gt;=0<br>得到：</li>\n<li>ans[i] = dp[i][0] + 1</li>\n<li>ans[i+1] = max(dp[i][0]+1,dp[i+1][1]) +1<br>无论如何，ans[i+1]&gt;ans[i] ，满足条件2.</li>\n</ol>\n<p><a href=\"https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/candy.cpp\" target=\"_blank\" rel=\"external\">详细代码</a></p>\n","excerpt":"","more":"<h2 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h2><p><a href=\"https://oj.leetcode.com/problems/candy/\">candy</a></p>\n<p>有n个小伙伴排成一列，每个小伙伴有一个评分，先给其发蛋糕，要求满足以下条件：</p>\n<ol>\n<li>每人至少有一个蛋糕</li>\n<li>评分较高的人所拥有的糖果数比其友邻大。</li>\n</ol>\n<p>问：最少需要多少糖果给这些人？</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>DP+Greedy<br>空间复杂度O(N)，时间复杂度O(N)</p>\n<p>dp[i][0]表示第i左侧有多少数字连续递减的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ratings[i]&gt;ratings[i-1]) &#123;</span><br><span class=\"line\">  dp[i][0] = dp[i-1]+1</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">  dp[i][0] = 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么第i位置要满足左邻条件的糖果数至少为dp[i][0]+1</p>\n<p>同样的，dp[i][1]表示i右侧有多少数字连续递减的，则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(ratings[i]&gt;ratings[i+1]) &#123;</span><br><span class=\"line\">  dp[i][1] = dp[i+1][1]+1</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  dp[i][1] = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的，第i位置要满足友邻条件需要的糖果数至少为dp[i][1]+1<br>那么每个位置的最小蛋糕数为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans[i] = max(dp[i][0],dp[i][1]) +1</span><br></pre></td></tr></table></figure>\n<p>证明：</p>\n<p>假设r[i]&lt;r[i+1],那么</p>\n<ol>\n<li>dp[i+1][0] = dp[i][0]+1</li>\n<li>dp[i][1] = 0,dp[i+1][1]&gt;=0<br>得到：</li>\n<li>ans[i] = dp[i][0] + 1</li>\n<li>ans[i+1] = max(dp[i][0]+1,dp[i+1][1]) +1<br>无论如何，ans[i+1]&gt;ans[i] ，满足条件2.</li>\n</ol>\n<p><a href=\"https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/candy.cpp\">详细代码</a></p>\n"},{"layout":"post","title":"使用GraphicsMagick图片旋转","keywords":["GraphicsMagick","RotateImage"],"description":"rotate Image with graphicsMagick ","comments":1,"_content":"\n## 旋转图片\n\n### 命令行\n\n```\n gm convert data/travel.jpg -rotate 120 rotate.jpg\n```\n\n## [接口](http://www.graphicsmagick.org/api/shear.html#rotateimage)\n\n```\nImage *RotateImage( const Image *image, const double degrees,\n                    ExceptionInfo *exception );\n```\n\n* 该方法通过拷贝已存在的图片对象创建一个旋转图片对象。\n* degrees为正则顺时针转，为负逆时针转。\n* 旋转后的图片一般大于原图片，且包含一些空白三角。空白三角的颜色由原图的background_color属性决定。\n* 方法在内存中为新图创建新的图片对象，且返回该对象的指针。\n\n## Sample\n\n### Code:\n\n[rotate.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/rotate.cpp)\n\n### 效果\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/rotate.jpg\" alt=\"rotate.jpg\" title=\"rotate.jpg\" width=\"400\" />\n","source":"_posts/2014-10-27-graphicsmagick-rotate-image.md","raw":"---\nlayout: post\ntitle: \"使用GraphicsMagick图片旋转\"\nkeywords: [\"GraphicsMagick\", \"RotateImage\"]\ndescription: \"rotate Image with graphicsMagick \"\ncategory: \"GraphicsMagick\"\ntags: [\"GraphicsMagick\"]\ncomments: true \n---\n\n## 旋转图片\n\n### 命令行\n\n```\n gm convert data/travel.jpg -rotate 120 rotate.jpg\n```\n\n## [接口](http://www.graphicsmagick.org/api/shear.html#rotateimage)\n\n```\nImage *RotateImage( const Image *image, const double degrees,\n                    ExceptionInfo *exception );\n```\n\n* 该方法通过拷贝已存在的图片对象创建一个旋转图片对象。\n* degrees为正则顺时针转，为负逆时针转。\n* 旋转后的图片一般大于原图片，且包含一些空白三角。空白三角的颜色由原图的background_color属性决定。\n* 方法在内存中为新图创建新的图片对象，且返回该对象的指针。\n\n## Sample\n\n### Code:\n\n[rotate.cpp](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/rotate.cpp)\n\n### 效果\n\n<img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/rotate.jpg\" alt=\"rotate.jpg\" title=\"rotate.jpg\" width=\"400\" />\n","slug":"2014-10-27-graphicsmagick-rotate-image","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhb002gqj7lr6prf324","content":"<h2 id=\"旋转图片\"><a href=\"#旋转图片\" class=\"headerlink\" title=\"旋转图片\"></a>旋转图片</h2><h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm convert data/travel.jpg -rotate 120 rotate.jpg</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a><a href=\"http://www.graphicsmagick.org/api/shear.html#rotateimage\" target=\"_blank\" rel=\"external\">接口</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Image *RotateImage( const Image *image, const double degrees,</span><br><span class=\"line\">                    ExceptionInfo *exception );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该方法通过拷贝已存在的图片对象创建一个旋转图片对象。</li>\n<li>degrees为正则顺时针转，为负逆时针转。</li>\n<li>旋转后的图片一般大于原图片，且包含一些空白三角。空白三角的颜色由原图的background_color属性决定。</li>\n<li>方法在内存中为新图创建新的图片对象，且返回该对象的指针。</li>\n</ul>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><p><a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/rotate.cpp\" target=\"_blank\" rel=\"external\">rotate.cpp</a></p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/rotate.jpg\" alt=\"rotate.jpg\" title=\"rotate.jpg\" width=\"400\"></p>\n","excerpt":"","more":"<h2 id=\"旋转图片\"><a href=\"#旋转图片\" class=\"headerlink\" title=\"旋转图片\"></a>旋转图片</h2><h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm convert data/travel.jpg -rotate 120 rotate.jpg</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a><a href=\"http://www.graphicsmagick.org/api/shear.html#rotateimage\">接口</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Image *RotateImage( const Image *image, const double degrees,</span><br><span class=\"line\">                    ExceptionInfo *exception );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该方法通过拷贝已存在的图片对象创建一个旋转图片对象。</li>\n<li>degrees为正则顺时针转，为负逆时针转。</li>\n<li>旋转后的图片一般大于原图片，且包含一些空白三角。空白三角的颜色由原图的background_color属性决定。</li>\n<li>方法在内存中为新图创建新的图片对象，且返回该对象的指针。</li>\n</ul>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><p><a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/rotate.cpp\">rotate.cpp</a></p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://raw.githubusercontent.com/AndreMouche/GraphicsStudy/master/GraphicsMagicUsage/data/rotate.jpg\" alt=\"rotate.jpg\" title=\"rotate.jpg\" width=\"400\" /></p>\n"},{"layout":"post","title":"配置VirtualBox上UbuntuServer的网络","keywords":["Mac","network "],"description":"network config on virtual server","comments":1,"_content":"\n\n在Mac OS 的VirtualBox上安装Ubuntu Server，使得其网络满足以下需求：\n\n1. 能连接到外网\n2. mac 终端能ssh 到虚拟机\n\n## 安装Ubuntu Server\n\n    ubuntu-14.04.1-server-amd64.iso \n\n## 设置虚拟机配置\nserver=>Config打开虚拟机配置项\n\nNAT:\n\n<img src=\"/images/adapter1.png\" alt=\"NAT\" title=\"nointerlace1.PNG\" width=\"600\" />\n\n\nHost-only adapter\n\n<img src=\"/images/adapter2.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\" />\n\n\nBridged Adapter\n\n<img src=\"/images/adapter3.png\" alt=\"NAT\" title=\"Bridged Adapter\" width=\"600\" />\n\n\n \n## 启动虚拟机，查看MAC 当前网络\n\n看到如下行(是我之前配置的？不记得啦)：\n\n```\nvboxnet0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n\tether 0a:00:27:00:00:00 \n\tinet 192.168.56.1 netmask 0xffffff00 broadcast 192.168.56.255\n```\n\n## 虚拟机网络配置\n\n登陆虚拟机，修改\n/etc/network/interfaces\n\n```\n# This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5).\n\n# The loopback network interface\nauto lo\niface lo inet loopback\n\n# The primary network interface\nauto eth0\niface eth0 inet dhcp\n\n# Virtualbox Host-only mode\nauto eth1\niface eth1 inet static\naddress 192.168.56.190\nnetmask 255.255.255.0\nnetwork 192.168.56.0\nbroadcast 192.168.56.255\n```\n\n重启虚拟机，再次ifconfig：\n\n```\nfun@fun:~$ ifconfig\neth0      Link encap:Ethernet  HWaddr 08:00:27:3f:dc:1a  \n          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe3f:dc1a/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:30442 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:12600 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:27478206 (27.4 MB)  TX bytes:798887 (798.8 KB)\n\neth1      Link encap:Ethernet  HWaddr 08:00:27:90:d2:df  \n          inet addr:192.168.56.190  Bcast:192.168.56.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe90:d2df/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:8343 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:5120 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:3550804 (3.5 MB)  TX bytes:777058 (777.0 KB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n\n\n```\n\nDone\n\n## 说明：\n\n学习Nginx时想尽量可能的接近线上环境去玩，所以才在虚拟机上装了Ubuntu-Server，但网络问题一直搞不定。\n网络基础是在差得一塌糊涂，网上查了三种连接方式，说得最多的是桥接，但鉴于天资实在有限，一直搞不定。\n今晚一怒之下，把三个adapter全配上了，莫名奇妙地可以了，这边只是简单做个笔记，mark一下。\n\n哎，等哪天有空了一定得好好研究一下，补补网络知识，一定得知其所以然才行。\n","source":"_posts/2014-11-11-virtualbox-network.md","raw":"---\nlayout: post\ntitle: \"配置VirtualBox上UbuntuServer的网络\"\nkeywords: [\"Mac\", \"network \"]\ndescription: \"network config on virtual server\"\ncategory: \"NetWork\"\ntags: [\"network\",\"mac\"]\ncomments: true\n---\n\n\n在Mac OS 的VirtualBox上安装Ubuntu Server，使得其网络满足以下需求：\n\n1. 能连接到外网\n2. mac 终端能ssh 到虚拟机\n\n## 安装Ubuntu Server\n\n    ubuntu-14.04.1-server-amd64.iso \n\n## 设置虚拟机配置\nserver=>Config打开虚拟机配置项\n\nNAT:\n\n<img src=\"/images/adapter1.png\" alt=\"NAT\" title=\"nointerlace1.PNG\" width=\"600\" />\n\n\nHost-only adapter\n\n<img src=\"/images/adapter2.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\" />\n\n\nBridged Adapter\n\n<img src=\"/images/adapter3.png\" alt=\"NAT\" title=\"Bridged Adapter\" width=\"600\" />\n\n\n \n## 启动虚拟机，查看MAC 当前网络\n\n看到如下行(是我之前配置的？不记得啦)：\n\n```\nvboxnet0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n\tether 0a:00:27:00:00:00 \n\tinet 192.168.56.1 netmask 0xffffff00 broadcast 192.168.56.255\n```\n\n## 虚拟机网络配置\n\n登陆虚拟机，修改\n/etc/network/interfaces\n\n```\n# This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5).\n\n# The loopback network interface\nauto lo\niface lo inet loopback\n\n# The primary network interface\nauto eth0\niface eth0 inet dhcp\n\n# Virtualbox Host-only mode\nauto eth1\niface eth1 inet static\naddress 192.168.56.190\nnetmask 255.255.255.0\nnetwork 192.168.56.0\nbroadcast 192.168.56.255\n```\n\n重启虚拟机，再次ifconfig：\n\n```\nfun@fun:~$ ifconfig\neth0      Link encap:Ethernet  HWaddr 08:00:27:3f:dc:1a  \n          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe3f:dc1a/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:30442 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:12600 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:27478206 (27.4 MB)  TX bytes:798887 (798.8 KB)\n\neth1      Link encap:Ethernet  HWaddr 08:00:27:90:d2:df  \n          inet addr:192.168.56.190  Bcast:192.168.56.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe90:d2df/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:8343 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:5120 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:3550804 (3.5 MB)  TX bytes:777058 (777.0 KB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n\n\n```\n\nDone\n\n## 说明：\n\n学习Nginx时想尽量可能的接近线上环境去玩，所以才在虚拟机上装了Ubuntu-Server，但网络问题一直搞不定。\n网络基础是在差得一塌糊涂，网上查了三种连接方式，说得最多的是桥接，但鉴于天资实在有限，一直搞不定。\n今晚一怒之下，把三个adapter全配上了，莫名奇妙地可以了，这边只是简单做个笔记，mark一下。\n\n哎，等哪天有空了一定得好好研究一下，补补网络知识，一定得知其所以然才行。\n","slug":"2014-11-11-virtualbox-network","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhc002jqj7lefi8xfft","content":"<p>在Mac OS 的VirtualBox上安装Ubuntu Server，使得其网络满足以下需求：</p>\n<ol>\n<li>能连接到外网</li>\n<li>mac 终端能ssh 到虚拟机</li>\n</ol>\n<h2 id=\"安装Ubuntu-Server\"><a href=\"#安装Ubuntu-Server\" class=\"headerlink\" title=\"安装Ubuntu Server\"></a>安装Ubuntu Server</h2><pre><code>ubuntu-14.04.1-server-amd64.iso \n</code></pre><h2 id=\"设置虚拟机配置\"><a href=\"#设置虚拟机配置\" class=\"headerlink\" title=\"设置虚拟机配置\"></a>设置虚拟机配置</h2><p>server=&gt;Config打开虚拟机配置项</p>\n<p>NAT:</p>\n<p><img src=\"/images/adapter1.png\" alt=\"NAT\" title=\"nointerlace1.PNG\" width=\"600\"></p>\n<p>Host-only adapter</p>\n<p><img src=\"/images/adapter2.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\"></p>\n<p>Bridged Adapter</p>\n<p><img src=\"/images/adapter3.png\" alt=\"NAT\" title=\"Bridged Adapter\" width=\"600\"></p>\n<h2 id=\"启动虚拟机，查看MAC-当前网络\"><a href=\"#启动虚拟机，查看MAC-当前网络\" class=\"headerlink\" title=\"启动虚拟机，查看MAC 当前网络\"></a>启动虚拟机，查看MAC 当前网络</h2><p>看到如下行(是我之前配置的？不记得啦)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vboxnet0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class=\"line\">\tether 0a:00:27:00:00:00 </span><br><span class=\"line\">\tinet 192.168.56.1 netmask 0xffffff00 broadcast 192.168.56.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"虚拟机网络配置\"><a href=\"#虚拟机网络配置\" class=\"headerlink\" title=\"虚拟机网络配置\"></a>虚拟机网络配置</h2><p>登陆虚拟机，修改<br>/etc/network/interfaces</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This file describes the network interfaces available on your system</span><br><span class=\"line\"># and how to activate them. For more information, see interfaces(5).</span><br><span class=\"line\"></span><br><span class=\"line\"># The loopback network interface</span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"># The primary network interface</span><br><span class=\"line\">auto eth0</span><br><span class=\"line\">iface eth0 inet dhcp</span><br><span class=\"line\"></span><br><span class=\"line\"># Virtualbox Host-only mode</span><br><span class=\"line\">auto eth1</span><br><span class=\"line\">iface eth1 inet static</span><br><span class=\"line\">address 192.168.56.190</span><br><span class=\"line\">netmask 255.255.255.0</span><br><span class=\"line\">network 192.168.56.0</span><br><span class=\"line\">broadcast 192.168.56.255</span><br></pre></td></tr></table></figure>\n<p>重启虚拟机，再次ifconfig：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@fun:~$ ifconfig</span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 08:00:27:3f:dc:1a  </span><br><span class=\"line\">          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::a00:27ff:fe3f:dc1a/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:30442 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:12600 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:27478206 (27.4 MB)  TX bytes:798887 (798.8 KB)</span><br><span class=\"line\"></span><br><span class=\"line\">eth1      Link encap:Ethernet  HWaddr 08:00:27:90:d2:df  </span><br><span class=\"line\">          inet addr:192.168.56.190  Bcast:192.168.56.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::a00:27ff:fe90:d2df/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:8343 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:5120 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:3550804 (3.5 MB)  TX bytes:777058 (777.0 KB)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>\n<p>Done</p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><p>学习Nginx时想尽量可能的接近线上环境去玩，所以才在虚拟机上装了Ubuntu-Server，但网络问题一直搞不定。<br>网络基础是在差得一塌糊涂，网上查了三种连接方式，说得最多的是桥接，但鉴于天资实在有限，一直搞不定。<br>今晚一怒之下，把三个adapter全配上了，莫名奇妙地可以了，这边只是简单做个笔记，mark一下。</p>\n<p>哎，等哪天有空了一定得好好研究一下，补补网络知识，一定得知其所以然才行。</p>\n","excerpt":"","more":"<p>在Mac OS 的VirtualBox上安装Ubuntu Server，使得其网络满足以下需求：</p>\n<ol>\n<li>能连接到外网</li>\n<li>mac 终端能ssh 到虚拟机</li>\n</ol>\n<h2 id=\"安装Ubuntu-Server\"><a href=\"#安装Ubuntu-Server\" class=\"headerlink\" title=\"安装Ubuntu Server\"></a>安装Ubuntu Server</h2><pre><code>ubuntu-14.04.1-server-amd64.iso \n</code></pre><h2 id=\"设置虚拟机配置\"><a href=\"#设置虚拟机配置\" class=\"headerlink\" title=\"设置虚拟机配置\"></a>设置虚拟机配置</h2><p>server=&gt;Config打开虚拟机配置项</p>\n<p>NAT:</p>\n<p><img src=\"/images/adapter1.png\" alt=\"NAT\" title=\"nointerlace1.PNG\" width=\"600\" /></p>\n<p>Host-only adapter</p>\n<p><img src=\"/images/adapter2.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\" /></p>\n<p>Bridged Adapter</p>\n<p><img src=\"/images/adapter3.png\" alt=\"NAT\" title=\"Bridged Adapter\" width=\"600\" /></p>\n<h2 id=\"启动虚拟机，查看MAC-当前网络\"><a href=\"#启动虚拟机，查看MAC-当前网络\" class=\"headerlink\" title=\"启动虚拟机，查看MAC 当前网络\"></a>启动虚拟机，查看MAC 当前网络</h2><p>看到如下行(是我之前配置的？不记得啦)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vboxnet0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class=\"line\">\tether 0a:00:27:00:00:00 </span><br><span class=\"line\">\tinet 192.168.56.1 netmask 0xffffff00 broadcast 192.168.56.255</span><br></pre></td></tr></table></figure>\n<h2 id=\"虚拟机网络配置\"><a href=\"#虚拟机网络配置\" class=\"headerlink\" title=\"虚拟机网络配置\"></a>虚拟机网络配置</h2><p>登陆虚拟机，修改<br>/etc/network/interfaces</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This file describes the network interfaces available on your system</span><br><span class=\"line\"># and how to activate them. For more information, see interfaces(5).</span><br><span class=\"line\"></span><br><span class=\"line\"># The loopback network interface</span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\"></span><br><span class=\"line\"># The primary network interface</span><br><span class=\"line\">auto eth0</span><br><span class=\"line\">iface eth0 inet dhcp</span><br><span class=\"line\"></span><br><span class=\"line\"># Virtualbox Host-only mode</span><br><span class=\"line\">auto eth1</span><br><span class=\"line\">iface eth1 inet static</span><br><span class=\"line\">address 192.168.56.190</span><br><span class=\"line\">netmask 255.255.255.0</span><br><span class=\"line\">network 192.168.56.0</span><br><span class=\"line\">broadcast 192.168.56.255</span><br></pre></td></tr></table></figure>\n<p>重启虚拟机，再次ifconfig：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@fun:~$ ifconfig</span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 08:00:27:3f:dc:1a  </span><br><span class=\"line\">          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::a00:27ff:fe3f:dc1a/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:30442 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:12600 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:27478206 (27.4 MB)  TX bytes:798887 (798.8 KB)</span><br><span class=\"line\"></span><br><span class=\"line\">eth1      Link encap:Ethernet  HWaddr 08:00:27:90:d2:df  </span><br><span class=\"line\">          inet addr:192.168.56.190  Bcast:192.168.56.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::a00:27ff:fe90:d2df/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:8343 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:5120 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:3550804 (3.5 MB)  TX bytes:777058 (777.0 KB)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>\n<p>Done</p>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><p>学习Nginx时想尽量可能的接近线上环境去玩，所以才在虚拟机上装了Ubuntu-Server，但网络问题一直搞不定。<br>网络基础是在差得一塌糊涂，网上查了三种连接方式，说得最多的是桥接，但鉴于天资实在有限，一直搞不定。<br>今晚一怒之下，把三个adapter全配上了，莫名奇妙地可以了，这边只是简单做个笔记，mark一下。</p>\n<p>哎，等哪天有空了一定得好好研究一下，补补网络知识，一定得知其所以然才行。</p>\n"},{"layout":"post","title":"基于GraphicsMagick做文字水印","keywords":["GraphicsMagick","Annotate","CompositeImage"],"description":"text watermark with graphicsmagick","comments":1,"_content":"# 基于graphicMagick实现图片文字水印\n<ul>\n<li><a href=\"#使用graphicmagick实现图片文字水印\">使用graphicMagick实现图片文字水印</a><ul>\n<li><a href=\"#背景及需求\">背景及需求</a></li>\n<li><a href=\"#分析\">分析</a><ul>\n<li><a href=\"#水印位置\">水印位置</a></li>\n<li><a href=\"#水印透明度\">水印透明度</a></li>\n</ul>\n</li>\n<li><a href=\"#实现方案\">实现方案</a><ul>\n<li><a href=\"#step-1-构造水印画布\">Step 1. 构造水印画布</a></li>\n<li><a href=\"#step-2-制作文字图片\">Step 2 : 制作文字图片</a></li>\n<li><a href=\"#step-3裁减获得文字logo\">Step 3:裁减获得文字logo</a></li>\n<li><a href=\"#step-4设置文字logo透明度\">Step 4:设置文字logo透明度</a></li>\n<li><a href=\"#step-5将logo打到原图对应位置\">Step 5:将logo打到原图对应位置</a></li>\n</ul>\n</li>\n<li><a href=\"#完整示例\">完整示例</a><ul>\n<li><a href=\"#代码\">代码</a></li>\n<li><a href=\"#效果\">效果</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n\n\n## 背景及需求\n使用GraphicMagick给图片打文字水印，\n除文字内容，字体，字体大小等基本属性外，要求可调以下参数：\n1.指定文字GravityType，其中Gravity为以下九宫格：\n\n```\nNorthWest     |     North      |     NorthEast\n              |                |    \n              |                |    \n--------------+----------------+--------------\n              |                |    \nWest          |     Center     |          East \n              |                |    \n--------------+----------------+--------------\n              |                |    \n              |                |    \nSouthWest     |     South      |     SouthEast\n```\n\n2.可指定文字边距，包括横轴边距dx,中轴边距 dy。\n\n3.可指定文字的透明度\n\n## 分析\n### 水印位置\n水印位置由Gravity和dx,dy共同决定，其中Annotate中可直接指定Gravity，但dx,dy没有直接的参数可以设置。\n### 水印透明度\n文字水印Annotate无法指定文字透明度\n\n## 实现方案\n介于以上分析，无法直接使用AnnotateImage来实现，设计方案如下：\n\n### Step 1. 构造水印画布\n\n画一张与原图image同样大小的透明图片textImg,作为文字水印的画布\n\n关键函数：\n\n| 函数        | 说明           | 其它  |\n| ------------- |:-------------:| -----:|\n|[ConstituteImage](http://www.graphicsmagick.org/api/constitute.html#constituteimage)|构造图片|..|\n|[SetImage](http://www.graphicsmagick.org/api/image.html#setimage)|设置图片透明度|..|\n\n\n```\n/**\n * Constitute a transparent Image with nCloumns and nRows\n * @param:img,pointer to save the dest image \n * @param:nColumns,columns of the dest image \n * @param:nRows,rows of the dest image \n * return true with transparent image in img,return false on failed.\n */\nbool constituteNewImage(Image * & img, int nColumns, int nRows)\n{\n    ExceptionInfo exception;\n    GetExceptionInfo(&exception);\n\n    const size_t pixels_size = nColumns * nRows * sizeof(Quantum) * strlen(COLOR_MAPPING);\n    Quantum * pixels = (Quantum *)MagickMalloc(pixels_size);\n    memset((void *) pixels, 0, pixels_size);\n    Image * canvasImage = ConstituteImage(nColumns, nRows, COLOR_MAPPING, CharPixel, pixels, &exception);\n    //made it transparent\n    SetImage(canvasImage,Quantum(MaxRGB));//must\n    canvasImage->matte = true;//musta\n    MagickFree(pixels);\n    DestroyExceptionInfo(&exception);\n\n    if (img != NULL)\n        DestroyImageList(img);\n    img = canvasImage;\n    return true;\n}\n```\n\n### Step 2 : 制作文字图片\n\n使用Annotate函数在textImg图上打上文字，并指定Annotate为Center，即写在正中。\n\n```\n/**\n * Draw Text on the center of the image \n *@param:image,image to annotate\n *@param:text,text to annotate\n *@param:font_pointsize,fontsize in point\n *@param:fill_color,color of font \n *return true on success while false on failed\n */\nbool DrawText(Image *& image, const char * text, const double font_pointsize,const char * fill_color) \n{\n    cout << \"text:\" << text << endl;\n    cout << \"color:\" << fill_color << endl;\n\n    DrawContext draw_context;\n    draw_context = DrawAllocateContext((DrawInfo*)NULL, image);\n    DrawSetFillColorString(draw_context, fill_color);\n\n    DrawSetStrokeAntialias(draw_context, 0);\n    DrawSetTextAntialias(draw_context, 0);\n    DrawSetFont(draw_context, FONT_DEFAULT);\n    DrawSetFontSize(draw_context, font_pointsize);\n    DrawSetGravity(draw_context, CenterGravity);\n    DrawSetTextEncoding(draw_context, \"UTF-8\");\n    DrawAnnotation(draw_context, 0, 0, (const unsigned char *)text);\n    unsigned int ret = DrawRender(draw_context);\n    DrawDestroyContext(draw_context);\n    return ret;\n}\n\n```\n\n### Step 3:裁减获得文字logo\n\n分析图textImg的每一个像素，找到包含水印文字的最小矩形所在位置，使用CropImage获得该矩形所在图作为logo。\n\n```\n/** \n * Trim Image\n * remove transparent part around the Text\n * return image with text only\n */\nImage * trimImage(Image *& image){\n    if(IsGIF(image)) {\n       return NULL;\n    }\n    int y, x;\n    int sx,sy,ex,ey;\n    register PixelPacket *q;\n    RectangleInfo rect;\n    ExceptionInfo exception;\n    GetExceptionInfo(&exception);\n    sx = image->columns;\n    sy = image->rows;\n    ex = 0;\n    ey = 0;\n\n    for (y=0; y < (long) image->rows; y++)\n    {\n        q=GetImagePixels(image,0,y,image->columns,1);\n        if (q == (PixelPacket *) NULL)\n            break;\n        for (x=0; x < (long) image->columns; x++)\n        {\n            if(q->opacity != MaxRGB) {\n                sx = sx < x ? sx:x;\n                sy = sy < y ? sy:y;\n                ex = ex > x ? ex:x;\n                ey = ey > y ? ey:y;                \n            }\n            q++;\n        }\n    }\n    cout << \"sx:\" << sx << \",sy:\" << sy << \",ex:\" << ex << \",ey:\" << ey << endl;\n    if(sx >= ex || sy >= ey) { // Too small\n        rect.x = 0;\n        rect.y = 0;\n        rect.width = image->columns;\n        rect.height = image->rows;\n    } else {\n        rect.x = sx;\n        rect.y = sy;\n        rect.width = ex - sx + 1;\n        rect.height = ey - sy + 1;\n    }\n    cout << \"x:\" << rect.x << \",y:\" << rect.y << \",rect.width:\" << rect.width << \",rect.height:\" << rect.height << endl;\n    Image *cImage = CropImage(image, &rect, &exception);\n    cout << \"cImage clomnes:\" << cImage->columns << \",rows:\" << cImage->rows << endl;\n\n    DestroyExceptionInfo(&exception);\n    return cImage;\n}\n\n```\n\n### Step 4:设置文字logo透明度\n\n设置logo图片非透明部分透明度\n\n```\n\n/**\n * set dissolve \n * @param image \n * @dissolve:0~100,0 means totally transparent while 100 means opa,q\n * */\nMagickPassFail dissolveImage(Image *image,int dissolve){\n    int y, x;\n    register PixelPacket\n        *q;\n    for (y=0; y < (long) image->rows; y++)\n    {\n        q=GetImagePixels(image,0,y,image->columns,1);\n        if (q == (PixelPacket *) NULL)\n            break;\n        for (x=0; x < (long) image->columns; x++)\n        {\n            if(q->opacity != MaxRGB) {\n                q->opacity=(Quantum)\n                    (MaxRGB - ((MaxRGB-q->opacity)/100.0*dissolve));\n            }\n            q++;\n        }\n        if (!SyncImagePixels(image)){\n            return MagickFail;\n        }\n    }\n    return MagickPass;\n}\n\n```\n\n### Step 5:将logo打到原图对应位置\n \n根据gravity算出logo图该落的偏移位置x_offset,y_offset,以CompositeImage的方式将logo图片拼接到原图上。\n\nlogo 偏移量计算\n\n| Gravity        | x_offset           | y_offset  |\n| ------------- |:-------------:| -----:|\n|NorthWestGravity | dx|dy |\n|NorthGravity|image.cols/2 - logo.cols/2 + dx|dy|\n|NorthEastGravity|image.cols-dx-logo.cols|dy|\n|WestGravity|dx|image.rows/2 - logo.rows/2 + dy|\n|CenterGravity|image.colns/2 - logo.cols/2 + dx|image.rows/2 - logo.rows/2 + dy|\n|EastGravity|image.cols - dx - logo.cols|image.rows/2 - logo.rows/2 + dy|\n|SouthWestGravity|dx|image.rows - logo.rows - dy|\n|SouthGravity|image.cols/2 - logo.cols/2 + dx|image.rows - logo.rows - dy|\n|SouthEastGravity|image.cols - dx - logo.cols|image.rows - logo.rows - dy|\n\n```\n/**\n *Composite Image \n *@param image:source image \n *@param logo:logo image \n *@param gravity,\n *|NorthWestGravity |NorthGravity   |NorthEastGravity   |\n *|WestGravity      |CenterGravity  |EastGravity        |\n *|SouthEastGravity |SouthGravity   |SouthEastGravity   |\n *@param dx:offset on x\n *@param dy:offset on y\n * return true on success,false on failed \n */\nbool compositeImage(Image *image,Image *logo,GravityType gravity,long dx,long dy) {\n   int x_offset,y_offset;\n\n   switch(gravity){\n       case NorthWestGravity:{\n           x_offset = dx;\n           y_offset = dy;\n           break;\n        }\n       case NorthGravity:{\n           x_offset = image->columns/2 - logo->columns/2 + dx;\n           y_offset = dy;\n           break;\n       }\n       case NorthEastGravity: {\n           x_offset = image->columns-dx-logo->columns;\n           y_offset = dy;\n           break;\n       }\n       case WestGravity:{\n           x_offset = dx;\n           y_offset = image->rows/2 - logo->rows/2 + dy;\n           break;\n       }\n       case CenterGravity: {\n          x_offset = image->columns/2 - logo->columns/2 + dx;\n          y_offset = image->rows/2 - logo->rows/2 + dy;\n          break;\n       }\n       case EastGravity:{\n          x_offset = image->columns - dx - logo->columns;       \n          y_offset = image->rows/2 - logo->rows/2 + dy;\n          break;\n       }\n     case SouthWestGravity:{\n          x_offset = dx;\n          y_offset = image->rows - logo->rows - dy;\n          break;\n       }\n\n       case SouthGravity:\n           x_offset = image->columns/2 - logo->columns/2 + dx;\n           y_offset = image->rows - logo->rows - dy;\n           break;\n       \n       case SouthEastGravity:{\n           x_offset = image->columns - dx - logo->columns;\n           y_offset = image->rows - logo->rows - dy;\n           break;\n       }\n       default:{\n           cout << \"Illegal GravityType:\" << gravity;      \n           break;\n       }\n   }\n\n    if(CompositeImage(image, AtopCompositeOp,logo, x_offset, y_offset) != 1) {\n          return false;\n    }\n    return true;\n}\n\n```\n\n## 完整示例\n\n### 代码\n\n[water_mark_txt](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/water_mark_txt.cpp)\n\n### 效果\n\n<img src=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/data/water_mark_txt.jpg?raw=true\" alt=\"water_mark_txt.jpg\" title=\"water_mark_txt.jpg\" width=\"400\" />\n\n","source":"_posts/2014-12-25-text-watermark.md","raw":"---\nlayout: post\ntitle: \"基于GraphicsMagick做文字水印\"\nkeywords: [\"GraphicsMagick\", \"Annotate\",\"CompositeImage\"]\ndescription: \"text watermark with graphicsmagick\"\ncategory: \"GraphicsMagick\"\ntags: [\"GraphicsMagick\"]\ncomments: true \n---\n# 基于graphicMagick实现图片文字水印\n<ul>\n<li><a href=\"#使用graphicmagick实现图片文字水印\">使用graphicMagick实现图片文字水印</a><ul>\n<li><a href=\"#背景及需求\">背景及需求</a></li>\n<li><a href=\"#分析\">分析</a><ul>\n<li><a href=\"#水印位置\">水印位置</a></li>\n<li><a href=\"#水印透明度\">水印透明度</a></li>\n</ul>\n</li>\n<li><a href=\"#实现方案\">实现方案</a><ul>\n<li><a href=\"#step-1-构造水印画布\">Step 1. 构造水印画布</a></li>\n<li><a href=\"#step-2-制作文字图片\">Step 2 : 制作文字图片</a></li>\n<li><a href=\"#step-3裁减获得文字logo\">Step 3:裁减获得文字logo</a></li>\n<li><a href=\"#step-4设置文字logo透明度\">Step 4:设置文字logo透明度</a></li>\n<li><a href=\"#step-5将logo打到原图对应位置\">Step 5:将logo打到原图对应位置</a></li>\n</ul>\n</li>\n<li><a href=\"#完整示例\">完整示例</a><ul>\n<li><a href=\"#代码\">代码</a></li>\n<li><a href=\"#效果\">效果</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n\n\n## 背景及需求\n使用GraphicMagick给图片打文字水印，\n除文字内容，字体，字体大小等基本属性外，要求可调以下参数：\n1.指定文字GravityType，其中Gravity为以下九宫格：\n\n```\nNorthWest     |     North      |     NorthEast\n              |                |    \n              |                |    \n--------------+----------------+--------------\n              |                |    \nWest          |     Center     |          East \n              |                |    \n--------------+----------------+--------------\n              |                |    \n              |                |    \nSouthWest     |     South      |     SouthEast\n```\n\n2.可指定文字边距，包括横轴边距dx,中轴边距 dy。\n\n3.可指定文字的透明度\n\n## 分析\n### 水印位置\n水印位置由Gravity和dx,dy共同决定，其中Annotate中可直接指定Gravity，但dx,dy没有直接的参数可以设置。\n### 水印透明度\n文字水印Annotate无法指定文字透明度\n\n## 实现方案\n介于以上分析，无法直接使用AnnotateImage来实现，设计方案如下：\n\n### Step 1. 构造水印画布\n\n画一张与原图image同样大小的透明图片textImg,作为文字水印的画布\n\n关键函数：\n\n| 函数        | 说明           | 其它  |\n| ------------- |:-------------:| -----:|\n|[ConstituteImage](http://www.graphicsmagick.org/api/constitute.html#constituteimage)|构造图片|..|\n|[SetImage](http://www.graphicsmagick.org/api/image.html#setimage)|设置图片透明度|..|\n\n\n```\n/**\n * Constitute a transparent Image with nCloumns and nRows\n * @param:img,pointer to save the dest image \n * @param:nColumns,columns of the dest image \n * @param:nRows,rows of the dest image \n * return true with transparent image in img,return false on failed.\n */\nbool constituteNewImage(Image * & img, int nColumns, int nRows)\n{\n    ExceptionInfo exception;\n    GetExceptionInfo(&exception);\n\n    const size_t pixels_size = nColumns * nRows * sizeof(Quantum) * strlen(COLOR_MAPPING);\n    Quantum * pixels = (Quantum *)MagickMalloc(pixels_size);\n    memset((void *) pixels, 0, pixels_size);\n    Image * canvasImage = ConstituteImage(nColumns, nRows, COLOR_MAPPING, CharPixel, pixels, &exception);\n    //made it transparent\n    SetImage(canvasImage,Quantum(MaxRGB));//must\n    canvasImage->matte = true;//musta\n    MagickFree(pixels);\n    DestroyExceptionInfo(&exception);\n\n    if (img != NULL)\n        DestroyImageList(img);\n    img = canvasImage;\n    return true;\n}\n```\n\n### Step 2 : 制作文字图片\n\n使用Annotate函数在textImg图上打上文字，并指定Annotate为Center，即写在正中。\n\n```\n/**\n * Draw Text on the center of the image \n *@param:image,image to annotate\n *@param:text,text to annotate\n *@param:font_pointsize,fontsize in point\n *@param:fill_color,color of font \n *return true on success while false on failed\n */\nbool DrawText(Image *& image, const char * text, const double font_pointsize,const char * fill_color) \n{\n    cout << \"text:\" << text << endl;\n    cout << \"color:\" << fill_color << endl;\n\n    DrawContext draw_context;\n    draw_context = DrawAllocateContext((DrawInfo*)NULL, image);\n    DrawSetFillColorString(draw_context, fill_color);\n\n    DrawSetStrokeAntialias(draw_context, 0);\n    DrawSetTextAntialias(draw_context, 0);\n    DrawSetFont(draw_context, FONT_DEFAULT);\n    DrawSetFontSize(draw_context, font_pointsize);\n    DrawSetGravity(draw_context, CenterGravity);\n    DrawSetTextEncoding(draw_context, \"UTF-8\");\n    DrawAnnotation(draw_context, 0, 0, (const unsigned char *)text);\n    unsigned int ret = DrawRender(draw_context);\n    DrawDestroyContext(draw_context);\n    return ret;\n}\n\n```\n\n### Step 3:裁减获得文字logo\n\n分析图textImg的每一个像素，找到包含水印文字的最小矩形所在位置，使用CropImage获得该矩形所在图作为logo。\n\n```\n/** \n * Trim Image\n * remove transparent part around the Text\n * return image with text only\n */\nImage * trimImage(Image *& image){\n    if(IsGIF(image)) {\n       return NULL;\n    }\n    int y, x;\n    int sx,sy,ex,ey;\n    register PixelPacket *q;\n    RectangleInfo rect;\n    ExceptionInfo exception;\n    GetExceptionInfo(&exception);\n    sx = image->columns;\n    sy = image->rows;\n    ex = 0;\n    ey = 0;\n\n    for (y=0; y < (long) image->rows; y++)\n    {\n        q=GetImagePixels(image,0,y,image->columns,1);\n        if (q == (PixelPacket *) NULL)\n            break;\n        for (x=0; x < (long) image->columns; x++)\n        {\n            if(q->opacity != MaxRGB) {\n                sx = sx < x ? sx:x;\n                sy = sy < y ? sy:y;\n                ex = ex > x ? ex:x;\n                ey = ey > y ? ey:y;                \n            }\n            q++;\n        }\n    }\n    cout << \"sx:\" << sx << \",sy:\" << sy << \",ex:\" << ex << \",ey:\" << ey << endl;\n    if(sx >= ex || sy >= ey) { // Too small\n        rect.x = 0;\n        rect.y = 0;\n        rect.width = image->columns;\n        rect.height = image->rows;\n    } else {\n        rect.x = sx;\n        rect.y = sy;\n        rect.width = ex - sx + 1;\n        rect.height = ey - sy + 1;\n    }\n    cout << \"x:\" << rect.x << \",y:\" << rect.y << \",rect.width:\" << rect.width << \",rect.height:\" << rect.height << endl;\n    Image *cImage = CropImage(image, &rect, &exception);\n    cout << \"cImage clomnes:\" << cImage->columns << \",rows:\" << cImage->rows << endl;\n\n    DestroyExceptionInfo(&exception);\n    return cImage;\n}\n\n```\n\n### Step 4:设置文字logo透明度\n\n设置logo图片非透明部分透明度\n\n```\n\n/**\n * set dissolve \n * @param image \n * @dissolve:0~100,0 means totally transparent while 100 means opa,q\n * */\nMagickPassFail dissolveImage(Image *image,int dissolve){\n    int y, x;\n    register PixelPacket\n        *q;\n    for (y=0; y < (long) image->rows; y++)\n    {\n        q=GetImagePixels(image,0,y,image->columns,1);\n        if (q == (PixelPacket *) NULL)\n            break;\n        for (x=0; x < (long) image->columns; x++)\n        {\n            if(q->opacity != MaxRGB) {\n                q->opacity=(Quantum)\n                    (MaxRGB - ((MaxRGB-q->opacity)/100.0*dissolve));\n            }\n            q++;\n        }\n        if (!SyncImagePixels(image)){\n            return MagickFail;\n        }\n    }\n    return MagickPass;\n}\n\n```\n\n### Step 5:将logo打到原图对应位置\n \n根据gravity算出logo图该落的偏移位置x_offset,y_offset,以CompositeImage的方式将logo图片拼接到原图上。\n\nlogo 偏移量计算\n\n| Gravity        | x_offset           | y_offset  |\n| ------------- |:-------------:| -----:|\n|NorthWestGravity | dx|dy |\n|NorthGravity|image.cols/2 - logo.cols/2 + dx|dy|\n|NorthEastGravity|image.cols-dx-logo.cols|dy|\n|WestGravity|dx|image.rows/2 - logo.rows/2 + dy|\n|CenterGravity|image.colns/2 - logo.cols/2 + dx|image.rows/2 - logo.rows/2 + dy|\n|EastGravity|image.cols - dx - logo.cols|image.rows/2 - logo.rows/2 + dy|\n|SouthWestGravity|dx|image.rows - logo.rows - dy|\n|SouthGravity|image.cols/2 - logo.cols/2 + dx|image.rows - logo.rows - dy|\n|SouthEastGravity|image.cols - dx - logo.cols|image.rows - logo.rows - dy|\n\n```\n/**\n *Composite Image \n *@param image:source image \n *@param logo:logo image \n *@param gravity,\n *|NorthWestGravity |NorthGravity   |NorthEastGravity   |\n *|WestGravity      |CenterGravity  |EastGravity        |\n *|SouthEastGravity |SouthGravity   |SouthEastGravity   |\n *@param dx:offset on x\n *@param dy:offset on y\n * return true on success,false on failed \n */\nbool compositeImage(Image *image,Image *logo,GravityType gravity,long dx,long dy) {\n   int x_offset,y_offset;\n\n   switch(gravity){\n       case NorthWestGravity:{\n           x_offset = dx;\n           y_offset = dy;\n           break;\n        }\n       case NorthGravity:{\n           x_offset = image->columns/2 - logo->columns/2 + dx;\n           y_offset = dy;\n           break;\n       }\n       case NorthEastGravity: {\n           x_offset = image->columns-dx-logo->columns;\n           y_offset = dy;\n           break;\n       }\n       case WestGravity:{\n           x_offset = dx;\n           y_offset = image->rows/2 - logo->rows/2 + dy;\n           break;\n       }\n       case CenterGravity: {\n          x_offset = image->columns/2 - logo->columns/2 + dx;\n          y_offset = image->rows/2 - logo->rows/2 + dy;\n          break;\n       }\n       case EastGravity:{\n          x_offset = image->columns - dx - logo->columns;       \n          y_offset = image->rows/2 - logo->rows/2 + dy;\n          break;\n       }\n     case SouthWestGravity:{\n          x_offset = dx;\n          y_offset = image->rows - logo->rows - dy;\n          break;\n       }\n\n       case SouthGravity:\n           x_offset = image->columns/2 - logo->columns/2 + dx;\n           y_offset = image->rows - logo->rows - dy;\n           break;\n       \n       case SouthEastGravity:{\n           x_offset = image->columns - dx - logo->columns;\n           y_offset = image->rows - logo->rows - dy;\n           break;\n       }\n       default:{\n           cout << \"Illegal GravityType:\" << gravity;      \n           break;\n       }\n   }\n\n    if(CompositeImage(image, AtopCompositeOp,logo, x_offset, y_offset) != 1) {\n          return false;\n    }\n    return true;\n}\n\n```\n\n## 完整示例\n\n### 代码\n\n[water_mark_txt](https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/water_mark_txt.cpp)\n\n### 效果\n\n<img src=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/data/water_mark_txt.jpg?raw=true\" alt=\"water_mark_txt.jpg\" title=\"water_mark_txt.jpg\" width=\"400\" />\n\n","slug":"2014-12-25-text-watermark","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhe002nqj7lj9u2o9j1","content":"<h1 id=\"基于graphicMagick实现图片文字水印\"><a href=\"#基于graphicMagick实现图片文字水印\" class=\"headerlink\" title=\"基于graphicMagick实现图片文字水印\"></a>基于graphicMagick实现图片文字水印</h1><ul><br><li><a href=\"#使用graphicmagick实现图片文字水印\">使用graphicMagick实现图片文字水印</a><ul><br><li><a href=\"#背景及需求\">背景及需求</a></li><br><li><a href=\"#分析\">分析</a><ul><br><li><a href=\"#水印位置\">水印位置</a></li><br><li><a href=\"#水印透明度\">水印透明度</a></li><br></ul><br></li><br><li><a href=\"#实现方案\">实现方案</a><ul><br><li><a href=\"#step-1-构造水印画布\">Step 1. 构造水印画布</a></li><br><li><a href=\"#step-2-制作文字图片\">Step 2 : 制作文字图片</a></li><br><li><a href=\"#step-3裁减获得文字logo\">Step 3:裁减获得文字logo</a></li><br><li><a href=\"#step-4设置文字logo透明度\">Step 4:设置文字logo透明度</a></li><br><li><a href=\"#step-5将logo打到原图对应位置\">Step 5:将logo打到原图对应位置</a></li><br></ul><br></li><br><li><a href=\"#完整示例\">完整示例</a><ul><br><li><a href=\"#代码\">代码</a></li><br><li><a href=\"#效果\">效果</a></li><br></ul><br></li><br></ul><br></li><br></ul>\n\n\n\n\n<h2 id=\"背景及需求\"><a href=\"#背景及需求\" class=\"headerlink\" title=\"背景及需求\"></a>背景及需求</h2><p>使用GraphicMagick给图片打文字水印，<br>除文字内容，字体，字体大小等基本属性外，要求可调以下参数：<br>1.指定文字GravityType，其中Gravity为以下九宫格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NorthWest     |     North      |     NorthEast</span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">--------------+----------------+--------------</span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">West          |     Center     |          East </span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">--------------+----------------+--------------</span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">SouthWest     |     South      |     SouthEast</span><br></pre></td></tr></table></figure>\n<p>2.可指定文字边距，包括横轴边距dx,中轴边距 dy。</p>\n<p>3.可指定文字的透明度</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"水印位置\"><a href=\"#水印位置\" class=\"headerlink\" title=\"水印位置\"></a>水印位置</h3><p>水印位置由Gravity和dx,dy共同决定，其中Annotate中可直接指定Gravity，但dx,dy没有直接的参数可以设置。</p>\n<h3 id=\"水印透明度\"><a href=\"#水印透明度\" class=\"headerlink\" title=\"水印透明度\"></a>水印透明度</h3><p>文字水印Annotate无法指定文字透明度</p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><p>介于以上分析，无法直接使用AnnotateImage来实现，设计方案如下：</p>\n<h3 id=\"Step-1-构造水印画布\"><a href=\"#Step-1-构造水印画布\" class=\"headerlink\" title=\"Step 1. 构造水印画布\"></a>Step 1. 构造水印画布</h3><p>画一张与原图image同样大小的透明图片textImg,作为文字水印的画布</p>\n<p>关键函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:right\">其它</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.graphicsmagick.org/api/constitute.html#constituteimage\" target=\"_blank\" rel=\"external\">ConstituteImage</a></td>\n<td style=\"text-align:center\">构造图片</td>\n<td style=\"text-align:right\">..</td>\n</tr>\n<tr>\n<td><a href=\"http://www.graphicsmagick.org/api/image.html#setimage\" target=\"_blank\" rel=\"external\">SetImage</a></td>\n<td style=\"text-align:center\">设置图片透明度</td>\n<td style=\"text-align:right\">..</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Constitute a transparent Image with nCloumns and nRows</span><br><span class=\"line\"> * @param:img,pointer to save the dest image </span><br><span class=\"line\"> * @param:nColumns,columns of the dest image </span><br><span class=\"line\"> * @param:nRows,rows of the dest image </span><br><span class=\"line\"> * return true with transparent image in img,return false on failed.</span><br><span class=\"line\"> */</span><br><span class=\"line\">bool constituteNewImage(Image * &amp; img, int nColumns, int nRows)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ExceptionInfo exception;</span><br><span class=\"line\">    GetExceptionInfo(&amp;exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t pixels_size = nColumns * nRows * sizeof(Quantum) * strlen(COLOR_MAPPING);</span><br><span class=\"line\">    Quantum * pixels = (Quantum *)MagickMalloc(pixels_size);</span><br><span class=\"line\">    memset((void *) pixels, 0, pixels_size);</span><br><span class=\"line\">    Image * canvasImage = ConstituteImage(nColumns, nRows, COLOR_MAPPING, CharPixel, pixels, &amp;exception);</span><br><span class=\"line\">    //made it transparent</span><br><span class=\"line\">    SetImage(canvasImage,Quantum(MaxRGB));//must</span><br><span class=\"line\">    canvasImage-&gt;matte = true;//musta</span><br><span class=\"line\">    MagickFree(pixels);</span><br><span class=\"line\">    DestroyExceptionInfo(&amp;exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (img != NULL)</span><br><span class=\"line\">        DestroyImageList(img);</span><br><span class=\"line\">    img = canvasImage;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2-制作文字图片\"><a href=\"#Step-2-制作文字图片\" class=\"headerlink\" title=\"Step 2 : 制作文字图片\"></a>Step 2 : 制作文字图片</h3><p>使用Annotate函数在textImg图上打上文字，并指定Annotate为Center，即写在正中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Draw Text on the center of the image </span><br><span class=\"line\"> *@param:image,image to annotate</span><br><span class=\"line\"> *@param:text,text to annotate</span><br><span class=\"line\"> *@param:font_pointsize,fontsize in point</span><br><span class=\"line\"> *@param:fill_color,color of font </span><br><span class=\"line\"> *return true on success while false on failed</span><br><span class=\"line\"> */</span><br><span class=\"line\">bool DrawText(Image *&amp; image, const char * text, const double font_pointsize,const char * fill_color) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;text:&quot; &lt;&lt; text &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;color:&quot; &lt;&lt; fill_color &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    DrawContext draw_context;</span><br><span class=\"line\">    draw_context = DrawAllocateContext((DrawInfo*)NULL, image);</span><br><span class=\"line\">    DrawSetFillColorString(draw_context, fill_color);</span><br><span class=\"line\"></span><br><span class=\"line\">    DrawSetStrokeAntialias(draw_context, 0);</span><br><span class=\"line\">    DrawSetTextAntialias(draw_context, 0);</span><br><span class=\"line\">    DrawSetFont(draw_context, FONT_DEFAULT);</span><br><span class=\"line\">    DrawSetFontSize(draw_context, font_pointsize);</span><br><span class=\"line\">    DrawSetGravity(draw_context, CenterGravity);</span><br><span class=\"line\">    DrawSetTextEncoding(draw_context, &quot;UTF-8&quot;);</span><br><span class=\"line\">    DrawAnnotation(draw_context, 0, 0, (const unsigned char *)text);</span><br><span class=\"line\">    unsigned int ret = DrawRender(draw_context);</span><br><span class=\"line\">    DrawDestroyContext(draw_context);</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3-裁减获得文字logo\"><a href=\"#Step-3-裁减获得文字logo\" class=\"headerlink\" title=\"Step 3:裁减获得文字logo\"></a>Step 3:裁减获得文字logo</h3><p>分析图textImg的每一个像素，找到包含水印文字的最小矩形所在位置，使用CropImage获得该矩形所在图作为logo。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\"> * Trim Image</span><br><span class=\"line\"> * remove transparent part around the Text</span><br><span class=\"line\"> * return image with text only</span><br><span class=\"line\"> */</span><br><span class=\"line\">Image * trimImage(Image *&amp; image)&#123;</span><br><span class=\"line\">    if(IsGIF(image)) &#123;</span><br><span class=\"line\">       return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int y, x;</span><br><span class=\"line\">    int sx,sy,ex,ey;</span><br><span class=\"line\">    register PixelPacket *q;</span><br><span class=\"line\">    RectangleInfo rect;</span><br><span class=\"line\">    ExceptionInfo exception;</span><br><span class=\"line\">    GetExceptionInfo(&amp;exception);</span><br><span class=\"line\">    sx = image-&gt;columns;</span><br><span class=\"line\">    sy = image-&gt;rows;</span><br><span class=\"line\">    ex = 0;</span><br><span class=\"line\">    ey = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (y=0; y &lt; (long) image-&gt;rows; y++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=GetImagePixels(image,0,y,image-&gt;columns,1);</span><br><span class=\"line\">        if (q == (PixelPacket *) NULL)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        for (x=0; x &lt; (long) image-&gt;columns; x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(q-&gt;opacity != MaxRGB) &#123;</span><br><span class=\"line\">                sx = sx &lt; x ? sx:x;</span><br><span class=\"line\">                sy = sy &lt; y ? sy:y;</span><br><span class=\"line\">                ex = ex &gt; x ? ex:x;</span><br><span class=\"line\">                ey = ey &gt; y ? ey:y;                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; &quot;sx:&quot; &lt;&lt; sx &lt;&lt; &quot;,sy:&quot; &lt;&lt; sy &lt;&lt; &quot;,ex:&quot; &lt;&lt; ex &lt;&lt; &quot;,ey:&quot; &lt;&lt; ey &lt;&lt; endl;</span><br><span class=\"line\">    if(sx &gt;= ex || sy &gt;= ey) &#123; // Too small</span><br><span class=\"line\">        rect.x = 0;</span><br><span class=\"line\">        rect.y = 0;</span><br><span class=\"line\">        rect.width = image-&gt;columns;</span><br><span class=\"line\">        rect.height = image-&gt;rows;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        rect.x = sx;</span><br><span class=\"line\">        rect.y = sy;</span><br><span class=\"line\">        rect.width = ex - sx + 1;</span><br><span class=\"line\">        rect.height = ey - sy + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; &quot;x:&quot; &lt;&lt; rect.x &lt;&lt; &quot;,y:&quot; &lt;&lt; rect.y &lt;&lt; &quot;,rect.width:&quot; &lt;&lt; rect.width &lt;&lt; &quot;,rect.height:&quot; &lt;&lt; rect.height &lt;&lt; endl;</span><br><span class=\"line\">    Image *cImage = CropImage(image, &amp;rect, &amp;exception);</span><br><span class=\"line\">    cout &lt;&lt; &quot;cImage clomnes:&quot; &lt;&lt; cImage-&gt;columns &lt;&lt; &quot;,rows:&quot; &lt;&lt; cImage-&gt;rows &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    DestroyExceptionInfo(&amp;exception);</span><br><span class=\"line\">    return cImage;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-4-设置文字logo透明度\"><a href=\"#Step-4-设置文字logo透明度\" class=\"headerlink\" title=\"Step 4:设置文字logo透明度\"></a>Step 4:设置文字logo透明度</h3><p>设置logo图片非透明部分透明度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * set dissolve </span><br><span class=\"line\"> * @param image </span><br><span class=\"line\"> * @dissolve:0~100,0 means totally transparent while 100 means opa,q</span><br><span class=\"line\"> * */</span><br><span class=\"line\">MagickPassFail dissolveImage(Image *image,int dissolve)&#123;</span><br><span class=\"line\">    int y, x;</span><br><span class=\"line\">    register PixelPacket</span><br><span class=\"line\">        *q;</span><br><span class=\"line\">    for (y=0; y &lt; (long) image-&gt;rows; y++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=GetImagePixels(image,0,y,image-&gt;columns,1);</span><br><span class=\"line\">        if (q == (PixelPacket *) NULL)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        for (x=0; x &lt; (long) image-&gt;columns; x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(q-&gt;opacity != MaxRGB) &#123;</span><br><span class=\"line\">                q-&gt;opacity=(Quantum)</span><br><span class=\"line\">                    (MaxRGB - ((MaxRGB-q-&gt;opacity)/100.0*dissolve));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!SyncImagePixels(image))&#123;</span><br><span class=\"line\">            return MagickFail;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return MagickPass;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-5-将logo打到原图对应位置\"><a href=\"#Step-5-将logo打到原图对应位置\" class=\"headerlink\" title=\"Step 5:将logo打到原图对应位置\"></a>Step 5:将logo打到原图对应位置</h3><p>根据gravity算出logo图该落的偏移位置x_offset,y_offset,以CompositeImage的方式将logo图片拼接到原图上。</p>\n<p>logo 偏移量计算</p>\n<table>\n<thead>\n<tr>\n<th>Gravity</th>\n<th style=\"text-align:center\">x_offset</th>\n<th style=\"text-align:right\">y_offset</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NorthWestGravity</td>\n<td style=\"text-align:center\">dx</td>\n<td style=\"text-align:right\">dy</td>\n</tr>\n<tr>\n<td>NorthGravity</td>\n<td style=\"text-align:center\">image.cols/2 - logo.cols/2 + dx</td>\n<td style=\"text-align:right\">dy</td>\n</tr>\n<tr>\n<td>NorthEastGravity</td>\n<td style=\"text-align:center\">image.cols-dx-logo.cols</td>\n<td style=\"text-align:right\">dy</td>\n</tr>\n<tr>\n<td>WestGravity</td>\n<td style=\"text-align:center\">dx</td>\n<td style=\"text-align:right\">image.rows/2 - logo.rows/2 + dy</td>\n</tr>\n<tr>\n<td>CenterGravity</td>\n<td style=\"text-align:center\">image.colns/2 - logo.cols/2 + dx</td>\n<td style=\"text-align:right\">image.rows/2 - logo.rows/2 + dy</td>\n</tr>\n<tr>\n<td>EastGravity</td>\n<td style=\"text-align:center\">image.cols - dx - logo.cols</td>\n<td style=\"text-align:right\">image.rows/2 - logo.rows/2 + dy</td>\n</tr>\n<tr>\n<td>SouthWestGravity</td>\n<td style=\"text-align:center\">dx</td>\n<td style=\"text-align:right\">image.rows - logo.rows - dy</td>\n</tr>\n<tr>\n<td>SouthGravity</td>\n<td style=\"text-align:center\">image.cols/2 - logo.cols/2 + dx</td>\n<td style=\"text-align:right\">image.rows - logo.rows - dy</td>\n</tr>\n<tr>\n<td>SouthEastGravity</td>\n<td style=\"text-align:center\">image.cols - dx - logo.cols</td>\n<td style=\"text-align:right\">image.rows - logo.rows - dy</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *Composite Image </span><br><span class=\"line\"> *@param image:source image </span><br><span class=\"line\"> *@param logo:logo image </span><br><span class=\"line\"> *@param gravity,</span><br><span class=\"line\"> *|NorthWestGravity |NorthGravity   |NorthEastGravity   |</span><br><span class=\"line\"> *|WestGravity      |CenterGravity  |EastGravity        |</span><br><span class=\"line\"> *|SouthEastGravity |SouthGravity   |SouthEastGravity   |</span><br><span class=\"line\"> *@param dx:offset on x</span><br><span class=\"line\"> *@param dy:offset on y</span><br><span class=\"line\"> * return true on success,false on failed </span><br><span class=\"line\"> */</span><br><span class=\"line\">bool compositeImage(Image *image,Image *logo,GravityType gravity,long dx,long dy) &#123;</span><br><span class=\"line\">   int x_offset,y_offset;</span><br><span class=\"line\"></span><br><span class=\"line\">   switch(gravity)&#123;</span><br><span class=\"line\">       case NorthWestGravity:&#123;</span><br><span class=\"line\">           x_offset = dx;</span><br><span class=\"line\">           y_offset = dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       case NorthGravity:&#123;</span><br><span class=\"line\">           x_offset = image-&gt;columns/2 - logo-&gt;columns/2 + dx;</span><br><span class=\"line\">           y_offset = dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case NorthEastGravity: &#123;</span><br><span class=\"line\">           x_offset = image-&gt;columns-dx-logo-&gt;columns;</span><br><span class=\"line\">           y_offset = dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case WestGravity:&#123;</span><br><span class=\"line\">           x_offset = dx;</span><br><span class=\"line\">           y_offset = image-&gt;rows/2 - logo-&gt;rows/2 + dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case CenterGravity: &#123;</span><br><span class=\"line\">          x_offset = image-&gt;columns/2 - logo-&gt;columns/2 + dx;</span><br><span class=\"line\">          y_offset = image-&gt;rows/2 - logo-&gt;rows/2 + dy;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case EastGravity:&#123;</span><br><span class=\"line\">          x_offset = image-&gt;columns - dx - logo-&gt;columns;       </span><br><span class=\"line\">          y_offset = image-&gt;rows/2 - logo-&gt;rows/2 + dy;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     case SouthWestGravity:&#123;</span><br><span class=\"line\">          x_offset = dx;</span><br><span class=\"line\">          y_offset = image-&gt;rows - logo-&gt;rows - dy;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       case SouthGravity:</span><br><span class=\"line\">           x_offset = image-&gt;columns/2 - logo-&gt;columns/2 + dx;</span><br><span class=\"line\">           y_offset = image-&gt;rows - logo-&gt;rows - dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       </span><br><span class=\"line\">       case SouthEastGravity:&#123;</span><br><span class=\"line\">           x_offset = image-&gt;columns - dx - logo-&gt;columns;</span><br><span class=\"line\">           y_offset = image-&gt;rows - logo-&gt;rows - dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       default:&#123;</span><br><span class=\"line\">           cout &lt;&lt; &quot;Illegal GravityType:&quot; &lt;&lt; gravity;      </span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(CompositeImage(image, AtopCompositeOp,logo, x_offset, y_offset) != 1) &#123;</span><br><span class=\"line\">          return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/water_mark_txt.cpp\" target=\"_blank\" rel=\"external\">water_mark_txt</a></p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/data/water_mark_txt.jpg?raw=true\" alt=\"water_mark_txt.jpg\" title=\"water_mark_txt.jpg\" width=\"400\"></p>\n","excerpt":"","more":"<h1 id=\"基于graphicMagick实现图片文字水印\"><a href=\"#基于graphicMagick实现图片文字水印\" class=\"headerlink\" title=\"基于graphicMagick实现图片文字水印\"></a>基于graphicMagick实现图片文字水印</h1><ul><br><li><a href=\"#使用graphicmagick实现图片文字水印\">使用graphicMagick实现图片文字水印</a><ul><br><li><a href=\"#背景及需求\">背景及需求</a></li><br><li><a href=\"#分析\">分析</a><ul><br><li><a href=\"#水印位置\">水印位置</a></li><br><li><a href=\"#水印透明度\">水印透明度</a></li><br></ul><br></li><br><li><a href=\"#实现方案\">实现方案</a><ul><br><li><a href=\"#step-1-构造水印画布\">Step 1. 构造水印画布</a></li><br><li><a href=\"#step-2-制作文字图片\">Step 2 : 制作文字图片</a></li><br><li><a href=\"#step-3裁减获得文字logo\">Step 3:裁减获得文字logo</a></li><br><li><a href=\"#step-4设置文字logo透明度\">Step 4:设置文字logo透明度</a></li><br><li><a href=\"#step-5将logo打到原图对应位置\">Step 5:将logo打到原图对应位置</a></li><br></ul><br></li><br><li><a href=\"#完整示例\">完整示例</a><ul><br><li><a href=\"#代码\">代码</a></li><br><li><a href=\"#效果\">效果</a></li><br></ul><br></li><br></ul><br></li><br></ul>\n\n\n\n\n<h2 id=\"背景及需求\"><a href=\"#背景及需求\" class=\"headerlink\" title=\"背景及需求\"></a>背景及需求</h2><p>使用GraphicMagick给图片打文字水印，<br>除文字内容，字体，字体大小等基本属性外，要求可调以下参数：<br>1.指定文字GravityType，其中Gravity为以下九宫格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NorthWest     |     North      |     NorthEast</span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">--------------+----------------+--------------</span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">West          |     Center     |          East </span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">--------------+----------------+--------------</span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">              |                |    </span><br><span class=\"line\">SouthWest     |     South      |     SouthEast</span><br></pre></td></tr></table></figure>\n<p>2.可指定文字边距，包括横轴边距dx,中轴边距 dy。</p>\n<p>3.可指定文字的透明度</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"水印位置\"><a href=\"#水印位置\" class=\"headerlink\" title=\"水印位置\"></a>水印位置</h3><p>水印位置由Gravity和dx,dy共同决定，其中Annotate中可直接指定Gravity，但dx,dy没有直接的参数可以设置。</p>\n<h3 id=\"水印透明度\"><a href=\"#水印透明度\" class=\"headerlink\" title=\"水印透明度\"></a>水印透明度</h3><p>文字水印Annotate无法指定文字透明度</p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><p>介于以上分析，无法直接使用AnnotateImage来实现，设计方案如下：</p>\n<h3 id=\"Step-1-构造水印画布\"><a href=\"#Step-1-构造水印画布\" class=\"headerlink\" title=\"Step 1. 构造水印画布\"></a>Step 1. 构造水印画布</h3><p>画一张与原图image同样大小的透明图片textImg,作为文字水印的画布</p>\n<p>关键函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:right\">其它</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.graphicsmagick.org/api/constitute.html#constituteimage\">ConstituteImage</a></td>\n<td style=\"text-align:center\">构造图片</td>\n<td style=\"text-align:right\">..</td>\n</tr>\n<tr>\n<td><a href=\"http://www.graphicsmagick.org/api/image.html#setimage\">SetImage</a></td>\n<td style=\"text-align:center\">设置图片透明度</td>\n<td style=\"text-align:right\">..</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Constitute a transparent Image with nCloumns and nRows</span><br><span class=\"line\"> * @param:img,pointer to save the dest image </span><br><span class=\"line\"> * @param:nColumns,columns of the dest image </span><br><span class=\"line\"> * @param:nRows,rows of the dest image </span><br><span class=\"line\"> * return true with transparent image in img,return false on failed.</span><br><span class=\"line\"> */</span><br><span class=\"line\">bool constituteNewImage(Image * &amp; img, int nColumns, int nRows)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ExceptionInfo exception;</span><br><span class=\"line\">    GetExceptionInfo(&amp;exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t pixels_size = nColumns * nRows * sizeof(Quantum) * strlen(COLOR_MAPPING);</span><br><span class=\"line\">    Quantum * pixels = (Quantum *)MagickMalloc(pixels_size);</span><br><span class=\"line\">    memset((void *) pixels, 0, pixels_size);</span><br><span class=\"line\">    Image * canvasImage = ConstituteImage(nColumns, nRows, COLOR_MAPPING, CharPixel, pixels, &amp;exception);</span><br><span class=\"line\">    //made it transparent</span><br><span class=\"line\">    SetImage(canvasImage,Quantum(MaxRGB));//must</span><br><span class=\"line\">    canvasImage-&gt;matte = true;//musta</span><br><span class=\"line\">    MagickFree(pixels);</span><br><span class=\"line\">    DestroyExceptionInfo(&amp;exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (img != NULL)</span><br><span class=\"line\">        DestroyImageList(img);</span><br><span class=\"line\">    img = canvasImage;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2-制作文字图片\"><a href=\"#Step-2-制作文字图片\" class=\"headerlink\" title=\"Step 2 : 制作文字图片\"></a>Step 2 : 制作文字图片</h3><p>使用Annotate函数在textImg图上打上文字，并指定Annotate为Center，即写在正中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Draw Text on the center of the image </span><br><span class=\"line\"> *@param:image,image to annotate</span><br><span class=\"line\"> *@param:text,text to annotate</span><br><span class=\"line\"> *@param:font_pointsize,fontsize in point</span><br><span class=\"line\"> *@param:fill_color,color of font </span><br><span class=\"line\"> *return true on success while false on failed</span><br><span class=\"line\"> */</span><br><span class=\"line\">bool DrawText(Image *&amp; image, const char * text, const double font_pointsize,const char * fill_color) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;text:&quot; &lt;&lt; text &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;color:&quot; &lt;&lt; fill_color &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    DrawContext draw_context;</span><br><span class=\"line\">    draw_context = DrawAllocateContext((DrawInfo*)NULL, image);</span><br><span class=\"line\">    DrawSetFillColorString(draw_context, fill_color);</span><br><span class=\"line\"></span><br><span class=\"line\">    DrawSetStrokeAntialias(draw_context, 0);</span><br><span class=\"line\">    DrawSetTextAntialias(draw_context, 0);</span><br><span class=\"line\">    DrawSetFont(draw_context, FONT_DEFAULT);</span><br><span class=\"line\">    DrawSetFontSize(draw_context, font_pointsize);</span><br><span class=\"line\">    DrawSetGravity(draw_context, CenterGravity);</span><br><span class=\"line\">    DrawSetTextEncoding(draw_context, &quot;UTF-8&quot;);</span><br><span class=\"line\">    DrawAnnotation(draw_context, 0, 0, (const unsigned char *)text);</span><br><span class=\"line\">    unsigned int ret = DrawRender(draw_context);</span><br><span class=\"line\">    DrawDestroyContext(draw_context);</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3-裁减获得文字logo\"><a href=\"#Step-3-裁减获得文字logo\" class=\"headerlink\" title=\"Step 3:裁减获得文字logo\"></a>Step 3:裁减获得文字logo</h3><p>分析图textImg的每一个像素，找到包含水印文字的最小矩形所在位置，使用CropImage获得该矩形所在图作为logo。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\"> * Trim Image</span><br><span class=\"line\"> * remove transparent part around the Text</span><br><span class=\"line\"> * return image with text only</span><br><span class=\"line\"> */</span><br><span class=\"line\">Image * trimImage(Image *&amp; image)&#123;</span><br><span class=\"line\">    if(IsGIF(image)) &#123;</span><br><span class=\"line\">       return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int y, x;</span><br><span class=\"line\">    int sx,sy,ex,ey;</span><br><span class=\"line\">    register PixelPacket *q;</span><br><span class=\"line\">    RectangleInfo rect;</span><br><span class=\"line\">    ExceptionInfo exception;</span><br><span class=\"line\">    GetExceptionInfo(&amp;exception);</span><br><span class=\"line\">    sx = image-&gt;columns;</span><br><span class=\"line\">    sy = image-&gt;rows;</span><br><span class=\"line\">    ex = 0;</span><br><span class=\"line\">    ey = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (y=0; y &lt; (long) image-&gt;rows; y++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=GetImagePixels(image,0,y,image-&gt;columns,1);</span><br><span class=\"line\">        if (q == (PixelPacket *) NULL)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        for (x=0; x &lt; (long) image-&gt;columns; x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(q-&gt;opacity != MaxRGB) &#123;</span><br><span class=\"line\">                sx = sx &lt; x ? sx:x;</span><br><span class=\"line\">                sy = sy &lt; y ? sy:y;</span><br><span class=\"line\">                ex = ex &gt; x ? ex:x;</span><br><span class=\"line\">                ey = ey &gt; y ? ey:y;                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; &quot;sx:&quot; &lt;&lt; sx &lt;&lt; &quot;,sy:&quot; &lt;&lt; sy &lt;&lt; &quot;,ex:&quot; &lt;&lt; ex &lt;&lt; &quot;,ey:&quot; &lt;&lt; ey &lt;&lt; endl;</span><br><span class=\"line\">    if(sx &gt;= ex || sy &gt;= ey) &#123; // Too small</span><br><span class=\"line\">        rect.x = 0;</span><br><span class=\"line\">        rect.y = 0;</span><br><span class=\"line\">        rect.width = image-&gt;columns;</span><br><span class=\"line\">        rect.height = image-&gt;rows;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        rect.x = sx;</span><br><span class=\"line\">        rect.y = sy;</span><br><span class=\"line\">        rect.width = ex - sx + 1;</span><br><span class=\"line\">        rect.height = ey - sy + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; &quot;x:&quot; &lt;&lt; rect.x &lt;&lt; &quot;,y:&quot; &lt;&lt; rect.y &lt;&lt; &quot;,rect.width:&quot; &lt;&lt; rect.width &lt;&lt; &quot;,rect.height:&quot; &lt;&lt; rect.height &lt;&lt; endl;</span><br><span class=\"line\">    Image *cImage = CropImage(image, &amp;rect, &amp;exception);</span><br><span class=\"line\">    cout &lt;&lt; &quot;cImage clomnes:&quot; &lt;&lt; cImage-&gt;columns &lt;&lt; &quot;,rows:&quot; &lt;&lt; cImage-&gt;rows &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    DestroyExceptionInfo(&amp;exception);</span><br><span class=\"line\">    return cImage;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-4-设置文字logo透明度\"><a href=\"#Step-4-设置文字logo透明度\" class=\"headerlink\" title=\"Step 4:设置文字logo透明度\"></a>Step 4:设置文字logo透明度</h3><p>设置logo图片非透明部分透明度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * set dissolve </span><br><span class=\"line\"> * @param image </span><br><span class=\"line\"> * @dissolve:0~100,0 means totally transparent while 100 means opa,q</span><br><span class=\"line\"> * */</span><br><span class=\"line\">MagickPassFail dissolveImage(Image *image,int dissolve)&#123;</span><br><span class=\"line\">    int y, x;</span><br><span class=\"line\">    register PixelPacket</span><br><span class=\"line\">        *q;</span><br><span class=\"line\">    for (y=0; y &lt; (long) image-&gt;rows; y++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q=GetImagePixels(image,0,y,image-&gt;columns,1);</span><br><span class=\"line\">        if (q == (PixelPacket *) NULL)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        for (x=0; x &lt; (long) image-&gt;columns; x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(q-&gt;opacity != MaxRGB) &#123;</span><br><span class=\"line\">                q-&gt;opacity=(Quantum)</span><br><span class=\"line\">                    (MaxRGB - ((MaxRGB-q-&gt;opacity)/100.0*dissolve));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!SyncImagePixels(image))&#123;</span><br><span class=\"line\">            return MagickFail;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return MagickPass;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-5-将logo打到原图对应位置\"><a href=\"#Step-5-将logo打到原图对应位置\" class=\"headerlink\" title=\"Step 5:将logo打到原图对应位置\"></a>Step 5:将logo打到原图对应位置</h3><p>根据gravity算出logo图该落的偏移位置x_offset,y_offset,以CompositeImage的方式将logo图片拼接到原图上。</p>\n<p>logo 偏移量计算</p>\n<table>\n<thead>\n<tr>\n<th>Gravity</th>\n<th style=\"text-align:center\">x_offset</th>\n<th style=\"text-align:right\">y_offset</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NorthWestGravity</td>\n<td style=\"text-align:center\">dx</td>\n<td style=\"text-align:right\">dy</td>\n</tr>\n<tr>\n<td>NorthGravity</td>\n<td style=\"text-align:center\">image.cols/2 - logo.cols/2 + dx</td>\n<td style=\"text-align:right\">dy</td>\n</tr>\n<tr>\n<td>NorthEastGravity</td>\n<td style=\"text-align:center\">image.cols-dx-logo.cols</td>\n<td style=\"text-align:right\">dy</td>\n</tr>\n<tr>\n<td>WestGravity</td>\n<td style=\"text-align:center\">dx</td>\n<td style=\"text-align:right\">image.rows/2 - logo.rows/2 + dy</td>\n</tr>\n<tr>\n<td>CenterGravity</td>\n<td style=\"text-align:center\">image.colns/2 - logo.cols/2 + dx</td>\n<td style=\"text-align:right\">image.rows/2 - logo.rows/2 + dy</td>\n</tr>\n<tr>\n<td>EastGravity</td>\n<td style=\"text-align:center\">image.cols - dx - logo.cols</td>\n<td style=\"text-align:right\">image.rows/2 - logo.rows/2 + dy</td>\n</tr>\n<tr>\n<td>SouthWestGravity</td>\n<td style=\"text-align:center\">dx</td>\n<td style=\"text-align:right\">image.rows - logo.rows - dy</td>\n</tr>\n<tr>\n<td>SouthGravity</td>\n<td style=\"text-align:center\">image.cols/2 - logo.cols/2 + dx</td>\n<td style=\"text-align:right\">image.rows - logo.rows - dy</td>\n</tr>\n<tr>\n<td>SouthEastGravity</td>\n<td style=\"text-align:center\">image.cols - dx - logo.cols</td>\n<td style=\"text-align:right\">image.rows - logo.rows - dy</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *Composite Image </span><br><span class=\"line\"> *@param image:source image </span><br><span class=\"line\"> *@param logo:logo image </span><br><span class=\"line\"> *@param gravity,</span><br><span class=\"line\"> *|NorthWestGravity |NorthGravity   |NorthEastGravity   |</span><br><span class=\"line\"> *|WestGravity      |CenterGravity  |EastGravity        |</span><br><span class=\"line\"> *|SouthEastGravity |SouthGravity   |SouthEastGravity   |</span><br><span class=\"line\"> *@param dx:offset on x</span><br><span class=\"line\"> *@param dy:offset on y</span><br><span class=\"line\"> * return true on success,false on failed </span><br><span class=\"line\"> */</span><br><span class=\"line\">bool compositeImage(Image *image,Image *logo,GravityType gravity,long dx,long dy) &#123;</span><br><span class=\"line\">   int x_offset,y_offset;</span><br><span class=\"line\"></span><br><span class=\"line\">   switch(gravity)&#123;</span><br><span class=\"line\">       case NorthWestGravity:&#123;</span><br><span class=\"line\">           x_offset = dx;</span><br><span class=\"line\">           y_offset = dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       case NorthGravity:&#123;</span><br><span class=\"line\">           x_offset = image-&gt;columns/2 - logo-&gt;columns/2 + dx;</span><br><span class=\"line\">           y_offset = dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case NorthEastGravity: &#123;</span><br><span class=\"line\">           x_offset = image-&gt;columns-dx-logo-&gt;columns;</span><br><span class=\"line\">           y_offset = dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case WestGravity:&#123;</span><br><span class=\"line\">           x_offset = dx;</span><br><span class=\"line\">           y_offset = image-&gt;rows/2 - logo-&gt;rows/2 + dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case CenterGravity: &#123;</span><br><span class=\"line\">          x_offset = image-&gt;columns/2 - logo-&gt;columns/2 + dx;</span><br><span class=\"line\">          y_offset = image-&gt;rows/2 - logo-&gt;rows/2 + dy;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       case EastGravity:&#123;</span><br><span class=\"line\">          x_offset = image-&gt;columns - dx - logo-&gt;columns;       </span><br><span class=\"line\">          y_offset = image-&gt;rows/2 - logo-&gt;rows/2 + dy;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     case SouthWestGravity:&#123;</span><br><span class=\"line\">          x_offset = dx;</span><br><span class=\"line\">          y_offset = image-&gt;rows - logo-&gt;rows - dy;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       case SouthGravity:</span><br><span class=\"line\">           x_offset = image-&gt;columns/2 - logo-&gt;columns/2 + dx;</span><br><span class=\"line\">           y_offset = image-&gt;rows - logo-&gt;rows - dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       </span><br><span class=\"line\">       case SouthEastGravity:&#123;</span><br><span class=\"line\">           x_offset = image-&gt;columns - dx - logo-&gt;columns;</span><br><span class=\"line\">           y_offset = image-&gt;rows - logo-&gt;rows - dy;</span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       default:&#123;</span><br><span class=\"line\">           cout &lt;&lt; &quot;Illegal GravityType:&quot; &lt;&lt; gravity;      </span><br><span class=\"line\">           break;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(CompositeImage(image, AtopCompositeOp,logo, x_offset, y_offset) != 1) &#123;</span><br><span class=\"line\">          return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><a href=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/water_mark_txt.cpp\">water_mark_txt</a></p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://github.com/AndreMouche/GraphicsStudy/blob/master/GraphicsMagicUsage/data/water_mark_txt.jpg?raw=true\" alt=\"water_mark_txt.jpg\" title=\"water_mark_txt.jpg\" width=\"400\" /></p>\n"},{"layout":"post","title":"leetcode-gas-station","keywords":["greedy","leetcode"],"description":"leetcode-candy","comments":1,"_content":"\n# [Gas Station](https://oj.leetcode.com/problems/gas-station/)\n\n## 大意\n\nThere are N gas stations along a circular route, where the amount of gas at station i is gas[i].\n\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.\n\nReturn the starting gas station's index if you can travel around the circuit once, otherwise return -1.\n\nNote:\nThe solution is guaranteed to be unique.\n\n## 简要思路\n从起点开始挨个枚举各个节点作为起点，如果遇到油量不足，下一次枚举点从该点的下一节点开始。\n\n## 证明\n设以下变量\n\n* left[i]为从i点出发到下一节点、且未加终点油前的剩余油量。\n* sum[i][j] 为从点i出发到j点，且未加j点油之前的剩余油量。\n\n那么问题演化为:\n\n```\n求最小的i值，使得对于i+1...n..0..i-1\n\t所有的sum[i][k] >= 0\n```\n\t\n\n基于以上变量有以下等式成立：\n\n1. left[i]  = gas[i]-cost[i]\n2. sum[i][j] = sum[i][j-1]+left[j]\n3. sum[i][j] = sum[i][k] + sum[k][j];\n\n\n\n\n从0开始枚举各起点\n对于某点i作为起始点，假设到第j点以前的剩余油量均大于等于0，即：\n\n* sum[i][k]>=0 {i<=k<j}\n\n而到第j点时sum[i][j] < 0, 即：\n\n* sum[i][j] = sum[i][j-1] + left[j] < 0\n\n那么对于k>=i&&k<j：\n\n* sum[k][j] = sum[i][j] - sum[i][k] <= sum[i][j] < 0 \n\n即对于所有i到j之间的点k,sum[k][j] < 0,故下一满足条件的起点至少为j+1.\r \n\n## Code\n[gas_station.cpp](https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/gas_station.cpp)\n","source":"_posts/2015-01-03-algorithm-leetcode-candy.md","raw":"---\nlayout: post\ntitle: \"leetcode-gas-station\"\nkeywords: [\"greedy\", \"leetcode\"]\ndescription: \"leetcode-candy\"\ncategory: \"algorithm\"\ntags: [\"algorithm\",\"gas-station\"]\ncomments: true\n---\n\n# [Gas Station](https://oj.leetcode.com/problems/gas-station/)\n\n## 大意\n\nThere are N gas stations along a circular route, where the amount of gas at station i is gas[i].\n\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.\n\nReturn the starting gas station's index if you can travel around the circuit once, otherwise return -1.\n\nNote:\nThe solution is guaranteed to be unique.\n\n## 简要思路\n从起点开始挨个枚举各个节点作为起点，如果遇到油量不足，下一次枚举点从该点的下一节点开始。\n\n## 证明\n设以下变量\n\n* left[i]为从i点出发到下一节点、且未加终点油前的剩余油量。\n* sum[i][j] 为从点i出发到j点，且未加j点油之前的剩余油量。\n\n那么问题演化为:\n\n```\n求最小的i值，使得对于i+1...n..0..i-1\n\t所有的sum[i][k] >= 0\n```\n\t\n\n基于以上变量有以下等式成立：\n\n1. left[i]  = gas[i]-cost[i]\n2. sum[i][j] = sum[i][j-1]+left[j]\n3. sum[i][j] = sum[i][k] + sum[k][j];\n\n\n\n\n从0开始枚举各起点\n对于某点i作为起始点，假设到第j点以前的剩余油量均大于等于0，即：\n\n* sum[i][k]>=0 {i<=k<j}\n\n而到第j点时sum[i][j] < 0, 即：\n\n* sum[i][j] = sum[i][j-1] + left[j] < 0\n\n那么对于k>=i&&k<j：\n\n* sum[k][j] = sum[i][j] - sum[i][k] <= sum[i][j] < 0 \n\n即对于所有i到j之间的点k,sum[k][j] < 0,故下一满足条件的起点至少为j+1.\r \n\n## Code\n[gas_station.cpp](https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/gas_station.cpp)\n","slug":"2015-01-03-algorithm-leetcode-candy","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhg002rqj7lyovkmncs","content":"<h1 id=\"Gas-Station\"><a href=\"#Gas-Station\" class=\"headerlink\" title=\"Gas Station\"></a><a href=\"https://oj.leetcode.com/problems/gas-station/\" target=\"_blank\" rel=\"external\">Gas Station</a></h1><h2 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h2><p>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].</p>\n<p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.</p>\n<p>Return the starting gas station’s index if you can travel around the circuit once, otherwise return -1.</p>\n<p>Note:<br>The solution is guaranteed to be unique.</p>\n<h2 id=\"简要思路\"><a href=\"#简要思路\" class=\"headerlink\" title=\"简要思路\"></a>简要思路</h2><p>从起点开始挨个枚举各个节点作为起点，如果遇到油量不足，下一次枚举点从该点的下一节点开始。</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>设以下变量</p>\n<ul>\n<li>left[i]为从i点出发到下一节点、且未加终点油前的剩余油量。</li>\n<li>sum[i][j] 为从点i出发到j点，且未加j点油之前的剩余油量。</li>\n</ul>\n<p>那么问题演化为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求最小的i值，使得对于i+1...n..0..i-1</span><br><span class=\"line\">\t所有的sum[i][k] &gt;= 0</span><br></pre></td></tr></table></figure>\n<p>基于以上变量有以下等式成立：</p>\n<ol>\n<li>left[i]  = gas[i]-cost[i]</li>\n<li>sum[i][j] = sum[i][j-1]+left[j]</li>\n<li>sum[i][j] = sum[i][k] + sum[k][j];</li>\n</ol>\n<p>从0开始枚举各起点<br>对于某点i作为起始点，假设到第j点以前的剩余油量均大于等于0，即：</p>\n<ul>\n<li>sum[i][k]&gt;=0 {i&lt;=k&lt;j}</li>\n</ul>\n<p>而到第j点时sum[i][j] &lt; 0, 即：</p>\n<ul>\n<li>sum[i][j] = sum[i][j-1] + left[j] &lt; 0</li>\n</ul>\n<p>那么对于k&gt;=i&amp;&amp;k&lt;j：</p>\n<ul>\n<li>sum[k][j] = sum[i][j] - sum[i][k] &lt;= sum[i][j] &lt; 0 </li>\n</ul>\n<p>即对于所有i到j之间的点k,sum[k][j] &lt; 0,故下一满足条件的起点至少为j+1.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><a href=\"https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/gas_station.cpp\" target=\"_blank\" rel=\"external\">gas_station.cpp</a></p>\n","excerpt":"","more":"<h1 id=\"Gas-Station\"><a href=\"#Gas-Station\" class=\"headerlink\" title=\"Gas Station\"></a><a href=\"https://oj.leetcode.com/problems/gas-station/\">Gas Station</a></h1><h2 id=\"大意\"><a href=\"#大意\" class=\"headerlink\" title=\"大意\"></a>大意</h2><p>There are N gas stations along a circular route, where the amount of gas at station i is gas[i].</p>\n<p>You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.</p>\n<p>Return the starting gas station’s index if you can travel around the circuit once, otherwise return -1.</p>\n<p>Note:<br>The solution is guaranteed to be unique.</p>\n<h2 id=\"简要思路\"><a href=\"#简要思路\" class=\"headerlink\" title=\"简要思路\"></a>简要思路</h2><p>从起点开始挨个枚举各个节点作为起点，如果遇到油量不足，下一次枚举点从该点的下一节点开始。</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>设以下变量</p>\n<ul>\n<li>left[i]为从i点出发到下一节点、且未加终点油前的剩余油量。</li>\n<li>sum[i][j] 为从点i出发到j点，且未加j点油之前的剩余油量。</li>\n</ul>\n<p>那么问题演化为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求最小的i值，使得对于i+1...n..0..i-1</span><br><span class=\"line\">\t所有的sum[i][k] &gt;= 0</span><br></pre></td></tr></table></figure>\n<p>基于以上变量有以下等式成立：</p>\n<ol>\n<li>left[i]  = gas[i]-cost[i]</li>\n<li>sum[i][j] = sum[i][j-1]+left[j]</li>\n<li>sum[i][j] = sum[i][k] + sum[k][j];</li>\n</ol>\n<p>从0开始枚举各起点<br>对于某点i作为起始点，假设到第j点以前的剩余油量均大于等于0，即：</p>\n<ul>\n<li>sum[i][k]&gt;=0 {i&lt;=k&lt;j}</li>\n</ul>\n<p>而到第j点时sum[i][j] &lt; 0, 即：</p>\n<ul>\n<li>sum[i][j] = sum[i][j-1] + left[j] &lt; 0</li>\n</ul>\n<p>那么对于k&gt;=i&amp;&amp;k&lt;j：</p>\n<ul>\n<li>sum[k][j] = sum[i][j] - sum[i][k] &lt;= sum[i][j] &lt; 0 </li>\n</ul>\n<p>即对于所有i到j之间的点k,sum[k][j] &lt; 0,故下一满足条件的起点至少为j+1.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p><a href=\"https://github.com/AndreMouche/algorithms_study/blob/master/leetcode/gas_station.cpp\">gas_station.cpp</a></p>\n"},{"layout":"post","title":"[译]weed-fs api(Master Server)","keywords":["weed-fs","storage"],"description":"api of weed-fs","comments":1,"_content":"\n## API OF WEED-FS(Master Server)\n原文链接[master-server](http://weed-fs.readthedocs.org/en/latest/api.html#master-server)\n\n所有接口均可通过使用*&pretty=y*查看格式化的json串结果\n\n### Assign a file key(分配文件key)\n\n* 基本用法\n\n```\n# Basic Usage:\ncurl http://localhost:9333/dir/assign\n{\"count\":1,\"fid\":\"3,01637037d6\",\"url\":\"127.0.0.1:8080\",\n \"publicUrl\":\"localhost:8080\"}\n```\n\n* 指定复制类型\n\n```\n# To assign with a specific replication type:\ncurl \"http://localhost:9333/dir/assign?replication=001\"\n```\n\n* 指定申请的文件个数\n\n```\n# To specify how many file ids to reserve\ncurl \"http://localhost:9333/dir/assign?count=5\"\n```\n\n* 指定数据中心\n \n```\n# To assign a specific data center\ncurl \"http://localhost:9333/dir/assign?dataCenter=dc1\"\n```\n\n###Lookup volume(查找volumne信息)\n\n该接口用于确定指定volume是否已被移除\n\n```\ncurl \"http://localhost:9333/dir/lookup?volumeId=3&pretty=y\"\n{\n  \"locations\": [\n    {\n      \"publicUrl\": \"localhost:8080\",\n      \"url\": \"localhost:8080\"\n    }\n  ]\n}\n```\n\n其它用法\n\n* 根据文件id查找\n\n```\n# You can actually use the file id to lookup\ncurl \"http://localhost:9333/dir/lookup?volumeId=3,01637037d6\"\n```\n\n* 根据collection查找会快些\n\n```\n# If you know the collection, specify it since it will be a little faster\ncurl \"http://localhost:9333/dir/lookup?volumeId=3&collection=turbo\"\n```\n### Force garbage collection(强制垃圾收集)\n当系统中存在大量删除操作时，已删除文件所在的空间不会同步被回收。\n系统使用一个后台作业去检测volume空间的使用情况，若可用空间大于系统阀值threshold(默认为0.3),那么：\n\n1. vacuum作业将当前volume设为只读状态\n2. vacuum创建一个新的volume,将当前volume中可用文件拷贝入其中\n3. 切换到新volume.\n\n在没有足够耐心等待这个过程、或者想做一些测试时，可通过以下方式改变这个动作(TODO：第一个案例不太理解，是强制执行垃圾收集的意思吗？)\n\n```\ncurl \"http://localhost:9333/vol/vacuum\"\ncurl \"http://localhost:9333/vol/vacuum?garbageThreshold=0.4\"\n```\n\n上面这个garbageThreshold是可选参数，该参数不会改变默认的threshold.用户依旧可以指定一个不同的garbageThreshold启动一个新的volume master\n\n###Pre-Allocate Volumes(预分配Volume)\n一个Volume一次只能处理一个写操作。如果需要提升并发，用户可以批量预分配volume\n\n生成4个空volume\n\n```\ncurl \"http://localhost:9333/vol/grow?replication=000&count=4\"\n{\"count\":4}\n```\n\n* 指定collection\n\n```\n# specify a collection\ncurl \"http://localhost:9333/vol/grow?collection=turbo&count=4\"\n```\n\n* 指定数据中心\n\n```\n# specify data center\ncurl \"http://localhost:9333/vol/grow?dataCenter=dc1&count=4\"\n```\n\n###Check System Status(检测系统状态)\n\n```\ncurl \"http://10.0.2.15:9333/cluster/status?pretty=y\"\n{\n  \"IsLeader\": true,\n  \"Leader\": \"10.0.2.15:9333\",\n  \"Peers\": [\n    \"10.0.2.15:9334\",\n    \"10.0.2.15:9335\"\n  ]\n}\ncurl \"http://localhost:9333/dir/status?pretty=y\"\n{\n  \"Topology\": {\n    \"DataCenters\": [\n      {\n        \"Free\": 3,\n        \"Id\": \"dc1\",\n        \"Max\": 7,\n        \"Racks\": [\n          {\n            \"DataNodes\": [\n              {\n                \"Free\": 3,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8080\",\n                \"Url\": \"localhost:8080\",\n                \"Volumes\": 4\n              }\n            ],\n            \"Free\": 3,\n            \"Id\": \"DefaultRack\",\n            \"Max\": 7\n          }\n        ]\n      },\n      {\n        \"Free\": 21,\n        \"Id\": \"dc3\",\n        \"Max\": 21,\n        \"Racks\": [\n          {\n            \"DataNodes\": [\n              {\n                \"Free\": 7,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8081\",\n                \"Url\": \"localhost:8081\",\n                \"Volumes\": 0\n              }\n            ],\n            \"Free\": 7,\n            \"Id\": \"rack1\",\n            \"Max\": 7\n          },\n          {\n            \"DataNodes\": [\n              {\n                \"Free\": 7,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8082\",\n                \"Url\": \"localhost:8082\",\n                \"Volumes\": 0\n              },\n              {\n                \"Free\": 7,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8083\",\n                \"Url\": \"localhost:8083\",\n                \"Volumes\": 0\n              }\n            ],\n            \"Free\": 14,\n            \"Id\": \"DefaultRack\",\n            \"Max\": 14\n          }\n        ]\n      }\n    ],\n    \"Free\": 24,\n    \"Max\": 28,\n    \"layouts\": [\n      {\n        \"collection\": \"\",\n        \"replication\": \"000\",\n        \"writables\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      }\n    ]\n  },\n  \"Version\": \"0.47\"\n}\n```\n\n\n\n","source":"_posts/2015-02-03-weed-fs-api-master-server.md","raw":"---\nlayout: post\ntitle: \"[译]weed-fs api(Master Server)\"\nkeywords: [\"weed-fs\", \"storage\"]\ndescription: \"api of weed-fs\"\ncategory: \"weed-fs\"\ntags: [\"weed-fs\",\"storage\"]\ncomments: true\n---\n\n## API OF WEED-FS(Master Server)\n原文链接[master-server](http://weed-fs.readthedocs.org/en/latest/api.html#master-server)\n\n所有接口均可通过使用*&pretty=y*查看格式化的json串结果\n\n### Assign a file key(分配文件key)\n\n* 基本用法\n\n```\n# Basic Usage:\ncurl http://localhost:9333/dir/assign\n{\"count\":1,\"fid\":\"3,01637037d6\",\"url\":\"127.0.0.1:8080\",\n \"publicUrl\":\"localhost:8080\"}\n```\n\n* 指定复制类型\n\n```\n# To assign with a specific replication type:\ncurl \"http://localhost:9333/dir/assign?replication=001\"\n```\n\n* 指定申请的文件个数\n\n```\n# To specify how many file ids to reserve\ncurl \"http://localhost:9333/dir/assign?count=5\"\n```\n\n* 指定数据中心\n \n```\n# To assign a specific data center\ncurl \"http://localhost:9333/dir/assign?dataCenter=dc1\"\n```\n\n###Lookup volume(查找volumne信息)\n\n该接口用于确定指定volume是否已被移除\n\n```\ncurl \"http://localhost:9333/dir/lookup?volumeId=3&pretty=y\"\n{\n  \"locations\": [\n    {\n      \"publicUrl\": \"localhost:8080\",\n      \"url\": \"localhost:8080\"\n    }\n  ]\n}\n```\n\n其它用法\n\n* 根据文件id查找\n\n```\n# You can actually use the file id to lookup\ncurl \"http://localhost:9333/dir/lookup?volumeId=3,01637037d6\"\n```\n\n* 根据collection查找会快些\n\n```\n# If you know the collection, specify it since it will be a little faster\ncurl \"http://localhost:9333/dir/lookup?volumeId=3&collection=turbo\"\n```\n### Force garbage collection(强制垃圾收集)\n当系统中存在大量删除操作时，已删除文件所在的空间不会同步被回收。\n系统使用一个后台作业去检测volume空间的使用情况，若可用空间大于系统阀值threshold(默认为0.3),那么：\n\n1. vacuum作业将当前volume设为只读状态\n2. vacuum创建一个新的volume,将当前volume中可用文件拷贝入其中\n3. 切换到新volume.\n\n在没有足够耐心等待这个过程、或者想做一些测试时，可通过以下方式改变这个动作(TODO：第一个案例不太理解，是强制执行垃圾收集的意思吗？)\n\n```\ncurl \"http://localhost:9333/vol/vacuum\"\ncurl \"http://localhost:9333/vol/vacuum?garbageThreshold=0.4\"\n```\n\n上面这个garbageThreshold是可选参数，该参数不会改变默认的threshold.用户依旧可以指定一个不同的garbageThreshold启动一个新的volume master\n\n###Pre-Allocate Volumes(预分配Volume)\n一个Volume一次只能处理一个写操作。如果需要提升并发，用户可以批量预分配volume\n\n生成4个空volume\n\n```\ncurl \"http://localhost:9333/vol/grow?replication=000&count=4\"\n{\"count\":4}\n```\n\n* 指定collection\n\n```\n# specify a collection\ncurl \"http://localhost:9333/vol/grow?collection=turbo&count=4\"\n```\n\n* 指定数据中心\n\n```\n# specify data center\ncurl \"http://localhost:9333/vol/grow?dataCenter=dc1&count=4\"\n```\n\n###Check System Status(检测系统状态)\n\n```\ncurl \"http://10.0.2.15:9333/cluster/status?pretty=y\"\n{\n  \"IsLeader\": true,\n  \"Leader\": \"10.0.2.15:9333\",\n  \"Peers\": [\n    \"10.0.2.15:9334\",\n    \"10.0.2.15:9335\"\n  ]\n}\ncurl \"http://localhost:9333/dir/status?pretty=y\"\n{\n  \"Topology\": {\n    \"DataCenters\": [\n      {\n        \"Free\": 3,\n        \"Id\": \"dc1\",\n        \"Max\": 7,\n        \"Racks\": [\n          {\n            \"DataNodes\": [\n              {\n                \"Free\": 3,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8080\",\n                \"Url\": \"localhost:8080\",\n                \"Volumes\": 4\n              }\n            ],\n            \"Free\": 3,\n            \"Id\": \"DefaultRack\",\n            \"Max\": 7\n          }\n        ]\n      },\n      {\n        \"Free\": 21,\n        \"Id\": \"dc3\",\n        \"Max\": 21,\n        \"Racks\": [\n          {\n            \"DataNodes\": [\n              {\n                \"Free\": 7,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8081\",\n                \"Url\": \"localhost:8081\",\n                \"Volumes\": 0\n              }\n            ],\n            \"Free\": 7,\n            \"Id\": \"rack1\",\n            \"Max\": 7\n          },\n          {\n            \"DataNodes\": [\n              {\n                \"Free\": 7,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8082\",\n                \"Url\": \"localhost:8082\",\n                \"Volumes\": 0\n              },\n              {\n                \"Free\": 7,\n                \"Max\": 7,\n                \"PublicUrl\": \"localhost:8083\",\n                \"Url\": \"localhost:8083\",\n                \"Volumes\": 0\n              }\n            ],\n            \"Free\": 14,\n            \"Id\": \"DefaultRack\",\n            \"Max\": 14\n          }\n        ]\n      }\n    ],\n    \"Free\": 24,\n    \"Max\": 28,\n    \"layouts\": [\n      {\n        \"collection\": \"\",\n        \"replication\": \"000\",\n        \"writables\": [\n          1,\n          2,\n          3,\n          4\n        ]\n      }\n    ]\n  },\n  \"Version\": \"0.47\"\n}\n```\n\n\n\n","slug":"2015-02-03-weed-fs-api-master-server","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhh002vqj7lctdc1fjy","content":"<h2 id=\"API-OF-WEED-FS-Master-Server\"><a href=\"#API-OF-WEED-FS-Master-Server\" class=\"headerlink\" title=\"API OF WEED-FS(Master Server)\"></a>API OF WEED-FS(Master Server)</h2><p>原文链接<a href=\"http://weed-fs.readthedocs.org/en/latest/api.html#master-server\" target=\"_blank\" rel=\"external\">master-server</a></p>\n<p>所有接口均可通过使用<em>&amp;pretty=y</em>查看格式化的json串结果</p>\n<h3 id=\"Assign-a-file-key-分配文件key\"><a href=\"#Assign-a-file-key-分配文件key\" class=\"headerlink\" title=\"Assign a file key(分配文件key)\"></a>Assign a file key(分配文件key)</h3><ul>\n<li>基本用法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Basic Usage:</span><br><span class=\"line\">curl http://localhost:9333/dir/assign</span><br><span class=\"line\">&#123;&quot;count&quot;:1,&quot;fid&quot;:&quot;3,01637037d6&quot;,&quot;url&quot;:&quot;127.0.0.1:8080&quot;,</span><br><span class=\"line\"> &quot;publicUrl&quot;:&quot;localhost:8080&quot;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定复制类型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To assign with a specific replication type:</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/assign?replication=001&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定申请的文件个数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To specify how many file ids to reserve</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/assign?count=5&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定数据中心</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To assign a specific data center</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/assign?dataCenter=dc1&quot;</span><br></pre></td></tr></table></figure>\n<p>###Lookup volume(查找volumne信息)</p>\n<p>该接口用于确定指定volume是否已被移除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:9333/dir/lookup?volumeId=3&amp;pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;locations&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;publicUrl&quot;: &quot;localhost:8080&quot;,</span><br><span class=\"line\">      &quot;url&quot;: &quot;localhost:8080&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其它用法</p>\n<ul>\n<li>根据文件id查找</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># You can actually use the file id to lookup</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/lookup?volumeId=3,01637037d6&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据collection查找会快些</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># If you know the collection, specify it since it will be a little faster</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/lookup?volumeId=3&amp;collection=turbo&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Force-garbage-collection-强制垃圾收集\"><a href=\"#Force-garbage-collection-强制垃圾收集\" class=\"headerlink\" title=\"Force garbage collection(强制垃圾收集)\"></a>Force garbage collection(强制垃圾收集)</h3><p>当系统中存在大量删除操作时，已删除文件所在的空间不会同步被回收。<br>系统使用一个后台作业去检测volume空间的使用情况，若可用空间大于系统阀值threshold(默认为0.3),那么：</p>\n<ol>\n<li>vacuum作业将当前volume设为只读状态</li>\n<li>vacuum创建一个新的volume,将当前volume中可用文件拷贝入其中</li>\n<li>切换到新volume.</li>\n</ol>\n<p>在没有足够耐心等待这个过程、或者想做一些测试时，可通过以下方式改变这个动作(TODO：第一个案例不太理解，是强制执行垃圾收集的意思吗？)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:9333/vol/vacuum&quot;</span><br><span class=\"line\">curl &quot;http://localhost:9333/vol/vacuum?garbageThreshold=0.4&quot;</span><br></pre></td></tr></table></figure>\n<p>上面这个garbageThreshold是可选参数，该参数不会改变默认的threshold.用户依旧可以指定一个不同的garbageThreshold启动一个新的volume master</p>\n<p>###Pre-Allocate Volumes(预分配Volume)<br>一个Volume一次只能处理一个写操作。如果需要提升并发，用户可以批量预分配volume</p>\n<p>生成4个空volume</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:9333/vol/grow?replication=000&amp;count=4&quot;</span><br><span class=\"line\">&#123;&quot;count&quot;:4&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定collection</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># specify a collection</span><br><span class=\"line\">curl &quot;http://localhost:9333/vol/grow?collection=turbo&amp;count=4&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定数据中心</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># specify data center</span><br><span class=\"line\">curl &quot;http://localhost:9333/vol/grow?dataCenter=dc1&amp;count=4&quot;</span><br></pre></td></tr></table></figure>\n<p>###Check System Status(检测系统状态)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://10.0.2.15:9333/cluster/status?pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;IsLeader&quot;: true,</span><br><span class=\"line\">  &quot;Leader&quot;: &quot;10.0.2.15:9333&quot;,</span><br><span class=\"line\">  &quot;Peers&quot;: [</span><br><span class=\"line\">    &quot;10.0.2.15:9334&quot;,</span><br><span class=\"line\">    &quot;10.0.2.15:9335&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/status?pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;Topology&quot;: &#123;</span><br><span class=\"line\">    &quot;DataCenters&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;Free&quot;: 3,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;dc1&quot;,</span><br><span class=\"line\">        &quot;Max&quot;: 7,</span><br><span class=\"line\">        &quot;Racks&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;DataNodes&quot;: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 3,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8080&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8080&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 4</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Free&quot;: 3,</span><br><span class=\"line\">            &quot;Id&quot;: &quot;DefaultRack&quot;,</span><br><span class=\"line\">            &quot;Max&quot;: 7</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;Free&quot;: 21,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;dc3&quot;,</span><br><span class=\"line\">        &quot;Max&quot;: 21,</span><br><span class=\"line\">        &quot;Racks&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;DataNodes&quot;: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 7,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8081&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8081&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 0</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Free&quot;: 7,</span><br><span class=\"line\">            &quot;Id&quot;: &quot;rack1&quot;,</span><br><span class=\"line\">            &quot;Max&quot;: 7</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;DataNodes&quot;: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 7,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8082&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8082&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 0</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 7,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8083&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8083&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 0</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Free&quot;: 14,</span><br><span class=\"line\">            &quot;Id&quot;: &quot;DefaultRack&quot;,</span><br><span class=\"line\">            &quot;Max&quot;: 14</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;Free&quot;: 24,</span><br><span class=\"line\">    &quot;Max&quot;: 28,</span><br><span class=\"line\">    &quot;layouts&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;collection&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;replication&quot;: &quot;000&quot;,</span><br><span class=\"line\">        &quot;writables&quot;: [</span><br><span class=\"line\">          1,</span><br><span class=\"line\">          2,</span><br><span class=\"line\">          3,</span><br><span class=\"line\">          4</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;Version&quot;: &quot;0.47&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"API-OF-WEED-FS-Master-Server\"><a href=\"#API-OF-WEED-FS-Master-Server\" class=\"headerlink\" title=\"API OF WEED-FS(Master Server)\"></a>API OF WEED-FS(Master Server)</h2><p>原文链接<a href=\"http://weed-fs.readthedocs.org/en/latest/api.html#master-server\">master-server</a></p>\n<p>所有接口均可通过使用<em>&amp;pretty=y</em>查看格式化的json串结果</p>\n<h3 id=\"Assign-a-file-key-分配文件key\"><a href=\"#Assign-a-file-key-分配文件key\" class=\"headerlink\" title=\"Assign a file key(分配文件key)\"></a>Assign a file key(分配文件key)</h3><ul>\n<li>基本用法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Basic Usage:</span><br><span class=\"line\">curl http://localhost:9333/dir/assign</span><br><span class=\"line\">&#123;&quot;count&quot;:1,&quot;fid&quot;:&quot;3,01637037d6&quot;,&quot;url&quot;:&quot;127.0.0.1:8080&quot;,</span><br><span class=\"line\"> &quot;publicUrl&quot;:&quot;localhost:8080&quot;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定复制类型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To assign with a specific replication type:</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/assign?replication=001&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定申请的文件个数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To specify how many file ids to reserve</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/assign?count=5&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定数据中心</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To assign a specific data center</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/assign?dataCenter=dc1&quot;</span><br></pre></td></tr></table></figure>\n<p>###Lookup volume(查找volumne信息)</p>\n<p>该接口用于确定指定volume是否已被移除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:9333/dir/lookup?volumeId=3&amp;pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;locations&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;publicUrl&quot;: &quot;localhost:8080&quot;,</span><br><span class=\"line\">      &quot;url&quot;: &quot;localhost:8080&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其它用法</p>\n<ul>\n<li>根据文件id查找</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># You can actually use the file id to lookup</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/lookup?volumeId=3,01637037d6&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据collection查找会快些</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># If you know the collection, specify it since it will be a little faster</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/lookup?volumeId=3&amp;collection=turbo&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Force-garbage-collection-强制垃圾收集\"><a href=\"#Force-garbage-collection-强制垃圾收集\" class=\"headerlink\" title=\"Force garbage collection(强制垃圾收集)\"></a>Force garbage collection(强制垃圾收集)</h3><p>当系统中存在大量删除操作时，已删除文件所在的空间不会同步被回收。<br>系统使用一个后台作业去检测volume空间的使用情况，若可用空间大于系统阀值threshold(默认为0.3),那么：</p>\n<ol>\n<li>vacuum作业将当前volume设为只读状态</li>\n<li>vacuum创建一个新的volume,将当前volume中可用文件拷贝入其中</li>\n<li>切换到新volume.</li>\n</ol>\n<p>在没有足够耐心等待这个过程、或者想做一些测试时，可通过以下方式改变这个动作(TODO：第一个案例不太理解，是强制执行垃圾收集的意思吗？)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:9333/vol/vacuum&quot;</span><br><span class=\"line\">curl &quot;http://localhost:9333/vol/vacuum?garbageThreshold=0.4&quot;</span><br></pre></td></tr></table></figure>\n<p>上面这个garbageThreshold是可选参数，该参数不会改变默认的threshold.用户依旧可以指定一个不同的garbageThreshold启动一个新的volume master</p>\n<p>###Pre-Allocate Volumes(预分配Volume)<br>一个Volume一次只能处理一个写操作。如果需要提升并发，用户可以批量预分配volume</p>\n<p>生成4个空volume</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:9333/vol/grow?replication=000&amp;count=4&quot;</span><br><span class=\"line\">&#123;&quot;count&quot;:4&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定collection</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># specify a collection</span><br><span class=\"line\">curl &quot;http://localhost:9333/vol/grow?collection=turbo&amp;count=4&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>指定数据中心</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># specify data center</span><br><span class=\"line\">curl &quot;http://localhost:9333/vol/grow?dataCenter=dc1&amp;count=4&quot;</span><br></pre></td></tr></table></figure>\n<p>###Check System Status(检测系统状态)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://10.0.2.15:9333/cluster/status?pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;IsLeader&quot;: true,</span><br><span class=\"line\">  &quot;Leader&quot;: &quot;10.0.2.15:9333&quot;,</span><br><span class=\"line\">  &quot;Peers&quot;: [</span><br><span class=\"line\">    &quot;10.0.2.15:9334&quot;,</span><br><span class=\"line\">    &quot;10.0.2.15:9335&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">curl &quot;http://localhost:9333/dir/status?pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;Topology&quot;: &#123;</span><br><span class=\"line\">    &quot;DataCenters&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;Free&quot;: 3,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;dc1&quot;,</span><br><span class=\"line\">        &quot;Max&quot;: 7,</span><br><span class=\"line\">        &quot;Racks&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;DataNodes&quot;: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 3,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8080&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8080&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 4</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Free&quot;: 3,</span><br><span class=\"line\">            &quot;Id&quot;: &quot;DefaultRack&quot;,</span><br><span class=\"line\">            &quot;Max&quot;: 7</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;Free&quot;: 21,</span><br><span class=\"line\">        &quot;Id&quot;: &quot;dc3&quot;,</span><br><span class=\"line\">        &quot;Max&quot;: 21,</span><br><span class=\"line\">        &quot;Racks&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;DataNodes&quot;: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 7,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8081&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8081&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 0</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Free&quot;: 7,</span><br><span class=\"line\">            &quot;Id&quot;: &quot;rack1&quot;,</span><br><span class=\"line\">            &quot;Max&quot;: 7</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;DataNodes&quot;: [</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 7,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8082&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8082&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 0</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                &quot;Free&quot;: 7,</span><br><span class=\"line\">                &quot;Max&quot;: 7,</span><br><span class=\"line\">                &quot;PublicUrl&quot;: &quot;localhost:8083&quot;,</span><br><span class=\"line\">                &quot;Url&quot;: &quot;localhost:8083&quot;,</span><br><span class=\"line\">                &quot;Volumes&quot;: 0</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Free&quot;: 14,</span><br><span class=\"line\">            &quot;Id&quot;: &quot;DefaultRack&quot;,</span><br><span class=\"line\">            &quot;Max&quot;: 14</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;Free&quot;: 24,</span><br><span class=\"line\">    &quot;Max&quot;: 28,</span><br><span class=\"line\">    &quot;layouts&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;collection&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;replication&quot;: &quot;000&quot;,</span><br><span class=\"line\">        &quot;writables&quot;: [</span><br><span class=\"line\">          1,</span><br><span class=\"line\">          2,</span><br><span class=\"line\">          3,</span><br><span class=\"line\">          4</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;Version&quot;: &quot;0.47&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"[译]weed-fs api(Volume Server)","keywords":["weed-fs","storage"],"description":"api of weed-fs","comments":1,"_content":"\n## API OF WEED-FS(Volume Server)\n原文链接[volume-server](http://weed-fs.readthedocs.org/en/latest/api.html#volume-server)\n\n所有接口均可通过使用*&pretty=y*查看格式化的json串结果\n\n###Upload File(上传文件)\n\n```\ncurl -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6\n{\"size\": 43234}\n```\n返回的size是上传到Seaweed-FS上的实际文件存储空间大小，有时候文件会根据mime type 被自动压缩。\n\n### Upload File Directly(直接上传文件)\n\n```\ncurl -F file=@/home/chris/myphoto.jpg http://localhost:9333/submit\n{\"fid\":\"3,01fbe0dc6f1f38\",\"fileName\":\"myphoto.jpg\",\"fileUrl\":\"localhost:8080/3,01fbe0dc6f1f38\",\"size\":68231}\n```\n该接口是为了方便用户上传。Master Server会得到一个file id,并将该文件存于正确的volume Server。\n因该接口是为了简化上传，故当分配file id时并不支持各个参数（或者你可以加上并提交给我们代码）\n\n### Delete File\n\n```\ncurl -X DELETE http://127.0.0.1:8080/3,01637037d6\n```\n\n###Create а specific volume on a specific volume server(在制定volume Server上创建指定volume)\n\n 创建3个volume在制定volume server上\n \n```\ncurl \"http://localhost:8080/admin/assign_volume?replication=000&volume=3\"\n```\n\n若使用其它复制类型，如001，那么需要在其它volume server上执行相同创建请求，以创建镜像volume\n\n###Check Volume Server Status\n\n```\ncurl \"http://localhost:8080/status?pretty=y\"\n{\n  \"Version\": \"0.34\",\n  \"Volumes\": [\n    {\n      \"Id\": 1,\n      \"Size\": 1319688,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 276,\n      \"DeleteCount\": 0,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 2,\n      \"Size\": 1040962,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 291,\n      \"DeleteCount\": 0,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 3,\n      \"Size\": 1486334,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 301,\n      \"DeleteCount\": 2,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 4,\n      \"Size\": 8953592,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 320,\n      \"DeleteCount\": 2,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 5,\n      \"Size\": 70815851,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 309,\n      \"DeleteCount\": 1,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 6,\n      \"Size\": 1483131,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 301,\n      \"DeleteCount\": 1,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 7,\n      \"Size\": 46797832,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 292,\n      \"DeleteCount\": 0,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    }\n  ]\n}\n```\n\n\n\n\n","source":"_posts/2015-02-04-weed-fs-api-volume-server.md","raw":"---\nlayout: post\ntitle: \"[译]weed-fs api(Volume Server)\"\nkeywords: [\"weed-fs\", \"storage\"]\ndescription: \"api of weed-fs\"\ncategory: \"weed-fs\"\ntags: [\"weed-fs\",\"storage\"]\ncomments: true\n---\n\n## API OF WEED-FS(Volume Server)\n原文链接[volume-server](http://weed-fs.readthedocs.org/en/latest/api.html#volume-server)\n\n所有接口均可通过使用*&pretty=y*查看格式化的json串结果\n\n###Upload File(上传文件)\n\n```\ncurl -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6\n{\"size\": 43234}\n```\n返回的size是上传到Seaweed-FS上的实际文件存储空间大小，有时候文件会根据mime type 被自动压缩。\n\n### Upload File Directly(直接上传文件)\n\n```\ncurl -F file=@/home/chris/myphoto.jpg http://localhost:9333/submit\n{\"fid\":\"3,01fbe0dc6f1f38\",\"fileName\":\"myphoto.jpg\",\"fileUrl\":\"localhost:8080/3,01fbe0dc6f1f38\",\"size\":68231}\n```\n该接口是为了方便用户上传。Master Server会得到一个file id,并将该文件存于正确的volume Server。\n因该接口是为了简化上传，故当分配file id时并不支持各个参数（或者你可以加上并提交给我们代码）\n\n### Delete File\n\n```\ncurl -X DELETE http://127.0.0.1:8080/3,01637037d6\n```\n\n###Create а specific volume on a specific volume server(在制定volume Server上创建指定volume)\n\n 创建3个volume在制定volume server上\n \n```\ncurl \"http://localhost:8080/admin/assign_volume?replication=000&volume=3\"\n```\n\n若使用其它复制类型，如001，那么需要在其它volume server上执行相同创建请求，以创建镜像volume\n\n###Check Volume Server Status\n\n```\ncurl \"http://localhost:8080/status?pretty=y\"\n{\n  \"Version\": \"0.34\",\n  \"Volumes\": [\n    {\n      \"Id\": 1,\n      \"Size\": 1319688,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 276,\n      \"DeleteCount\": 0,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 2,\n      \"Size\": 1040962,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 291,\n      \"DeleteCount\": 0,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 3,\n      \"Size\": 1486334,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 301,\n      \"DeleteCount\": 2,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 4,\n      \"Size\": 8953592,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 320,\n      \"DeleteCount\": 2,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 5,\n      \"Size\": 70815851,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 309,\n      \"DeleteCount\": 1,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 6,\n      \"Size\": 1483131,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 301,\n      \"DeleteCount\": 1,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    },\n    {\n      \"Id\": 7,\n      \"Size\": 46797832,\n      \"RepType\": \"000\",\n      \"Version\": 2,\n      \"FileCount\": 292,\n      \"DeleteCount\": 0,\n      \"DeletedByteCount\": 0,\n      \"ReadOnly\": false\n    }\n  ]\n}\n```\n\n\n\n\n","slug":"2015-02-04-weed-fs-api-volume-server","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhm002zqj7lg2nntkoz","content":"<h2 id=\"API-OF-WEED-FS-Volume-Server\"><a href=\"#API-OF-WEED-FS-Volume-Server\" class=\"headerlink\" title=\"API OF WEED-FS(Volume Server)\"></a>API OF WEED-FS(Volume Server)</h2><p>原文链接<a href=\"http://weed-fs.readthedocs.org/en/latest/api.html#volume-server\" target=\"_blank\" rel=\"external\">volume-server</a></p>\n<p>所有接口均可通过使用<em>&amp;pretty=y</em>查看格式化的json串结果</p>\n<p>###Upload File(上传文件)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6</span><br><span class=\"line\">&#123;&quot;size&quot;: 43234&#125;</span><br></pre></td></tr></table></figure>\n<p>返回的size是上传到Seaweed-FS上的实际文件存储空间大小，有时候文件会根据mime type 被自动压缩。</p>\n<h3 id=\"Upload-File-Directly-直接上传文件\"><a href=\"#Upload-File-Directly-直接上传文件\" class=\"headerlink\" title=\"Upload File Directly(直接上传文件)\"></a>Upload File Directly(直接上传文件)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F file=@/home/chris/myphoto.jpg http://localhost:9333/submit</span><br><span class=\"line\">&#123;&quot;fid&quot;:&quot;3,01fbe0dc6f1f38&quot;,&quot;fileName&quot;:&quot;myphoto.jpg&quot;,&quot;fileUrl&quot;:&quot;localhost:8080/3,01fbe0dc6f1f38&quot;,&quot;size&quot;:68231&#125;</span><br></pre></td></tr></table></figure>\n<p>该接口是为了方便用户上传。Master Server会得到一个file id,并将该文件存于正确的volume Server。<br>因该接口是为了简化上传，故当分配file id时并不支持各个参数（或者你可以加上并提交给我们代码）</p>\n<h3 id=\"Delete-File\"><a href=\"#Delete-File\" class=\"headerlink\" title=\"Delete File\"></a>Delete File</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE http://127.0.0.1:8080/3,01637037d6</span><br></pre></td></tr></table></figure>\n<p>###Create а specific volume on a specific volume server(在制定volume Server上创建指定volume)</p>\n<p> 创建3个volume在制定volume server上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:8080/admin/assign_volume?replication=000&amp;volume=3&quot;</span><br></pre></td></tr></table></figure>\n<p>若使用其它复制类型，如001，那么需要在其它volume server上执行相同创建请求，以创建镜像volume</p>\n<p>###Check Volume Server Status</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:8080/status?pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;Version&quot;: &quot;0.34&quot;,</span><br><span class=\"line\">  &quot;Volumes&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 1,</span><br><span class=\"line\">      &quot;Size&quot;: 1319688,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 276,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 0,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 2,</span><br><span class=\"line\">      &quot;Size&quot;: 1040962,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 291,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 0,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 3,</span><br><span class=\"line\">      &quot;Size&quot;: 1486334,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 301,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 2,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 4,</span><br><span class=\"line\">      &quot;Size&quot;: 8953592,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 320,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 2,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 5,</span><br><span class=\"line\">      &quot;Size&quot;: 70815851,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 309,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 1,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 6,</span><br><span class=\"line\">      &quot;Size&quot;: 1483131,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 301,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 1,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 7,</span><br><span class=\"line\">      &quot;Size&quot;: 46797832,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 292,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 0,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"API-OF-WEED-FS-Volume-Server\"><a href=\"#API-OF-WEED-FS-Volume-Server\" class=\"headerlink\" title=\"API OF WEED-FS(Volume Server)\"></a>API OF WEED-FS(Volume Server)</h2><p>原文链接<a href=\"http://weed-fs.readthedocs.org/en/latest/api.html#volume-server\">volume-server</a></p>\n<p>所有接口均可通过使用<em>&amp;pretty=y</em>查看格式化的json串结果</p>\n<p>###Upload File(上传文件)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F file=@/home/chris/myphoto.jpg http://127.0.0.1:8080/3,01637037d6</span><br><span class=\"line\">&#123;&quot;size&quot;: 43234&#125;</span><br></pre></td></tr></table></figure>\n<p>返回的size是上传到Seaweed-FS上的实际文件存储空间大小，有时候文件会根据mime type 被自动压缩。</p>\n<h3 id=\"Upload-File-Directly-直接上传文件\"><a href=\"#Upload-File-Directly-直接上传文件\" class=\"headerlink\" title=\"Upload File Directly(直接上传文件)\"></a>Upload File Directly(直接上传文件)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F file=@/home/chris/myphoto.jpg http://localhost:9333/submit</span><br><span class=\"line\">&#123;&quot;fid&quot;:&quot;3,01fbe0dc6f1f38&quot;,&quot;fileName&quot;:&quot;myphoto.jpg&quot;,&quot;fileUrl&quot;:&quot;localhost:8080/3,01fbe0dc6f1f38&quot;,&quot;size&quot;:68231&#125;</span><br></pre></td></tr></table></figure>\n<p>该接口是为了方便用户上传。Master Server会得到一个file id,并将该文件存于正确的volume Server。<br>因该接口是为了简化上传，故当分配file id时并不支持各个参数（或者你可以加上并提交给我们代码）</p>\n<h3 id=\"Delete-File\"><a href=\"#Delete-File\" class=\"headerlink\" title=\"Delete File\"></a>Delete File</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE http://127.0.0.1:8080/3,01637037d6</span><br></pre></td></tr></table></figure>\n<p>###Create а specific volume on a specific volume server(在制定volume Server上创建指定volume)</p>\n<p> 创建3个volume在制定volume server上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:8080/admin/assign_volume?replication=000&amp;volume=3&quot;</span><br></pre></td></tr></table></figure>\n<p>若使用其它复制类型，如001，那么需要在其它volume server上执行相同创建请求，以创建镜像volume</p>\n<p>###Check Volume Server Status</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:8080/status?pretty=y&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;Version&quot;: &quot;0.34&quot;,</span><br><span class=\"line\">  &quot;Volumes&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 1,</span><br><span class=\"line\">      &quot;Size&quot;: 1319688,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 276,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 0,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 2,</span><br><span class=\"line\">      &quot;Size&quot;: 1040962,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 291,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 0,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 3,</span><br><span class=\"line\">      &quot;Size&quot;: 1486334,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 301,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 2,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 4,</span><br><span class=\"line\">      &quot;Size&quot;: 8953592,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 320,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 2,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 5,</span><br><span class=\"line\">      &quot;Size&quot;: 70815851,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 309,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 1,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 6,</span><br><span class=\"line\">      &quot;Size&quot;: 1483131,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 301,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 1,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;Id&quot;: 7,</span><br><span class=\"line\">      &quot;Size&quot;: 46797832,</span><br><span class=\"line\">      &quot;RepType&quot;: &quot;000&quot;,</span><br><span class=\"line\">      &quot;Version&quot;: 2,</span><br><span class=\"line\">      &quot;FileCount&quot;: 292,</span><br><span class=\"line\">      &quot;DeleteCount&quot;: 0,</span><br><span class=\"line\">      &quot;DeletedByteCount&quot;: 0,</span><br><span class=\"line\">      &quot;ReadOnly&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"FAQ for golang net packcage usage","keywords":["golang","net"],"description":"little tips for golang net package ","comments":1,"_content":"\n## “use of closed network connection”\n\nhttp.Client执行do出现“use of closed network connection”,是因为传入的req对象的body已被关闭，\n\n具体为在创建req时，使用了如下方式:\n\n```\nhttp.NewRequest(\"POST\", postUrl, bytes.NewReader([]byte(testData)))\n```\n即request body以io.Reader的形式传入，该方式创建的req在执行过http.Client的Do方法后，request body会被关闭。\n出现该标题错误的一般场景是，在执行Do失败时，直接复用req进行重试。\nhttp.NewRequest函数说明：\n\n```\n// NewRequest returns a new Request given a method, URL, and optional body.\n//\n// If the provided body is also an io.Closer, the returned\n// Request.Body is set to body and will be closed by the Client\n// methods Do, Post, and PostForm, and Transport.RoundTrip.\nfunc NewRequest(method, urlStr string, body io.Reader) (*Request, error) \n```\n\n解决方法是，在每次执行http.Client的Do方法前，确保req的body是未关闭的reader\n\n## “EOF” vs \"connection reset by peer\"\n\n高并发下会触发以上两类问题。\n### \"EOF\"\n\n出现EOF归根到底是因为服务端主动关闭了连接。\n\n问题追踪过程：\ngolang在调用http.Client.Do函数时，会按以下步骤执行：\n\n1. 跟服务端建立TCP连接\n2. 向服务端发送请求数据\n3. 接收来自服务端的请求头\n\n本次出现EOF是在第二步完成之后，golang底层调用Read fd读数据时返回的数据长度为0且无错误，golang把这种行为判为EOF返回。\n这是因为服务端主动关闭了连接后，客户端将读取不到任何数据，从而造成以上错误。\n\n### VS \"connection reset by peer\"\n该错误与另一种错误\"connection reset by peer\"的区别\n1.\"connection reset by peer\"是因为请求量过多，服务端直接拒绝了该请求，客户端会收到一个“RST”的包:\n\n<img src=\"../images/2015-02-06-golang-http-tips/reset.jpg\" width=500/>\n\n2.“EOF” 是服务端接收了连接，并主动关闭连接，抓包过程中可以看到完整的四次握手，断开连接过程\n<img src=\"../images/2015-02-06-golang-http-tips/eof.jpg\" width=500/>\n\n#### 测试代码：\n* [server](https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/server.go)\n* [client](https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/client.go)\n\n#### 错误重现：\n1. EOF:将client连接数设为1，server的sleep时间加长，请求未完成时，关闭server进程\n2. \"connection reset by peer\"：将server所在机器的并发量设小：\n    * ulimit -n 64\n    * ulimit -u 64\n    \n     加大client的并发，稍后便出现该错误\n\n\n\n","source":"_posts/2015-02-06-golang-http-tips.md","raw":"---\nlayout: post\ntitle: \"FAQ for golang net packcage usage\"\nkeywords: [\"golang\", \"net\"]\ndescription: \"little tips for golang net package \"\ncategory: \"golang\"\ntags: [\"golang\",\"net\"]\ncomments: true \n---\n\n## “use of closed network connection”\n\nhttp.Client执行do出现“use of closed network connection”,是因为传入的req对象的body已被关闭，\n\n具体为在创建req时，使用了如下方式:\n\n```\nhttp.NewRequest(\"POST\", postUrl, bytes.NewReader([]byte(testData)))\n```\n即request body以io.Reader的形式传入，该方式创建的req在执行过http.Client的Do方法后，request body会被关闭。\n出现该标题错误的一般场景是，在执行Do失败时，直接复用req进行重试。\nhttp.NewRequest函数说明：\n\n```\n// NewRequest returns a new Request given a method, URL, and optional body.\n//\n// If the provided body is also an io.Closer, the returned\n// Request.Body is set to body and will be closed by the Client\n// methods Do, Post, and PostForm, and Transport.RoundTrip.\nfunc NewRequest(method, urlStr string, body io.Reader) (*Request, error) \n```\n\n解决方法是，在每次执行http.Client的Do方法前，确保req的body是未关闭的reader\n\n## “EOF” vs \"connection reset by peer\"\n\n高并发下会触发以上两类问题。\n### \"EOF\"\n\n出现EOF归根到底是因为服务端主动关闭了连接。\n\n问题追踪过程：\ngolang在调用http.Client.Do函数时，会按以下步骤执行：\n\n1. 跟服务端建立TCP连接\n2. 向服务端发送请求数据\n3. 接收来自服务端的请求头\n\n本次出现EOF是在第二步完成之后，golang底层调用Read fd读数据时返回的数据长度为0且无错误，golang把这种行为判为EOF返回。\n这是因为服务端主动关闭了连接后，客户端将读取不到任何数据，从而造成以上错误。\n\n### VS \"connection reset by peer\"\n该错误与另一种错误\"connection reset by peer\"的区别\n1.\"connection reset by peer\"是因为请求量过多，服务端直接拒绝了该请求，客户端会收到一个“RST”的包:\n\n<img src=\"../images/2015-02-06-golang-http-tips/reset.jpg\" width=500/>\n\n2.“EOF” 是服务端接收了连接，并主动关闭连接，抓包过程中可以看到完整的四次握手，断开连接过程\n<img src=\"../images/2015-02-06-golang-http-tips/eof.jpg\" width=500/>\n\n#### 测试代码：\n* [server](https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/server.go)\n* [client](https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/client.go)\n\n#### 错误重现：\n1. EOF:将client连接数设为1，server的sleep时间加长，请求未完成时，关闭server进程\n2. \"connection reset by peer\"：将server所在机器的并发量设小：\n    * ulimit -n 64\n    * ulimit -u 64\n    \n     加大client的并发，稍后便出现该错误\n\n\n\n","slug":"2015-02-06-golang-http-tips","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhn0033qj7l0mc9sj89","content":"<h2 id=\"“use-of-closed-network-connection”\"><a href=\"#“use-of-closed-network-connection”\" class=\"headerlink\" title=\"“use of closed network connection”\"></a>“use of closed network connection”</h2><p>http.Client执行do出现“use of closed network connection”,是因为传入的req对象的body已被关闭，</p>\n<p>具体为在创建req时，使用了如下方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.NewRequest(&quot;POST&quot;, postUrl, bytes.NewReader([]byte(testData)))</span><br></pre></td></tr></table></figure>\n<p>即request body以io.Reader的形式传入，该方式创建的req在执行过http.Client的Do方法后，request body会被关闭。<br>出现该标题错误的一般场景是，在执行Do失败时，直接复用req进行重试。<br>http.NewRequest函数说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// NewRequest returns a new Request given a method, URL, and optional body.</span><br><span class=\"line\">//</span><br><span class=\"line\">// If the provided body is also an io.Closer, the returned</span><br><span class=\"line\">// Request.Body is set to body and will be closed by the Client</span><br><span class=\"line\">// methods Do, Post, and PostForm, and Transport.RoundTrip.</span><br><span class=\"line\">func NewRequest(method, urlStr string, body io.Reader) (*Request, error)</span><br></pre></td></tr></table></figure>\n<p>解决方法是，在每次执行http.Client的Do方法前，确保req的body是未关闭的reader</p>\n<h2 id=\"“EOF”-vs-“connection-reset-by-peer”\"><a href=\"#“EOF”-vs-“connection-reset-by-peer”\" class=\"headerlink\" title=\"“EOF” vs “connection reset by peer”\"></a>“EOF” vs “connection reset by peer”</h2><p>高并发下会触发以上两类问题。</p>\n<h3 id=\"“EOF”\"><a href=\"#“EOF”\" class=\"headerlink\" title=\"“EOF”\"></a>“EOF”</h3><p>出现EOF归根到底是因为服务端主动关闭了连接。</p>\n<p>问题追踪过程：<br>golang在调用http.Client.Do函数时，会按以下步骤执行：</p>\n<ol>\n<li>跟服务端建立TCP连接</li>\n<li>向服务端发送请求数据</li>\n<li>接收来自服务端的请求头</li>\n</ol>\n<p>本次出现EOF是在第二步完成之后，golang底层调用Read fd读数据时返回的数据长度为0且无错误，golang把这种行为判为EOF返回。<br>这是因为服务端主动关闭了连接后，客户端将读取不到任何数据，从而造成以上错误。</p>\n<h3 id=\"VS-“connection-reset-by-peer”\"><a href=\"#VS-“connection-reset-by-peer”\" class=\"headerlink\" title=\"VS “connection reset by peer”\"></a>VS “connection reset by peer”</h3><p>该错误与另一种错误”connection reset by peer”的区别<br>1.”connection reset by peer”是因为请求量过多，服务端直接拒绝了该请求，客户端会收到一个“RST”的包:</p>\n<p><img src=\"../images/2015-02-06-golang-http-tips/reset.jpg\" width=\"500/\"></p>\n<p>2.“EOF” 是服务端接收了连接，并主动关闭连接，抓包过程中可以看到完整的四次握手，断开连接过程<br><img src=\"../images/2015-02-06-golang-http-tips/eof.jpg\" width=\"500/\"></p>\n<h4 id=\"测试代码：\"><a href=\"#测试代码：\" class=\"headerlink\" title=\"测试代码：\"></a>测试代码：</h4><ul>\n<li><a href=\"https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/server.go\" target=\"_blank\" rel=\"external\">server</a></li>\n<li><a href=\"https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/client.go\" target=\"_blank\" rel=\"external\">client</a></li>\n</ul>\n<h4 id=\"错误重现：\"><a href=\"#错误重现：\" class=\"headerlink\" title=\"错误重现：\"></a>错误重现：</h4><ol>\n<li>EOF:将client连接数设为1，server的sleep时间加长，请求未完成时，关闭server进程</li>\n<li><p>“connection reset by peer”：将server所在机器的并发量设小：</p>\n<ul>\n<li>ulimit -n 64</li>\n<li><p>ulimit -u 64</p>\n<p>加大client的并发，稍后便出现该错误</p>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"“use-of-closed-network-connection”\"><a href=\"#“use-of-closed-network-connection”\" class=\"headerlink\" title=\"“use of closed network connection”\"></a>“use of closed network connection”</h2><p>http.Client执行do出现“use of closed network connection”,是因为传入的req对象的body已被关闭，</p>\n<p>具体为在创建req时，使用了如下方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.NewRequest(&quot;POST&quot;, postUrl, bytes.NewReader([]byte(testData)))</span><br></pre></td></tr></table></figure>\n<p>即request body以io.Reader的形式传入，该方式创建的req在执行过http.Client的Do方法后，request body会被关闭。<br>出现该标题错误的一般场景是，在执行Do失败时，直接复用req进行重试。<br>http.NewRequest函数说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// NewRequest returns a new Request given a method, URL, and optional body.</span><br><span class=\"line\">//</span><br><span class=\"line\">// If the provided body is also an io.Closer, the returned</span><br><span class=\"line\">// Request.Body is set to body and will be closed by the Client</span><br><span class=\"line\">// methods Do, Post, and PostForm, and Transport.RoundTrip.</span><br><span class=\"line\">func NewRequest(method, urlStr string, body io.Reader) (*Request, error)</span><br></pre></td></tr></table></figure>\n<p>解决方法是，在每次执行http.Client的Do方法前，确保req的body是未关闭的reader</p>\n<h2 id=\"“EOF”-vs-“connection-reset-by-peer”\"><a href=\"#“EOF”-vs-“connection-reset-by-peer”\" class=\"headerlink\" title=\"“EOF” vs “connection reset by peer”\"></a>“EOF” vs “connection reset by peer”</h2><p>高并发下会触发以上两类问题。</p>\n<h3 id=\"“EOF”\"><a href=\"#“EOF”\" class=\"headerlink\" title=\"“EOF”\"></a>“EOF”</h3><p>出现EOF归根到底是因为服务端主动关闭了连接。</p>\n<p>问题追踪过程：<br>golang在调用http.Client.Do函数时，会按以下步骤执行：</p>\n<ol>\n<li>跟服务端建立TCP连接</li>\n<li>向服务端发送请求数据</li>\n<li>接收来自服务端的请求头</li>\n</ol>\n<p>本次出现EOF是在第二步完成之后，golang底层调用Read fd读数据时返回的数据长度为0且无错误，golang把这种行为判为EOF返回。<br>这是因为服务端主动关闭了连接后，客户端将读取不到任何数据，从而造成以上错误。</p>\n<h3 id=\"VS-“connection-reset-by-peer”\"><a href=\"#VS-“connection-reset-by-peer”\" class=\"headerlink\" title=\"VS “connection reset by peer”\"></a>VS “connection reset by peer”</h3><p>该错误与另一种错误”connection reset by peer”的区别<br>1.”connection reset by peer”是因为请求量过多，服务端直接拒绝了该请求，客户端会收到一个“RST”的包:</p>\n<p><img src=\"../images/2015-02-06-golang-http-tips/reset.jpg\" width=500/></p>\n<p>2.“EOF” 是服务端接收了连接，并主动关闭连接，抓包过程中可以看到完整的四次握手，断开连接过程<br><img src=\"../images/2015-02-06-golang-http-tips/eof.jpg\" width=500/></p>\n<h4 id=\"测试代码：\"><a href=\"#测试代码：\" class=\"headerlink\" title=\"测试代码：\"></a>测试代码：</h4><ul>\n<li><a href=\"https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/server.go\">server</a></li>\n<li><a href=\"https://github.com/AndreMouche/LittleTools/blob/master/golang/httpDemo/client.go\">client</a></li>\n</ul>\n<h4 id=\"错误重现：\"><a href=\"#错误重现：\" class=\"headerlink\" title=\"错误重现：\"></a>错误重现：</h4><ol>\n<li>EOF:将client连接数设为1，server的sleep时间加长，请求未完成时，关闭server进程</li>\n<li><p>“connection reset by peer”：将server所在机器的并发量设小：</p>\n<ul>\n<li>ulimit -n 64</li>\n<li><p>ulimit -u 64</p>\n<p>加大client的并发，稍后便出现该错误</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"post","title":"BPG调研","keywords":["BPG","Graphics"],"description":"information of bpg","comments":1,"_content":"\n# BPG调研\n\n## 目录 \n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#简介\">简介</a></li>\n<li><a href=\"#工具\">工具</a><ul>\n<li><a href=\"#兼容性\">兼容性</a></li>\n<li><a href=\"#安装\">安装</a></li>\n<li><a href=\"#效果示例\">效果示例</a></li>\n</ul>\n</li>\n<li><a href=\"#性能\">性能</a><ul>\n<li><a href=\"#bpg编解码性能\">BPG编解码性能</a></li>\n<li><a href=\"#与webp对比\">与WEBP对比</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n\n本文基于libbpg-0.9.5展开调研\n\n## 简介 \n\nBPG是一种新型的图片格式。其设计初衷在于当图片质量或文件size成为瓶颈时，取代JPEG。其主要特点如下：\n\n1. 高压缩比。BPG在quality类似的情形下，比JPEG要小得多。相同大小的图片，使用BMP存储质量远高于JPEG\n2. 浏览器支持：使用一个很小js解码库（54KB）后，便可被大部分的浏览器所支持。\n3. 算法：基于HEVC开源的标准视频压缩算法的一个子集实现\n4. 支持与jpeg相同的chroma格式用于减少压缩过程中的数据丢失。支持alpha通道。支持 RGB, YCgCo和CMYK色彩空间。\n5. 更大的通道范围支持：原生支持8位和16位通道。\n6. 支持无损压缩\n7. 支持多种元数据（如EXIF，ICC profile,XMP）\n8. 支持动画\n\n\n## 工具\n\n### 兼容性\n\nbpg作为一种新型图片格式，对其支持的工具尚不健全。除了[官方](http://bellard.org/bpg/)[推荐工具](http://bellard.org/bpg/libbpg-0.9.5.tar.gz)可用外，像GraphicsMagick、ffmpeg,exiftool等主流多媒体处理软件尚未对其支持。\n\n**系统支持**\n\nbpg官方发布的工具支持三种系统，具体情况如下：\n\n| 系统 | 编码 |解码 |查看|备注|\n|:----:|-----:|:---:|:-------:|:---:|\n|Winows  |bpgenc支持jpg/png=>bpg|bpgdec支持bpg=>png,<br/>但不支持自定义输出文件|bpgview支持查看|~|\n|Mac OS |bpgenc支持png=>bpg|bpgdec支持bpg=>png,<br/>但不支持自定义输出文件|没有查看工具|~|\n|Linux  |bpgenc支持png/jpg=>bpg|bpgdec支持bpg=>png|没有查看工具|~|\n\n**浏览器支持**\n\nWEBP浏览器：需带上js解码库。\n\n### 安装\n\n**windows**\n\n直接下载[bpg-0.9.5-win32.zip](http://bellard.org/bpg/bpg-0.9.5-win32.zip)即可使用\n\n**MacOS**\n\n[brew install](http://brew.sh/)\n\n**Ubuntu**\n\n1. 安装libpng16以上版本(编译安装)\n2. 安装libjpeg62*(apt-get install) \n3. 安装libsdl-image*(apt-get install)\n4. 编译安装[libbpg-0.9.5.tar.gz](http://bellard.org/bpg/libbpg-0.9.5.tar.gz)\n\n\n### 效果示例 \n\n左边是BPG 效果而右边是JPG\n![](http://cdn.unwire.hk/wp-content/uploads/2014/12/comparison.jpg)\n\n示例地址:[http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&jpg=s&bpg=s](http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&jpg=s&bpg=s)\n\n**web端显示示例**\n\n需要引用对应javascript库：\n[http://bellard.org/bpg/bpgdec8a.js](http://bellard.org/bpg/bpgdec8a.js)\n\n完整的html示例\n\n\n## 性能\n\n### BPG编解码性能\n\n测试场景：\n\n1.  数据：线上1000张图片转换而得的各类格式\n2.  环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)\n3.  工具：[libbpg-0.9.5.tar.gz](http://bellard.org/bpg/libbpg-0.9.5.tar.gz)\n\n| 源图 | 目标图 |数量 |失败次数|源大小|结果大小|空间变化(dest-src)/src| 耗时(s)|\n|----:|-----:|---:|-------:|------:|-------:|-------------:|-------:|\n|JPG  |BPG   |1000|0\t   |15M\t   |8.1M    |-46%\t\t   |1762    |\n|PNG  |BPG   |1000|0       |103M   |8.1M\t|-92.1%\t       |1765    |\n|BPG  |PNG   |1000|0       |8.1M   |96M\t\t|+1085%\t\t   |92      |\n\n结论：\n1. 同一张图片内容，JPG,PNG转为BPG后空间显著变小。\n2.  PNG可与BPG自由转换，任意JPG可成功转为BPG。\n3.  PNG/JPG转换为BPG耗时较长，BPG转回PNG相对较快。\n\n### 与WEBP对比\n\nwebp测试场景\n1.  数据：线上1000张图片转换而得的各类格式\n2.  环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)\n3.  工具：[libwebp 0.4.1 ](http://downloads.webmproject.org/releases/webp/libwebp-0.4.1-linux-x86-32.tar.gz)\n\n| 源图 |目标图 |数量 |失败次数|源大小|结果大小|空间变化(dest-src)/src| 耗时(s)|\n|----:|-----:|---:|-------:|------:|-------:|-------------:|-------:|\n|JPG  |WEBP  |1000|0\t   |15M    |9.6M\t|-36%\t\t   |58\t\t|\n|JPG  |BPG   |1000|0\t   |15M\t   |8.1M    |-46%\t\t   |1762    |\n|PNG  |WEBP  |1000|0       |103M   |9.8M    |-91%          |66\t\t|\n|PNG  |BPG   |1000|0       |103M   |8.1M\t|-92.1%\t       |1765    |\n|WEBP |PNG   |1000|0\t   |9.7M    |103M\t|+962%\t\t   |80\t\t|\n|BPG  |PNG   |1000|0       |8.1M   |96M\t\t|+1085%\t\t   |92      |\n\n结论：\n1.相比BPG，WEBP的压缩效果相对差一些，但转换速度快得多。\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015-03-04-graphics-BPG.md","raw":"---\nlayout: post\ntitle: \"BPG调研\"\nkeywords: [\"BPG\", \"Graphics\"]\ndescription: \"information of bpg\"\ncategory: \"Graphics\"\ntags: [\"BPG\"]\ncomments: true\n---\n\n# BPG调研\n\n## 目录 \n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#简介\">简介</a></li>\n<li><a href=\"#工具\">工具</a><ul>\n<li><a href=\"#兼容性\">兼容性</a></li>\n<li><a href=\"#安装\">安装</a></li>\n<li><a href=\"#效果示例\">效果示例</a></li>\n</ul>\n</li>\n<li><a href=\"#性能\">性能</a><ul>\n<li><a href=\"#bpg编解码性能\">BPG编解码性能</a></li>\n<li><a href=\"#与webp对比\">与WEBP对比</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n\n本文基于libbpg-0.9.5展开调研\n\n## 简介 \n\nBPG是一种新型的图片格式。其设计初衷在于当图片质量或文件size成为瓶颈时，取代JPEG。其主要特点如下：\n\n1. 高压缩比。BPG在quality类似的情形下，比JPEG要小得多。相同大小的图片，使用BMP存储质量远高于JPEG\n2. 浏览器支持：使用一个很小js解码库（54KB）后，便可被大部分的浏览器所支持。\n3. 算法：基于HEVC开源的标准视频压缩算法的一个子集实现\n4. 支持与jpeg相同的chroma格式用于减少压缩过程中的数据丢失。支持alpha通道。支持 RGB, YCgCo和CMYK色彩空间。\n5. 更大的通道范围支持：原生支持8位和16位通道。\n6. 支持无损压缩\n7. 支持多种元数据（如EXIF，ICC profile,XMP）\n8. 支持动画\n\n\n## 工具\n\n### 兼容性\n\nbpg作为一种新型图片格式，对其支持的工具尚不健全。除了[官方](http://bellard.org/bpg/)[推荐工具](http://bellard.org/bpg/libbpg-0.9.5.tar.gz)可用外，像GraphicsMagick、ffmpeg,exiftool等主流多媒体处理软件尚未对其支持。\n\n**系统支持**\n\nbpg官方发布的工具支持三种系统，具体情况如下：\n\n| 系统 | 编码 |解码 |查看|备注|\n|:----:|-----:|:---:|:-------:|:---:|\n|Winows  |bpgenc支持jpg/png=>bpg|bpgdec支持bpg=>png,<br/>但不支持自定义输出文件|bpgview支持查看|~|\n|Mac OS |bpgenc支持png=>bpg|bpgdec支持bpg=>png,<br/>但不支持自定义输出文件|没有查看工具|~|\n|Linux  |bpgenc支持png/jpg=>bpg|bpgdec支持bpg=>png|没有查看工具|~|\n\n**浏览器支持**\n\nWEBP浏览器：需带上js解码库。\n\n### 安装\n\n**windows**\n\n直接下载[bpg-0.9.5-win32.zip](http://bellard.org/bpg/bpg-0.9.5-win32.zip)即可使用\n\n**MacOS**\n\n[brew install](http://brew.sh/)\n\n**Ubuntu**\n\n1. 安装libpng16以上版本(编译安装)\n2. 安装libjpeg62*(apt-get install) \n3. 安装libsdl-image*(apt-get install)\n4. 编译安装[libbpg-0.9.5.tar.gz](http://bellard.org/bpg/libbpg-0.9.5.tar.gz)\n\n\n### 效果示例 \n\n左边是BPG 效果而右边是JPG\n![](http://cdn.unwire.hk/wp-content/uploads/2014/12/comparison.jpg)\n\n示例地址:[http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&jpg=s&bpg=s](http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&jpg=s&bpg=s)\n\n**web端显示示例**\n\n需要引用对应javascript库：\n[http://bellard.org/bpg/bpgdec8a.js](http://bellard.org/bpg/bpgdec8a.js)\n\n完整的html示例\n\n\n## 性能\n\n### BPG编解码性能\n\n测试场景：\n\n1.  数据：线上1000张图片转换而得的各类格式\n2.  环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)\n3.  工具：[libbpg-0.9.5.tar.gz](http://bellard.org/bpg/libbpg-0.9.5.tar.gz)\n\n| 源图 | 目标图 |数量 |失败次数|源大小|结果大小|空间变化(dest-src)/src| 耗时(s)|\n|----:|-----:|---:|-------:|------:|-------:|-------------:|-------:|\n|JPG  |BPG   |1000|0\t   |15M\t   |8.1M    |-46%\t\t   |1762    |\n|PNG  |BPG   |1000|0       |103M   |8.1M\t|-92.1%\t       |1765    |\n|BPG  |PNG   |1000|0       |8.1M   |96M\t\t|+1085%\t\t   |92      |\n\n结论：\n1. 同一张图片内容，JPG,PNG转为BPG后空间显著变小。\n2.  PNG可与BPG自由转换，任意JPG可成功转为BPG。\n3.  PNG/JPG转换为BPG耗时较长，BPG转回PNG相对较快。\n\n### 与WEBP对比\n\nwebp测试场景\n1.  数据：线上1000张图片转换而得的各类格式\n2.  环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)\n3.  工具：[libwebp 0.4.1 ](http://downloads.webmproject.org/releases/webp/libwebp-0.4.1-linux-x86-32.tar.gz)\n\n| 源图 |目标图 |数量 |失败次数|源大小|结果大小|空间变化(dest-src)/src| 耗时(s)|\n|----:|-----:|---:|-------:|------:|-------:|-------------:|-------:|\n|JPG  |WEBP  |1000|0\t   |15M    |9.6M\t|-36%\t\t   |58\t\t|\n|JPG  |BPG   |1000|0\t   |15M\t   |8.1M    |-46%\t\t   |1762    |\n|PNG  |WEBP  |1000|0       |103M   |9.8M    |-91%          |66\t\t|\n|PNG  |BPG   |1000|0       |103M   |8.1M\t|-92.1%\t       |1765    |\n|WEBP |PNG   |1000|0\t   |9.7M    |103M\t|+962%\t\t   |80\t\t|\n|BPG  |PNG   |1000|0       |8.1M   |96M\t\t|+1085%\t\t   |92      |\n\n结论：\n1.相比BPG，WEBP的压缩效果相对差一些，但转换速度快得多。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2015-03-04-graphics-BPG","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhho0036qj7lm6l4l2iv","content":"<h1 id=\"BPG调研\"><a href=\"#BPG调研\" class=\"headerlink\" title=\"BPG调研\"></a>BPG调研</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#简介\">简介</a></li><br><li><a href=\"#工具\">工具</a><ul><br><li><a href=\"#兼容性\">兼容性</a></li><br><li><a href=\"#安装\">安装</a></li><br><li><a href=\"#效果示例\">效果示例</a></li><br></ul><br></li><br><li><a href=\"#性能\">性能</a><ul><br><li><a href=\"#bpg编解码性能\">BPG编解码性能</a></li><br><li><a href=\"#与webp对比\">与WEBP对比</a></li><br></ul><br></li><br></ul><br><br><br></div><br></div><br></div>\n\n<p>本文基于libbpg-0.9.5展开调研</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>BPG是一种新型的图片格式。其设计初衷在于当图片质量或文件size成为瓶颈时，取代JPEG。其主要特点如下：</p>\n<ol>\n<li>高压缩比。BPG在quality类似的情形下，比JPEG要小得多。相同大小的图片，使用BMP存储质量远高于JPEG</li>\n<li>浏览器支持：使用一个很小js解码库（54KB）后，便可被大部分的浏览器所支持。</li>\n<li>算法：基于HEVC开源的标准视频压缩算法的一个子集实现</li>\n<li>支持与jpeg相同的chroma格式用于减少压缩过程中的数据丢失。支持alpha通道。支持 RGB, YCgCo和CMYK色彩空间。</li>\n<li>更大的通道范围支持：原生支持8位和16位通道。</li>\n<li>支持无损压缩</li>\n<li>支持多种元数据（如EXIF，ICC profile,XMP）</li>\n<li>支持动画</li>\n</ol>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>bpg作为一种新型图片格式，对其支持的工具尚不健全。除了<a href=\"http://bellard.org/bpg/\" target=\"_blank\" rel=\"external\">官方</a><a href=\"http://bellard.org/bpg/libbpg-0.9.5.tar.gz\" target=\"_blank\" rel=\"external\">推荐工具</a>可用外，像GraphicsMagick、ffmpeg,exiftool等主流多媒体处理软件尚未对其支持。</p>\n<p><strong>系统支持</strong></p>\n<p>bpg官方发布的工具支持三种系统，具体情况如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统</th>\n<th style=\"text-align:right\">编码</th>\n<th style=\"text-align:center\">解码</th>\n<th style=\"text-align:center\">查看</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Winows</td>\n<td style=\"text-align:right\">bpgenc支持jpg/png=&gt;bpg</td>\n<td style=\"text-align:center\">bpgdec支持bpg=&gt;png,<br>但不支持自定义输出文件</td>\n<td style=\"text-align:center\">bpgview支持查看</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Mac OS</td>\n<td style=\"text-align:right\">bpgenc支持png=&gt;bpg</td>\n<td style=\"text-align:center\">bpgdec支持bpg=&gt;png,<br>但不支持自定义输出文件</td>\n<td style=\"text-align:center\">没有查看工具</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Linux</td>\n<td style=\"text-align:right\">bpgenc支持png/jpg=&gt;bpg</td>\n<td style=\"text-align:center\">bpgdec支持bpg=&gt;png</td>\n<td style=\"text-align:center\">没有查看工具</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n</tbody>\n</table>\n<p><strong>浏览器支持</strong></p>\n<p>WEBP浏览器：需带上js解码库。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><strong>windows</strong></p>\n<p>直接下载<a href=\"http://bellard.org/bpg/bpg-0.9.5-win32.zip\" target=\"_blank\" rel=\"external\">bpg-0.9.5-win32.zip</a>即可使用</p>\n<p><strong>MacOS</strong></p>\n<p><a href=\"http://brew.sh/\" target=\"_blank\" rel=\"external\">brew install</a></p>\n<p><strong>Ubuntu</strong></p>\n<ol>\n<li>安装libpng16以上版本(编译安装)</li>\n<li>安装libjpeg62*(apt-get install) </li>\n<li>安装libsdl-image*(apt-get install)</li>\n<li>编译安装<a href=\"http://bellard.org/bpg/libbpg-0.9.5.tar.gz\" target=\"_blank\" rel=\"external\">libbpg-0.9.5.tar.gz</a></li>\n</ol>\n<h3 id=\"效果示例\"><a href=\"#效果示例\" class=\"headerlink\" title=\"效果示例\"></a>效果示例</h3><p>左边是BPG 效果而右边是JPG<br><img src=\"http://cdn.unwire.hk/wp-content/uploads/2014/12/comparison.jpg\" alt=\"\"></p>\n<p>示例地址:<a href=\"http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&amp;jpg=s&amp;bpg=s\" target=\"_blank\" rel=\"external\">http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&amp;jpg=s&amp;bpg=s</a></p>\n<p><strong>web端显示示例</strong></p>\n<p>需要引用对应javascript库：<br><a href=\"http://bellard.org/bpg/bpgdec8a.js\" target=\"_blank\" rel=\"external\">http://bellard.org/bpg/bpgdec8a.js</a></p>\n<p>完整的html示例</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><h3 id=\"BPG编解码性能\"><a href=\"#BPG编解码性能\" class=\"headerlink\" title=\"BPG编解码性能\"></a>BPG编解码性能</h3><p>测试场景：</p>\n<ol>\n<li>数据：线上1000张图片转换而得的各类格式</li>\n<li>环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)</li>\n<li>工具：<a href=\"http://bellard.org/bpg/libbpg-0.9.5.tar.gz\" target=\"_blank\" rel=\"external\">libbpg-0.9.5.tar.gz</a></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">源图</th>\n<th style=\"text-align:right\">目标图</th>\n<th style=\"text-align:right\">数量</th>\n<th style=\"text-align:right\">失败次数</th>\n<th style=\"text-align:right\">源大小</th>\n<th style=\"text-align:right\">结果大小</th>\n<th style=\"text-align:right\">空间变化(dest-src)/src</th>\n<th style=\"text-align:right\">耗时(s)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">JPG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">15M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-46%</td>\n<td style=\"text-align:right\">1762</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-92.1%</td>\n<td style=\"text-align:right\">1765</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">96M</td>\n<td style=\"text-align:right\">+1085%</td>\n<td style=\"text-align:right\">92</td>\n</tr>\n</tbody>\n</table>\n<p>结论：</p>\n<ol>\n<li>同一张图片内容，JPG,PNG转为BPG后空间显著变小。</li>\n<li>PNG可与BPG自由转换，任意JPG可成功转为BPG。</li>\n<li>PNG/JPG转换为BPG耗时较长，BPG转回PNG相对较快。</li>\n</ol>\n<h3 id=\"与WEBP对比\"><a href=\"#与WEBP对比\" class=\"headerlink\" title=\"与WEBP对比\"></a>与WEBP对比</h3><p>webp测试场景</p>\n<ol>\n<li>数据：线上1000张图片转换而得的各类格式</li>\n<li>环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)</li>\n<li>工具：<a href=\"http://downloads.webmproject.org/releases/webp/libwebp-0.4.1-linux-x86-32.tar.gz\" target=\"_blank\" rel=\"external\">libwebp 0.4.1 </a></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">源图</th>\n<th style=\"text-align:right\">目标图</th>\n<th style=\"text-align:right\">数量</th>\n<th style=\"text-align:right\">失败次数</th>\n<th style=\"text-align:right\">源大小</th>\n<th style=\"text-align:right\">结果大小</th>\n<th style=\"text-align:right\">空间变化(dest-src)/src</th>\n<th style=\"text-align:right\">耗时(s)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">JPG</td>\n<td style=\"text-align:right\">WEBP</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">15M</td>\n<td style=\"text-align:right\">9.6M</td>\n<td style=\"text-align:right\">-36%</td>\n<td style=\"text-align:right\">58</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">JPG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">15M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-46%</td>\n<td style=\"text-align:right\">1762</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">WEBP</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">9.8M</td>\n<td style=\"text-align:right\">-91%</td>\n<td style=\"text-align:right\">66</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-92.1%</td>\n<td style=\"text-align:right\">1765</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">WEBP</td>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">9.7M</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">+962%</td>\n<td style=\"text-align:right\">80</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">96M</td>\n<td style=\"text-align:right\">+1085%</td>\n<td style=\"text-align:right\">92</td>\n</tr>\n</tbody>\n</table>\n<p>结论：<br>1.相比BPG，WEBP的压缩效果相对差一些，但转换速度快得多。</p>\n","excerpt":"","more":"<h1 id=\"BPG调研\"><a href=\"#BPG调研\" class=\"headerlink\" title=\"BPG调研\"></a>BPG调研</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#简介\">简介</a></li><br><li><a href=\"#工具\">工具</a><ul><br><li><a href=\"#兼容性\">兼容性</a></li><br><li><a href=\"#安装\">安装</a></li><br><li><a href=\"#效果示例\">效果示例</a></li><br></ul><br></li><br><li><a href=\"#性能\">性能</a><ul><br><li><a href=\"#bpg编解码性能\">BPG编解码性能</a></li><br><li><a href=\"#与webp对比\">与WEBP对比</a></li><br></ul><br></li><br></ul><br></li><br></ul><br></div><br></div><br></div>\n\n<p>本文基于libbpg-0.9.5展开调研</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>BPG是一种新型的图片格式。其设计初衷在于当图片质量或文件size成为瓶颈时，取代JPEG。其主要特点如下：</p>\n<ol>\n<li>高压缩比。BPG在quality类似的情形下，比JPEG要小得多。相同大小的图片，使用BMP存储质量远高于JPEG</li>\n<li>浏览器支持：使用一个很小js解码库（54KB）后，便可被大部分的浏览器所支持。</li>\n<li>算法：基于HEVC开源的标准视频压缩算法的一个子集实现</li>\n<li>支持与jpeg相同的chroma格式用于减少压缩过程中的数据丢失。支持alpha通道。支持 RGB, YCgCo和CMYK色彩空间。</li>\n<li>更大的通道范围支持：原生支持8位和16位通道。</li>\n<li>支持无损压缩</li>\n<li>支持多种元数据（如EXIF，ICC profile,XMP）</li>\n<li>支持动画</li>\n</ol>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>bpg作为一种新型图片格式，对其支持的工具尚不健全。除了<a href=\"http://bellard.org/bpg/\">官方</a><a href=\"http://bellard.org/bpg/libbpg-0.9.5.tar.gz\">推荐工具</a>可用外，像GraphicsMagick、ffmpeg,exiftool等主流多媒体处理软件尚未对其支持。</p>\n<p><strong>系统支持</strong></p>\n<p>bpg官方发布的工具支持三种系统，具体情况如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统</th>\n<th style=\"text-align:right\">编码</th>\n<th style=\"text-align:center\">解码</th>\n<th style=\"text-align:center\">查看</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Winows</td>\n<td style=\"text-align:right\">bpgenc支持jpg/png=&gt;bpg</td>\n<td style=\"text-align:center\">bpgdec支持bpg=&gt;png,<br/>但不支持自定义输出文件</td>\n<td style=\"text-align:center\">bpgview支持查看</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Mac OS</td>\n<td style=\"text-align:right\">bpgenc支持png=&gt;bpg</td>\n<td style=\"text-align:center\">bpgdec支持bpg=&gt;png,<br/>但不支持自定义输出文件</td>\n<td style=\"text-align:center\">没有查看工具</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Linux</td>\n<td style=\"text-align:right\">bpgenc支持png/jpg=&gt;bpg</td>\n<td style=\"text-align:center\">bpgdec支持bpg=&gt;png</td>\n<td style=\"text-align:center\">没有查看工具</td>\n<td style=\"text-align:center\">~</td>\n</tr>\n</tbody>\n</table>\n<p><strong>浏览器支持</strong></p>\n<p>WEBP浏览器：需带上js解码库。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><strong>windows</strong></p>\n<p>直接下载<a href=\"http://bellard.org/bpg/bpg-0.9.5-win32.zip\">bpg-0.9.5-win32.zip</a>即可使用</p>\n<p><strong>MacOS</strong></p>\n<p><a href=\"http://brew.sh/\">brew install</a></p>\n<p><strong>Ubuntu</strong></p>\n<ol>\n<li>安装libpng16以上版本(编译安装)</li>\n<li>安装libjpeg62*(apt-get install) </li>\n<li>安装libsdl-image*(apt-get install)</li>\n<li>编译安装<a href=\"http://bellard.org/bpg/libbpg-0.9.5.tar.gz\">libbpg-0.9.5.tar.gz</a></li>\n</ol>\n<h3 id=\"效果示例\"><a href=\"#效果示例\" class=\"headerlink\" title=\"效果示例\"></a>效果示例</h3><p>左边是BPG 效果而右边是JPG<br><img src=\"http://cdn.unwire.hk/wp-content/uploads/2014/12/comparison.jpg\" alt=\"\"></p>\n<p>示例地址:<a href=\"http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&amp;jpg=s&amp;bpg=s\">http://xooyoozoo.github.io/yolo-octo-bugfixes/#zoo-bird-head&amp;jpg=s&amp;bpg=s</a></p>\n<p><strong>web端显示示例</strong></p>\n<p>需要引用对应javascript库：<br><a href=\"http://bellard.org/bpg/bpgdec8a.js\">http://bellard.org/bpg/bpgdec8a.js</a></p>\n<p>完整的html示例</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><h3 id=\"BPG编解码性能\"><a href=\"#BPG编解码性能\" class=\"headerlink\" title=\"BPG编解码性能\"></a>BPG编解码性能</h3><p>测试场景：</p>\n<ol>\n<li>数据：线上1000张图片转换而得的各类格式</li>\n<li>环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)</li>\n<li>工具：<a href=\"http://bellard.org/bpg/libbpg-0.9.5.tar.gz\">libbpg-0.9.5.tar.gz</a></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">源图</th>\n<th style=\"text-align:right\">目标图</th>\n<th style=\"text-align:right\">数量</th>\n<th style=\"text-align:right\">失败次数</th>\n<th style=\"text-align:right\">源大小</th>\n<th style=\"text-align:right\">结果大小</th>\n<th style=\"text-align:right\">空间变化(dest-src)/src</th>\n<th style=\"text-align:right\">耗时(s)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">JPG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">15M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-46%</td>\n<td style=\"text-align:right\">1762</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-92.1%</td>\n<td style=\"text-align:right\">1765</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">96M</td>\n<td style=\"text-align:right\">+1085%</td>\n<td style=\"text-align:right\">92</td>\n</tr>\n</tbody>\n</table>\n<p>结论：</p>\n<ol>\n<li>同一张图片内容，JPG,PNG转为BPG后空间显著变小。</li>\n<li>PNG可与BPG自由转换，任意JPG可成功转为BPG。</li>\n<li>PNG/JPG转换为BPG耗时较长，BPG转回PNG相对较快。</li>\n</ol>\n<h3 id=\"与WEBP对比\"><a href=\"#与WEBP对比\" class=\"headerlink\" title=\"与WEBP对比\"></a>与WEBP对比</h3><p>webp测试场景</p>\n<ol>\n<li>数据：线上1000张图片转换而得的各类格式</li>\n<li>环境：Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64)</li>\n<li>工具：<a href=\"http://downloads.webmproject.org/releases/webp/libwebp-0.4.1-linux-x86-32.tar.gz\">libwebp 0.4.1 </a></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">源图</th>\n<th style=\"text-align:right\">目标图</th>\n<th style=\"text-align:right\">数量</th>\n<th style=\"text-align:right\">失败次数</th>\n<th style=\"text-align:right\">源大小</th>\n<th style=\"text-align:right\">结果大小</th>\n<th style=\"text-align:right\">空间变化(dest-src)/src</th>\n<th style=\"text-align:right\">耗时(s)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">JPG</td>\n<td style=\"text-align:right\">WEBP</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">15M</td>\n<td style=\"text-align:right\">9.6M</td>\n<td style=\"text-align:right\">-36%</td>\n<td style=\"text-align:right\">58</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">JPG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">15M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-46%</td>\n<td style=\"text-align:right\">1762</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">WEBP</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">9.8M</td>\n<td style=\"text-align:right\">-91%</td>\n<td style=\"text-align:right\">66</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">-92.1%</td>\n<td style=\"text-align:right\">1765</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">WEBP</td>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">9.7M</td>\n<td style=\"text-align:right\">103M</td>\n<td style=\"text-align:right\">+962%</td>\n<td style=\"text-align:right\">80</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">BPG</td>\n<td style=\"text-align:right\">PNG</td>\n<td style=\"text-align:right\">1000</td>\n<td style=\"text-align:right\">0</td>\n<td style=\"text-align:right\">8.1M</td>\n<td style=\"text-align:right\">96M</td>\n<td style=\"text-align:right\">+1085%</td>\n<td style=\"text-align:right\">92</td>\n</tr>\n</tbody>\n</table>\n<p>结论：<br>1.相比BPG，WEBP的压缩效果相对差一些，但转换速度快得多。</p>\n"},{"layout":"post","title":"Linux下C类程序性能测试必备技能","keywords":["c","linux"],"description":"","comments":1,"_content":"\n## 目录\n \n <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\">\n\n</div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\">\n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#linux下c类程序性能测试必备技能\">Linux下C类程序性能测试必备技能</a><ul>\n<li><a href=\"#背景\">背景</a></li>\n<li><a href=\"#使用gdb调试程序\">使用gdb调试程序</a></li>\n<li><a href=\"#free查看当前内存使用情况\">free查看当前内存使用情况</a></li>\n<li><a href=\"#查看句柄数\">查看句柄数</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div></div>\n\n\n# Linux下C类程序性能测试必备技能\n\n## 背景\n\n最近在玩c++的server端程序的开发，搞完后进行性能测试的时候，发现一晚上统计的内存一直程序上涨，用vargind工具扫了半天愣是没看到个definitely lost,想着项目月底要上线，瞬间慌乱无比，抓来性能测试小妹一顿敲诈勒索，小妹轻松搞定并传授相关技能如下。\n\n## 使用gdb调试程序\n\n* 正常启动 程序 exampleServer\n*  ps获取进程号，若该程序涉及到多个子进程，则根据进程关系找到主进程。\n\n```\n// 获取tobie各进程间的关系，获取到当前exampleServer的主进程号PID\n   ps -ef | grep exampleServer \n```\n\n* 启动gdb调试当前项目 \n\n\n```\n//启动gbd调试PID\ngdb attach $PID   \n//进入gdb命令行后，c 运行当前程序\nc       \n//使用浏览器等客户端向exampleServer发送请求 －－其它案例中，只要想办法让exampleServer运行即可\n// 在gbd命令行中\nCtrl＋C 停止服务\np 变量名  －－查看变量信息\n```\n\n## free查看当前内存使用情况\nfree 是个很好的命令\n\n```\nfree -m\n             total       used       free     shared    buffers   cached\nMem:        129179       2183     126996          0         15       1331\n-/+ buffers/cache:        836     128342\nSwap:         4094          0       4094\n```\n\n注意，used包含了cached部分\n 我的问题就是出现在这里，由于程序运行过程中会产生大量的临时文件，虽然临时文件很快被删除，但还是会进入缓存，故运行过程中，缓存空间会持续上涨。在统计的时候，直接统计了used部分，故会持续上涨。这类情况对于本程序来说，属于正常现象，当缓存涨到一定程度，自然会持平，也就是说并不存在所谓的内存泄漏问题（测试小妹给力啊）。\n\n## 查看句柄数\n\n查看进程打开的fd个数\n\n```\ncd /proc/$PID\nls -lth\n```\n\n","source":"_posts/2015-03-25-linux-c-perf.md","raw":"---\nlayout: post\ntitle: \"Linux下C类程序性能测试必备技能\"\nkeywords: [\"c\", \"linux\"]\ndescription: \"\"\ncategory: \"linux\"\ntags: [\"linux\"]\ncomments: true\n---\n\n## 目录\n \n <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\">\n\n</div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\">\n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#linux下c类程序性能测试必备技能\">Linux下C类程序性能测试必备技能</a><ul>\n<li><a href=\"#背景\">背景</a></li>\n<li><a href=\"#使用gdb调试程序\">使用gdb调试程序</a></li>\n<li><a href=\"#free查看当前内存使用情况\">free查看当前内存使用情况</a></li>\n<li><a href=\"#查看句柄数\">查看句柄数</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div></div>\n\n\n# Linux下C类程序性能测试必备技能\n\n## 背景\n\n最近在玩c++的server端程序的开发，搞完后进行性能测试的时候，发现一晚上统计的内存一直程序上涨，用vargind工具扫了半天愣是没看到个definitely lost,想着项目月底要上线，瞬间慌乱无比，抓来性能测试小妹一顿敲诈勒索，小妹轻松搞定并传授相关技能如下。\n\n## 使用gdb调试程序\n\n* 正常启动 程序 exampleServer\n*  ps获取进程号，若该程序涉及到多个子进程，则根据进程关系找到主进程。\n\n```\n// 获取tobie各进程间的关系，获取到当前exampleServer的主进程号PID\n   ps -ef | grep exampleServer \n```\n\n* 启动gdb调试当前项目 \n\n\n```\n//启动gbd调试PID\ngdb attach $PID   \n//进入gdb命令行后，c 运行当前程序\nc       \n//使用浏览器等客户端向exampleServer发送请求 －－其它案例中，只要想办法让exampleServer运行即可\n// 在gbd命令行中\nCtrl＋C 停止服务\np 变量名  －－查看变量信息\n```\n\n## free查看当前内存使用情况\nfree 是个很好的命令\n\n```\nfree -m\n             total       used       free     shared    buffers   cached\nMem:        129179       2183     126996          0         15       1331\n-/+ buffers/cache:        836     128342\nSwap:         4094          0       4094\n```\n\n注意，used包含了cached部分\n 我的问题就是出现在这里，由于程序运行过程中会产生大量的临时文件，虽然临时文件很快被删除，但还是会进入缓存，故运行过程中，缓存空间会持续上涨。在统计的时候，直接统计了used部分，故会持续上涨。这类情况对于本程序来说，属于正常现象，当缓存涨到一定程度，自然会持平，也就是说并不存在所谓的内存泄漏问题（测试小妹给力啊）。\n\n## 查看句柄数\n\n查看进程打开的fd个数\n\n```\ncd /proc/$PID\nls -lth\n```\n\n","slug":"2015-03-25-linux-c-perf","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhq003aqj7l1r8fkclq","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2> <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\"><br><br></div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\"><br><br><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#linux下c类程序性能测试必备技能\">Linux下C类程序性能测试必备技能</a><ul><br><li><a href=\"#背景\">背景</a></li><br><li><a href=\"#使用gdb调试程序\">使用gdb调试程序</a></li><br><li><a href=\"#free查看当前内存使用情况\">free查看当前内存使用情况</a></li><br><li><a href=\"#查看句柄数\">查看句柄数</a></li><br></ul><br></li><br></ul><br><br><br></div><br></div><br></div></div>\n\n\n<h1 id=\"Linux下C类程序性能测试必备技能\"><a href=\"#Linux下C类程序性能测试必备技能\" class=\"headerlink\" title=\"Linux下C类程序性能测试必备技能\"></a>Linux下C类程序性能测试必备技能</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近在玩c++的server端程序的开发，搞完后进行性能测试的时候，发现一晚上统计的内存一直程序上涨，用vargind工具扫了半天愣是没看到个definitely lost,想着项目月底要上线，瞬间慌乱无比，抓来性能测试小妹一顿敲诈勒索，小妹轻松搞定并传授相关技能如下。</p>\n<h2 id=\"使用gdb调试程序\"><a href=\"#使用gdb调试程序\" class=\"headerlink\" title=\"使用gdb调试程序\"></a>使用gdb调试程序</h2><ul>\n<li>正常启动 程序 exampleServer</li>\n<li>ps获取进程号，若该程序涉及到多个子进程，则根据进程关系找到主进程。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取tobie各进程间的关系，获取到当前exampleServer的主进程号PID</span><br><span class=\"line\">   ps -ef | grep exampleServer</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动gdb调试当前项目 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动gbd调试PID</span><br><span class=\"line\">gdb attach $PID   </span><br><span class=\"line\">//进入gdb命令行后，c 运行当前程序</span><br><span class=\"line\">c       </span><br><span class=\"line\">//使用浏览器等客户端向exampleServer发送请求 －－其它案例中，只要想办法让exampleServer运行即可</span><br><span class=\"line\">// 在gbd命令行中</span><br><span class=\"line\">Ctrl＋C 停止服务</span><br><span class=\"line\">p 变量名  －－查看变量信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"free查看当前内存使用情况\"><a href=\"#free查看当前内存使用情况\" class=\"headerlink\" title=\"free查看当前内存使用情况\"></a>free查看当前内存使用情况</h2><p>free 是个很好的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br><span class=\"line\">             total       used       free     shared    buffers   cached</span><br><span class=\"line\">Mem:        129179       2183     126996          0         15       1331</span><br><span class=\"line\">-/+ buffers/cache:        836     128342</span><br><span class=\"line\">Swap:         4094          0       4094</span><br></pre></td></tr></table></figure>\n<p>注意，used包含了cached部分<br> 我的问题就是出现在这里，由于程序运行过程中会产生大量的临时文件，虽然临时文件很快被删除，但还是会进入缓存，故运行过程中，缓存空间会持续上涨。在统计的时候，直接统计了used部分，故会持续上涨。这类情况对于本程序来说，属于正常现象，当缓存涨到一定程度，自然会持平，也就是说并不存在所谓的内存泄漏问题（测试小妹给力啊）。</p>\n<h2 id=\"查看句柄数\"><a href=\"#查看句柄数\" class=\"headerlink\" title=\"查看句柄数\"></a>查看句柄数</h2><p>查看进程打开的fd个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /proc/$PID</span><br><span class=\"line\">ls -lth</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2> <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\"><br><br></div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\"><br><br><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#linux下c类程序性能测试必备技能\">Linux下C类程序性能测试必备技能</a><ul><br><li><a href=\"#背景\">背景</a></li><br><li><a href=\"#使用gdb调试程序\">使用gdb调试程序</a></li><br><li><a href=\"#free查看当前内存使用情况\">free查看当前内存使用情况</a></li><br><li><a href=\"#查看句柄数\">查看句柄数</a></li><br></ul><br></li><br></ul><br></li><br></ul><br></div><br></div><br></div></div>\n\n\n<h1 id=\"Linux下C类程序性能测试必备技能\"><a href=\"#Linux下C类程序性能测试必备技能\" class=\"headerlink\" title=\"Linux下C类程序性能测试必备技能\"></a>Linux下C类程序性能测试必备技能</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近在玩c++的server端程序的开发，搞完后进行性能测试的时候，发现一晚上统计的内存一直程序上涨，用vargind工具扫了半天愣是没看到个definitely lost,想着项目月底要上线，瞬间慌乱无比，抓来性能测试小妹一顿敲诈勒索，小妹轻松搞定并传授相关技能如下。</p>\n<h2 id=\"使用gdb调试程序\"><a href=\"#使用gdb调试程序\" class=\"headerlink\" title=\"使用gdb调试程序\"></a>使用gdb调试程序</h2><ul>\n<li>正常启动 程序 exampleServer</li>\n<li>ps获取进程号，若该程序涉及到多个子进程，则根据进程关系找到主进程。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取tobie各进程间的关系，获取到当前exampleServer的主进程号PID</span><br><span class=\"line\">   ps -ef | grep exampleServer</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动gdb调试当前项目 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动gbd调试PID</span><br><span class=\"line\">gdb attach $PID   </span><br><span class=\"line\">//进入gdb命令行后，c 运行当前程序</span><br><span class=\"line\">c       </span><br><span class=\"line\">//使用浏览器等客户端向exampleServer发送请求 －－其它案例中，只要想办法让exampleServer运行即可</span><br><span class=\"line\">// 在gbd命令行中</span><br><span class=\"line\">Ctrl＋C 停止服务</span><br><span class=\"line\">p 变量名  －－查看变量信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"free查看当前内存使用情况\"><a href=\"#free查看当前内存使用情况\" class=\"headerlink\" title=\"free查看当前内存使用情况\"></a>free查看当前内存使用情况</h2><p>free 是个很好的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br><span class=\"line\">             total       used       free     shared    buffers   cached</span><br><span class=\"line\">Mem:        129179       2183     126996          0         15       1331</span><br><span class=\"line\">-/+ buffers/cache:        836     128342</span><br><span class=\"line\">Swap:         4094          0       4094</span><br></pre></td></tr></table></figure>\n<p>注意，used包含了cached部分<br> 我的问题就是出现在这里，由于程序运行过程中会产生大量的临时文件，虽然临时文件很快被删除，但还是会进入缓存，故运行过程中，缓存空间会持续上涨。在统计的时候，直接统计了used部分，故会持续上涨。这类情况对于本程序来说，属于正常现象，当缓存涨到一定程度，自然会持平，也就是说并不存在所谓的内存泄漏问题（测试小妹给力啊）。</p>\n<h2 id=\"查看句柄数\"><a href=\"#查看句柄数\" class=\"headerlink\" title=\"查看句柄数\"></a>查看句柄数</h2><p>查看进程打开的fd个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /proc/$PID</span><br><span class=\"line\">ls -lth</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"支持各类音频格式的ffmpeg静态编译","keywords":["ffmpeg","audio"],"description":"","comments":1,"_content":"\n## 目录\n <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\">\n\n</div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\">\n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#依赖库安装\">依赖库安装</a><ul>\n<li><a href=\"#yasm130\">yasm1.3.0</a></li>\n<li><a href=\"#安装mp3依赖库\">安装mp3依赖库</a></li>\n<li><a href=\"#error-libopencoreamrnb-not-found\">ERROR: libopencore_amrnb not found</a></li>\n<li><a href=\"#error-libvoamrwbenc-not-found\">ERROR: libvo_amrwbenc not found</a></li>\n<li><a href=\"#error-libwavpack-not-found\">ERROR: libwavpack not found</a></li>\n<li><a href=\"#error-libaacplus-200-not-found\">ERROR: libaacplus &gt;= 2.0.0 not found</a></li>\n<li><a href=\"#error-libfdkaac-not-found\">ERROR: libfdk_aac not found</a></li>\n<li><a href=\"#error-libvoaacenc-not-found\">ERROR: libvo_aacenc not found</a></li>\n</ul>\n</li>\n<li><a href=\"#编译安装ffmpeg\">编译安装ffmpeg</a><ul>\n<li><a href=\"#常用编译方式小结\">常用编译方式小结</a></li>\n<li><a href=\"#支持vorbis\">支持vorbis</a></li>\n<li><a href=\"#支持wav\">支持wav</a></li>\n<li><a href=\"#支持aac\">支持aac</a></li>\n<li><a href=\"#支持mp2\">支持mp2</a></li>\n<li><a href=\"#flac-支持\">flac 支持</a></li>\n<li><a href=\"#支持-ac3\">支持 ac3</a></li>\n<li><a href=\"#支持wmawmv\">支持wma/wmv</a></li>\n<li><a href=\"#本次编译涉及所有配置项\">本次编译涉及所有配置项</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div></div>\n\n\n## 概述\n\n本文将详细介绍编译安装ffmpeg,该ffmpeg将支持目前业界各主流音频格式，主要功能为支持mp2，mp3，flac，vorbis，wav，aac，amr，ac3，wma，wmv格式转为mp3/aac/amr。\n\n## 依赖库安装\n\n### yasm1.3.0\n\n编译安装 [yasm-1.3.0.tar.gz](http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz) \n\n### 安装mp3依赖库\n   错误\n   \n   ```\n   ERROR: libmp3lame >= 3.98.3 not found\n   ```\n  \n  安装：\n  \n  ```\n  libmp3lame-dev - MP3 encoding library (development)\n  apt-get install   libmp3lame-dev\n  ```\n\n### ERROR: libopencore_amrnb not found\n\n```\nsudo apt-get install libx264-dev libxvidcore-dev libopencore-amrwb-dev libopencore-amrnb-dev libfaad-dev libfaac-dev libmp3lame-dev \\\nlibtwolame-dev liba52-0.7.4-dev libcddb2-dev libcdaudio-dev libcdio-cdda-dev libvorbis-dev libopenjpeg-dev\n```\n\n### ERROR: libvo_amrwbenc not found\n\nhttp://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/\n\n### ERROR: libwavpack not found\n\n ```\n sudo apt-get install libwavpack-dev\n ```\n\n### ERROR: libaacplus >= 2.0.0 not found\n\n[ffmpeg官网解决方案](https://trac.ffmpeg.org/wiki/How%20to%20quickly%20compile%20libaacplus)\n\n```\n# apt-get install libfftw3-dev pkg-config autoconf automake libtool unzip\n$ wget http://tipok.org.ua/downloads/media/aacplus/libaacplus/libaacplus-2.0.2.tar.gz\n$ tar -xzf libaacplus-2.0.2.tar.gz\n$ cd libaacplus-2.0.2\n$ ./autogen.sh --enable-shared --enable-static\n$ make\n# make install\n# ldconfig\n```\n\n### ERROR: libfdk_aac not found\n\n编译安装[libfdk_aac](http://sourceforge.net/projects/opencore-amr/?source=directory)\n\n### ERROR: libvo_aacenc not found\n\n编译安装[vo-aacenc-0.1.2.tar.gz](http://sourceforge.net/projects/opencore-amr/files/vo-aacenc/vo-aacenc-0.1.2.tar.gz/download)\n\n## 编译安装ffmpeg\n\n### 常用编译方式小结\n\n1.编译时设置通用参数\n\n```\n./configure \\\n    --extra-cflags='-I/usr/include -static' \\\n    --extra-ldflags='-I/usr/lib -static' \\\n    --disable-debug \\\n    --disable-shared \\\n    --enable-static \\\n    --enable-gpl \\\n    --enable-libmp3lame \\\n    --enable-nonfree \\\n    --disable-logging \\\n    --disable-avdevice \\\n    --disable-swscale \\\n    --disable-postproc \\\n    --disable-dxva2 \\\n    --disable-vaapi \\\n    --disable-vda \\\n    --disable-vdpau \\\n    --disable-everything \\\n    --disable-runtime-cpudetect \\\n    --disable-swscale-alpha \\\n    --disable-ffplay \\\n    --disable-ffprobe \\\n    --disable-ffserver \\\n    --disable-doc \\\n    --disable-htmlpages \\\n    --disable-manpages \\\n    --disable-podpages \\\n    --disable-txtpages \\\n    --enable-protocol=file \\\n    --enable-protocol=pipe \\\n    --enable-protocol=http \\\n    --enable-protocol=https \\\n    --enable-filter=aresample \\\n```\n\n2.从第一步生成的config.h中，grep 想要安装的格式关键字，如想要安装mp3\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ grep MP3 config.h \n#define CONFIG_LIBMP3LAME 1\n#define CONFIG_MP3_HEADER_DECOMPRESS_BSF 0\n#define CONFIG_MP3_DECODER 1\n#define CONFIG_MP3FLOAT_DECODER 0\n#define CONFIG_MP3ADU_DECODER 0\n#define CONFIG_MP3ADUFLOAT_DECODER 0\n#define CONFIG_MP3ON4_DECODER 0\n#define CONFIG_MP3ON4FLOAT_DECODER 0\n#define CONFIG_MP3_DEMUXER 1\n#define CONFIG_LIBMP3LAME_ENCODER 1\n#define CONFIG_MP3_MUXER 1\n```\n\n3.设置诸如encoder,decoder,muxer,demuxer对应项\n\n```\n   --enable-libmp3lame \\\n   --enable-decoder=mp3 \\\n    --enable-demuxer=mp3 \\\n    --enable-muxer=mp3 \\\n    --enable-encoder=libmp3lame \\\n```\n\n\n### 支持vorbis\n\n**编译参数**\n\n```\n    --enable-libvorbis \\\n    --enable-parser=vorbis \\\n    --enable-encoder=vorbis \\\n    --enable-decoder=vorbis \\\n    --enable-encoder=libvorbis \\\n    --enable-decoder=libvorbis \\\n    --enable-muxer=ogg \\\n    --enable-demuxer=ogg \\\n```\n\n**测试成功**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.ogg\nffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers\n  built on Mar 14 2015 01:24:30 with gcc 4.9.1 (Ubuntu 4.9.1-16ubuntu6)\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, ogg, to 'test.ogg':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: vorbis (libvorbis), 8000 Hz, mono, fltp\n    Metadata:\n      encoder         : Lavf55.33.100\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> libvorbis)\nPress [q] to stop, [?] for help\nsize=      25kB time=00:00:10.08 bitrate=  20.3kbits/s    \nvideo:0kB audio:22kB subtitle:0 data:0 global headers:3kB muxing overhead 2.472099%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i  test.ogg ogg.mp3\nInput #0, ogg, from 'test.ogg':\n  Duration: 00:00:10.09, start: 0.000000, bitrate: 20 kb/s\n    Stream #0:0: Audio: vorbis, 8000 Hz, mono, fltp, 22 kb/s\n    Metadata:\n      ENCODER         : Lavf55.33.100\nOutput #0, mp3, to 'ogg.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp\n    Metadata:\n      ENCODER         : Lavf55.33.100\nStream mapping:\n  Stream #0:0 -> #0:0 (vorbis -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%\n```\n\n### 支持wav\n\n**编译**\n\n```\n --enable-libwavpack \\\n    --enable-muxer=wav \\\n    --enable-demuxer=wav \\\n    --enable-decoder=wavpack \\\n    --enable-encoder=wavpack \\\n    --enable-decoder=wav \\\n    --enable-encoder=wav \\\n    --enable-encoder=pcm_s16le \\\n    --enable-decoder=pcm_s16le \\\n```\n\n**测试成功**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.wav wav.mp3\nGuessed Channel Layout for  Input Stream #0.0 : mono\nInput #0, wav, from 'test.wav':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.09, bitrate: 128 kb/s\n    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s\nOutput #0, mp3, to 'wav.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p\nStream mapping:\n  Stream #0:0 -> #0:0 (pcm_s16le -> libmp3lame)\nPress [q] to stop, [?] for help\n[libmp3lame @ 0x29fe940] Trying to remove 576 samples, but the queue is empty\nsize=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 haha.wav\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nFile 'haha.wav' already exists. Overwrite ? [y/N] y\nOutput #0, wav, to 'haha.wav':\n  Metadata:\n    ISFT            : Lavf55.33.100\n    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> pcm_s16le)\nPress [q] to stop, [?] for help\nsize=     158kB time=00:00:10.08 bitrate= 128.1kbits/s    \nvideo:0kB audio:158kB subtitle:0 data:0 global headers:0kB muxing overhead 0.049574%\n```\n\n部分从wav转mp3,遇到一下错误：\n\n```\nInput #0, wav, from '../resource/flac/1.wav':\n  Duration: 00:09:05.67, bitrate: 96 kb/s\n    Stream #0:0: Audio: pcm_u8 ([1][0][0][0] / 0x0001), 12000 Hz, mono, 96 kb/s\n[abuffer @ 0x1a3b520] Unable to parse option value \"(null)\" as sample format\n    Last message repeated 1 times\n[abuffer @ 0x1a3b520] Error setting option sample_fmt to value (null).\n[graph 0 input from stream 0:0 @ 0x1a4fea0] Error applying options to the filter.\nError opening filters!\nConversion failed!\n```\n\n\n解决方法，加上编译参数\n\n```\n   --enable-encoder=pcm_u8 \\\n    --enable-decoder=pcm_u8 \\\n    --enable-muxer=pcm_u8 \\\n    --enable-demuxer=pcm_u8 \\\n```\n\n\n### 支持aac\n**编译**\n\n```\n     --enable-libvo-aacenc \\\n    --enable-libfdk_aac \\\n    --enable-libfaac \\\n    --enable-parser=aac \\\n    --enable-encoder=aac \\\n    --enable-decoder=aac \\\n    --enable-encoder=libfaac \\\n    --enable-encoder=libvo_aacenc \\\n    --enable-encoder=libaacplus \\\n    --enable-encoder=libfdk_aac \\\n    --enable-decoder=libfdk_aac\\\n    --enable-demuxer=aac \\\n    --enable-muxer=adts \\\n```\n\n**测试结果**\n\n```\n ./ffmpeg -i test.mp3 haha.aac\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, adts, to 'haha.aac':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: aac (libfdk_aac), 8000 Hz, mono, s16, 17 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> libfdk_aac)\nPress [q] to stop, [?] for help\nsize=      22kB time=00:00:10.11 bitrate=  18.0kbits/s    \nvideo:0kB audio:22kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i haha.aac aac.mp3\n[aac @ 0x15abd80] Estimating duration from bitrate, this may be inaccurate\nInput #0, aac, from 'haha.aac':\n  Duration: 00:00:10.86, bitrate: 16 kb/s\n    Stream #0:0: Audio: aac, 8000 Hz, mono, fltp, 16 kb/s\nFile 'aac.mp3' already exists. Overwrite ? [y/N] y\nOutput #0, mp3, to 'aac.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp\nStream mapping:\n  Stream #0:0 -> #0:0 (aac -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      11kB time=00:00:10.37 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.482877%\n```\n\n\n\n\n### 支持mp2\n\n**编译**\n\n```\n    --enable-encoder=mp2 \\\n    --enable-decoder=mp2 \\\n    --enable-muxer=mp2 \\\n    --enable-decoder=mp2float \\\n    --enable-encoder=mp2fixed \\\n```\n\n**测试通过**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.mp2\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, mp2, to 'test.mp2':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16, 128 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> mp2)\nPress [q] to stop, [?] for help\nsize=     159kB time=00:00:10.12 bitrate= 128.4kbits/s    \nvideo:0kB audio:159kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp2 mp2.mp3\n[mp3 @ 0x1b77d80] Estimating duration from bitrate, this may be inaccurate\nInput #0, mp3, from 'test.mp2':\n  Duration: 00:00:10.29, start: 0.000000, bitrate: 126 kb/s\n    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16p, 126 kb/s\nFile 'mp2.mp3' already exists. Overwrite ? [y/N] y\nOutput #0, mp3, to 'mp2.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 16000 Hz, mono, s16p\nStream mapping:\n  Stream #0:0 -> #0:0 (mp2 -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      30kB time=00:00:10.15 bitrate=  24.3kbits/s    \nvideo:0kB audio:30kB subtitle:0 data:0 global headers:0kB muxing overhead 0.733568%\n```\n\n### flac 支持\n**编译**\n\n```\n   --enable-encoder=flac \\\n    --enable-decoder=flac \\\n    --enable-demuxer=flac \\\n    --enable-muxer=flac \\\n    --enable-parser=flac \\\n```\n\n**测试通过**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.flac\nffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, flac, to 'test.flac':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: flac, 8000 Hz, mono, s16, 128 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> flac)\nPress [q] to stop, [?] for help\nsize=      92kB time=00:00:10.22 bitrate=  73.4kbits/s    \nvideo:0kB audio:84kB subtitle:0 data:0 global headers:0kB muxing overhead 9.643538%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.flac flac.mp3\nInput #0, flac, from 'test.flac':\n  Metadata:\n    ENCODER         : Lavf55.33.100\n  Duration: 00:00:10.16, bitrate: 73 kb/s\n    Stream #0:0: Audio: flac, 8000 Hz, mono, s16\nOutput #0, mp3, to 'flac.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p\nStream mapping:\n  Stream #0:0 -> #0:0 (flac -> libmp3lame)\nPress [q] to stop, [?] for help\n[libmp3lame @ 0x1a913a0] Trying to remove 576 samples, but the queue is empty\nsize=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%\n```\n\n部分flac转mp3失败的原因之一是ffmpeg没有将图片格式编在里面的缘故，\n在ffmpeg编译时添加以下参数\n\n```\n    --enable-encoder=jpeg2000 \\\n    --enable-encoder=mjpeg \\\n    --enable-encoder=ljpeg \\\n    --enable-encoder=jpegls \\\n    --enable-decoder=jpeg2000 \\\n    --enable-decoder=jpegls \\\n    --enable-decoder=mjpeg \\\n    --enable-decoder=mjpegb \\\n    --enable-muxer=mjpeg \\\n    --enable-demuxer=mjpeg \\\n    --enable-encoder=png \\\n    --enable-decoder=png \\\n    --enable-parser=png \\\n```\n\n加入图片支持后，以上转码依旧报错\n\n```\nInput #0, flac, from 'b1.flac':\n  Duration: 00:08:32.31, bitrate: 871 kb/s\n    Stream #0:0: Audio: flac, 44100 Hz, stereo, s16\n    Stream #0:1: Video: mjpeg, yuvj420p(pc), 542x475 [SAR 96:96 DAR 542:475], 90k tbr, 90k tbn, 90k tbc\n    Metadata:\n      comment         : Cover (front)\nFile 'test.mp3' already exists. Overwrite ? [y/N] y\n'scale' filter not present, cannot convert pixel formats.\nError opening filters!\nConversion failed!\n```\n\n解决方法：\n编译时添加scale的支持\n\n```\n   --enable-swscale \\\n    --enable-swscale-alpha \\\n    --enable-filter=scale \\\n```\n\n\n\n### 支持 ac3\n\n**编译**\n\n```\n    --enable-encoder=ac3 \\\n    --enable-decoder=ac3 \\\n    --enable-encoder=ac3_fixed\\\n    --enable-decoder=atrac3 \\\n    --enable-decoder=atrac3p \\\n    --enable-encoder=eac3 \\\n    --enable-decoder=eac3 \\\n    --enable-muxer=ac3 \\\n    --enable-demuxer=ac3 \\\n    --enable-muxer=eac3 \\\n    --enable-demuxer=eac3 \\\n```\n\n**测试通过**\n\n```\n./ffmpeg -i test.mp3 test.ac3\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, ac3, to 'test.ac3':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> ac3)\nPress [q] to stop, [?] for help\nsize=     119kB time=00:00:10.14 bitrate=  96.3kbits/s    \nvideo:0kB audio:119kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.ac3 ac3.mp3\n[ac3 @ 0x15a7d80] Estimating duration from bitrate, this may be inaccurate\nInput #0, ac3, from 'test.ac3':\n  Duration: 00:00:10.18, start: 0.000000, bitrate: 96 kb/s\n    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s\nOutput #0, mp3, to 'ac3.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp\nStream mapping:\n  Stream #0:0 -> #0:0 (ac3 -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%\n```\n\n### 支持wma/wmv\n\n编译参数\n\n```\n --enable-decoder=wmalossless \\\n    --enable-decoder=wmapro \\\n    --enable-encoder=wmav1 \\\n    --enable-decoder=wmav1 \\\n    --enable-encoder=wmav2 \\\n    --enable-decoder=wmav2 \\\n    --enable-decoder=wmavoice \\\n    --enable-demuxer=xwma \\\n    --enable-demuxer=avi \\\n    --enable-muxer=avi \\\n    --enable-demuxer=asf \\\n    --enable-muxer=asf \\\n    --enable-encoder=wmv1 \\\n    --enable-decoder=wmv1 \\\n    --enable-encoder=wmv2 \\\n    --enable-decoder=wmv2 \\\n    --enable-decoder=wmv3 \\\n    --enable-decoder=wmv3_crystalhd \\\n    --enable-decoder=wmv3_vdpau \\\n    --enable-decoder=wmv3image \\\n```\n\n### 本次编译涉及所有配置项\n\n```\n./configure \\\n    --extra-cflags='-I/usr/include -static' \\\n    --extra-ldflags='-I/usr/lib -static' \\\n    --disable-debug \\\n    --disable-shared \\\n    --enable-static \\\n    --enable-gpl \\\n    --enable-libmp3lame \\\n    --enable-nonfree \\\n    --disable-logging \\\n    --disable-avdevice \\\n    --disable-swscale \\\n    --disable-postproc \\\n    --disable-dxva2 \\\n    --disable-vaapi \\\n    --disable-vda \\\n    --disable-vdpau \\\n    --disable-everything \\\n    --disable-runtime-cpudetect \\\n    --disable-swscale-alpha \\\n    --disable-ffplay \\\n    --disable-ffprobe \\\n    --disable-ffserver \\\n    --disable-doc \\\n    --disable-htmlpages \\\n    --disable-manpages \\\n    --disable-podpages \\\n    --disable-txtpages \\\n    --enable-protocol=file \\\n    --enable-protocol=pipe \\\n    --enable-protocol=http \\\n    --enable-protocol=https \\\n    --enable-filter=aresample \\\n   --enable-decoder=mp3 \\\n    --enable-demuxer=mp3 \\\n    --enable-parser=mpegaudio \\\n    --enable-muxer=mp3 \\\n    --enable-encoder=libmp3lame \\\n\t--enable-version3 \\\n    --enable-libvo-aacenc \\\n    --enable-libfdk_aac \\\n    --enable-libfdk-aac \\\n    --enable-libfaac \\\n    --enable-parser=aac \\\n    --enable-encoder=aac \\\n    --enable-decoder=aac \\\n    --enable-encoder=libfaac \\\n    --enable-encoder=libvo_aacenc \\\n    --enable-encoder=libaacplus \\\n    --enable-encoder=libfdk_aac \\\n    --enable-decoder=libfdk_aac\\\n\t--enable-demuxer=aac \\\n    --enable-muxer=adts \\\n    --enable-libopencore-amrnb \\\n\t--enable-libopencore-amrwb \\\n\t--enable-libvo_amrwbenc \\\n    --enable-encoder=libvo_amrwbenc \\\n    --enable-decoder=libopencore_amrnb \\\n\t--enable-encoder=libopencore_amrnb \\\n    --enable-decoder=libopencore_amrwb \\\n    --enable-decoder=amrnb \\\n    --enable-decoder=amrwb \\\n\t--enable-muxer=amr \\\n    --enable-demuxer=amr \\\n    --enable-libwavpack \\\n    --enable-muxer=wav \\\n    --enable-demuxer=wav \\\n    --enable-decoder=wavpack \\\n    --enable-encoder=wavpack \\\n    --enable-encoder=pcm_s16le \\\n    --enable-decoder=pcm_s16le \\\n    --enable-libvorbis \\\n    --enable-parser=vorbis \\\n    --enable-encoder=vorbis \\\n    --enable-decoder=vorbis \\\n    --enable-encoder=libvorbis \\\n    --enable-decoder=libvorbis \\\n    --enable-muxer=ogg \\\n    --enable-demuxer=ogg \\\n    --enable-decoder=mp1float \\\n    --enable-decoder=mp1 \\\n    --enable-encoder=mp2 \\\n    --enable-decoder=mp2 \\\n    --enable-muxer=mp2 \\\n    --enable-decoder=mp2float \\\n    --enable-encoder=mp2fixed \\\n    --enable-encoder=flac \\\n    --enable-decoder=flac \\\n    --enable-demuxer=flac \\\n    --enable-muxer=flac \\\n    --enable-parser=flac \\\n    --enable-encoder=ac3 \\\n    --enable-decoder=ac3 \\\n    --enable-encoder=ac3_fixed\\\n    --enable-decoder=atrac3 \\\n    --enable-decoder=atrac3p \\\n    --enable-encoder=eac3 \\\n    --enable-decoder=eac3 \\\n    --enable-muxer=ac3 \\\n    --enable-demuxer=ac3 \\\n    --enable-muxer=eac3 \\\n    --enable-demuxer=eac3 \\\n    --enable-decoder=wmalossless \\\n    --enable-decoder=wmapro \\\n    --enable-encoder=wmav1 \\\n    --enable-decoder=wmav1 \\\n    --enable-encoder=wmav2 \\\n    --enable-decoder=wmav2 \\\n    --enable-decoder=wmavoice \\\n    --enable-demuxer=xwma \\\n    --enable-demuxer=avi \\\n    --enable-muxer=avi \\\n    --enable-demuxer=asf \\\n    --enable-muxer=asf \\\n    --enable-encoder=wmv1 \\\n    --enable-decoder=wmv1 \\\n    --enable-encoder=wmv2 \\\n    --enable-decoder=wmv2 \\\n    --enable-decoder=wmv3 \\\n    --enable-decoder=wmv3_crystalhd \\\n    --enable-decoder=wmv3_vdpau \\\n    --enable-decoder=wmv3image \\\n        --enable-encoder=jpeg2000 \\\n    --enable-encoder=mjpeg \\\n    --enable-encoder=ljpeg \\\n    --enable-encoder=jpegls \\\n    --enable-decoder=jpeg2000 \\\n    --enable-decoder=jpegls \\\n    --enable-decoder=mjpeg \\\n    --enable-decoder=mjpegb \\\n    --enable-muxer=mjpeg \\\n    --enable-demuxer=mjpeg \\\n    --enable-encoder=png \\\n    --enable-decoder=png \\\n    --enable-parser=png \\\n    --enable-swscale \\\n    --enable-swscale-alpha \\\n    --enable-filter=scale \\\n    --enable-encoder=pcm_u8 \\\n    --enable-decoder=pcm_u8 \\\n    --enable-muxer=pcm_u8 \\\n    --enable-demuxer=pcm_u8 \\\n    --enable-small \\\n\n```\n","source":"_posts/2015-03-16-ffmpeg-audio.md","raw":"---\nlayout: post\ntitle: \"支持各类音频格式的ffmpeg静态编译\"\nkeywords: [\"ffmpeg\", \"audio\"]\ndescription: \"\"\ncategory: \"ffmpeg\"\ntags: [\"ffmpeg\"]\ncomments: true\n---\n\n## 目录\n <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\">\n\n</div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\">\n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#依赖库安装\">依赖库安装</a><ul>\n<li><a href=\"#yasm130\">yasm1.3.0</a></li>\n<li><a href=\"#安装mp3依赖库\">安装mp3依赖库</a></li>\n<li><a href=\"#error-libopencoreamrnb-not-found\">ERROR: libopencore_amrnb not found</a></li>\n<li><a href=\"#error-libvoamrwbenc-not-found\">ERROR: libvo_amrwbenc not found</a></li>\n<li><a href=\"#error-libwavpack-not-found\">ERROR: libwavpack not found</a></li>\n<li><a href=\"#error-libaacplus-200-not-found\">ERROR: libaacplus &gt;= 2.0.0 not found</a></li>\n<li><a href=\"#error-libfdkaac-not-found\">ERROR: libfdk_aac not found</a></li>\n<li><a href=\"#error-libvoaacenc-not-found\">ERROR: libvo_aacenc not found</a></li>\n</ul>\n</li>\n<li><a href=\"#编译安装ffmpeg\">编译安装ffmpeg</a><ul>\n<li><a href=\"#常用编译方式小结\">常用编译方式小结</a></li>\n<li><a href=\"#支持vorbis\">支持vorbis</a></li>\n<li><a href=\"#支持wav\">支持wav</a></li>\n<li><a href=\"#支持aac\">支持aac</a></li>\n<li><a href=\"#支持mp2\">支持mp2</a></li>\n<li><a href=\"#flac-支持\">flac 支持</a></li>\n<li><a href=\"#支持-ac3\">支持 ac3</a></li>\n<li><a href=\"#支持wmawmv\">支持wma/wmv</a></li>\n<li><a href=\"#本次编译涉及所有配置项\">本次编译涉及所有配置项</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div></div>\n\n\n## 概述\n\n本文将详细介绍编译安装ffmpeg,该ffmpeg将支持目前业界各主流音频格式，主要功能为支持mp2，mp3，flac，vorbis，wav，aac，amr，ac3，wma，wmv格式转为mp3/aac/amr。\n\n## 依赖库安装\n\n### yasm1.3.0\n\n编译安装 [yasm-1.3.0.tar.gz](http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz) \n\n### 安装mp3依赖库\n   错误\n   \n   ```\n   ERROR: libmp3lame >= 3.98.3 not found\n   ```\n  \n  安装：\n  \n  ```\n  libmp3lame-dev - MP3 encoding library (development)\n  apt-get install   libmp3lame-dev\n  ```\n\n### ERROR: libopencore_amrnb not found\n\n```\nsudo apt-get install libx264-dev libxvidcore-dev libopencore-amrwb-dev libopencore-amrnb-dev libfaad-dev libfaac-dev libmp3lame-dev \\\nlibtwolame-dev liba52-0.7.4-dev libcddb2-dev libcdaudio-dev libcdio-cdda-dev libvorbis-dev libopenjpeg-dev\n```\n\n### ERROR: libvo_amrwbenc not found\n\nhttp://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/\n\n### ERROR: libwavpack not found\n\n ```\n sudo apt-get install libwavpack-dev\n ```\n\n### ERROR: libaacplus >= 2.0.0 not found\n\n[ffmpeg官网解决方案](https://trac.ffmpeg.org/wiki/How%20to%20quickly%20compile%20libaacplus)\n\n```\n# apt-get install libfftw3-dev pkg-config autoconf automake libtool unzip\n$ wget http://tipok.org.ua/downloads/media/aacplus/libaacplus/libaacplus-2.0.2.tar.gz\n$ tar -xzf libaacplus-2.0.2.tar.gz\n$ cd libaacplus-2.0.2\n$ ./autogen.sh --enable-shared --enable-static\n$ make\n# make install\n# ldconfig\n```\n\n### ERROR: libfdk_aac not found\n\n编译安装[libfdk_aac](http://sourceforge.net/projects/opencore-amr/?source=directory)\n\n### ERROR: libvo_aacenc not found\n\n编译安装[vo-aacenc-0.1.2.tar.gz](http://sourceforge.net/projects/opencore-amr/files/vo-aacenc/vo-aacenc-0.1.2.tar.gz/download)\n\n## 编译安装ffmpeg\n\n### 常用编译方式小结\n\n1.编译时设置通用参数\n\n```\n./configure \\\n    --extra-cflags='-I/usr/include -static' \\\n    --extra-ldflags='-I/usr/lib -static' \\\n    --disable-debug \\\n    --disable-shared \\\n    --enable-static \\\n    --enable-gpl \\\n    --enable-libmp3lame \\\n    --enable-nonfree \\\n    --disable-logging \\\n    --disable-avdevice \\\n    --disable-swscale \\\n    --disable-postproc \\\n    --disable-dxva2 \\\n    --disable-vaapi \\\n    --disable-vda \\\n    --disable-vdpau \\\n    --disable-everything \\\n    --disable-runtime-cpudetect \\\n    --disable-swscale-alpha \\\n    --disable-ffplay \\\n    --disable-ffprobe \\\n    --disable-ffserver \\\n    --disable-doc \\\n    --disable-htmlpages \\\n    --disable-manpages \\\n    --disable-podpages \\\n    --disable-txtpages \\\n    --enable-protocol=file \\\n    --enable-protocol=pipe \\\n    --enable-protocol=http \\\n    --enable-protocol=https \\\n    --enable-filter=aresample \\\n```\n\n2.从第一步生成的config.h中，grep 想要安装的格式关键字，如想要安装mp3\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ grep MP3 config.h \n#define CONFIG_LIBMP3LAME 1\n#define CONFIG_MP3_HEADER_DECOMPRESS_BSF 0\n#define CONFIG_MP3_DECODER 1\n#define CONFIG_MP3FLOAT_DECODER 0\n#define CONFIG_MP3ADU_DECODER 0\n#define CONFIG_MP3ADUFLOAT_DECODER 0\n#define CONFIG_MP3ON4_DECODER 0\n#define CONFIG_MP3ON4FLOAT_DECODER 0\n#define CONFIG_MP3_DEMUXER 1\n#define CONFIG_LIBMP3LAME_ENCODER 1\n#define CONFIG_MP3_MUXER 1\n```\n\n3.设置诸如encoder,decoder,muxer,demuxer对应项\n\n```\n   --enable-libmp3lame \\\n   --enable-decoder=mp3 \\\n    --enable-demuxer=mp3 \\\n    --enable-muxer=mp3 \\\n    --enable-encoder=libmp3lame \\\n```\n\n\n### 支持vorbis\n\n**编译参数**\n\n```\n    --enable-libvorbis \\\n    --enable-parser=vorbis \\\n    --enable-encoder=vorbis \\\n    --enable-decoder=vorbis \\\n    --enable-encoder=libvorbis \\\n    --enable-decoder=libvorbis \\\n    --enable-muxer=ogg \\\n    --enable-demuxer=ogg \\\n```\n\n**测试成功**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.ogg\nffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers\n  built on Mar 14 2015 01:24:30 with gcc 4.9.1 (Ubuntu 4.9.1-16ubuntu6)\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, ogg, to 'test.ogg':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: vorbis (libvorbis), 8000 Hz, mono, fltp\n    Metadata:\n      encoder         : Lavf55.33.100\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> libvorbis)\nPress [q] to stop, [?] for help\nsize=      25kB time=00:00:10.08 bitrate=  20.3kbits/s    \nvideo:0kB audio:22kB subtitle:0 data:0 global headers:3kB muxing overhead 2.472099%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i  test.ogg ogg.mp3\nInput #0, ogg, from 'test.ogg':\n  Duration: 00:00:10.09, start: 0.000000, bitrate: 20 kb/s\n    Stream #0:0: Audio: vorbis, 8000 Hz, mono, fltp, 22 kb/s\n    Metadata:\n      ENCODER         : Lavf55.33.100\nOutput #0, mp3, to 'ogg.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp\n    Metadata:\n      ENCODER         : Lavf55.33.100\nStream mapping:\n  Stream #0:0 -> #0:0 (vorbis -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%\n```\n\n### 支持wav\n\n**编译**\n\n```\n --enable-libwavpack \\\n    --enable-muxer=wav \\\n    --enable-demuxer=wav \\\n    --enable-decoder=wavpack \\\n    --enable-encoder=wavpack \\\n    --enable-decoder=wav \\\n    --enable-encoder=wav \\\n    --enable-encoder=pcm_s16le \\\n    --enable-decoder=pcm_s16le \\\n```\n\n**测试成功**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.wav wav.mp3\nGuessed Channel Layout for  Input Stream #0.0 : mono\nInput #0, wav, from 'test.wav':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.09, bitrate: 128 kb/s\n    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s\nOutput #0, mp3, to 'wav.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p\nStream mapping:\n  Stream #0:0 -> #0:0 (pcm_s16le -> libmp3lame)\nPress [q] to stop, [?] for help\n[libmp3lame @ 0x29fe940] Trying to remove 576 samples, but the queue is empty\nsize=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 haha.wav\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nFile 'haha.wav' already exists. Overwrite ? [y/N] y\nOutput #0, wav, to 'haha.wav':\n  Metadata:\n    ISFT            : Lavf55.33.100\n    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> pcm_s16le)\nPress [q] to stop, [?] for help\nsize=     158kB time=00:00:10.08 bitrate= 128.1kbits/s    \nvideo:0kB audio:158kB subtitle:0 data:0 global headers:0kB muxing overhead 0.049574%\n```\n\n部分从wav转mp3,遇到一下错误：\n\n```\nInput #0, wav, from '../resource/flac/1.wav':\n  Duration: 00:09:05.67, bitrate: 96 kb/s\n    Stream #0:0: Audio: pcm_u8 ([1][0][0][0] / 0x0001), 12000 Hz, mono, 96 kb/s\n[abuffer @ 0x1a3b520] Unable to parse option value \"(null)\" as sample format\n    Last message repeated 1 times\n[abuffer @ 0x1a3b520] Error setting option sample_fmt to value (null).\n[graph 0 input from stream 0:0 @ 0x1a4fea0] Error applying options to the filter.\nError opening filters!\nConversion failed!\n```\n\n\n解决方法，加上编译参数\n\n```\n   --enable-encoder=pcm_u8 \\\n    --enable-decoder=pcm_u8 \\\n    --enable-muxer=pcm_u8 \\\n    --enable-demuxer=pcm_u8 \\\n```\n\n\n### 支持aac\n**编译**\n\n```\n     --enable-libvo-aacenc \\\n    --enable-libfdk_aac \\\n    --enable-libfaac \\\n    --enable-parser=aac \\\n    --enable-encoder=aac \\\n    --enable-decoder=aac \\\n    --enable-encoder=libfaac \\\n    --enable-encoder=libvo_aacenc \\\n    --enable-encoder=libaacplus \\\n    --enable-encoder=libfdk_aac \\\n    --enable-decoder=libfdk_aac\\\n    --enable-demuxer=aac \\\n    --enable-muxer=adts \\\n```\n\n**测试结果**\n\n```\n ./ffmpeg -i test.mp3 haha.aac\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, adts, to 'haha.aac':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: aac (libfdk_aac), 8000 Hz, mono, s16, 17 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> libfdk_aac)\nPress [q] to stop, [?] for help\nsize=      22kB time=00:00:10.11 bitrate=  18.0kbits/s    \nvideo:0kB audio:22kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i haha.aac aac.mp3\n[aac @ 0x15abd80] Estimating duration from bitrate, this may be inaccurate\nInput #0, aac, from 'haha.aac':\n  Duration: 00:00:10.86, bitrate: 16 kb/s\n    Stream #0:0: Audio: aac, 8000 Hz, mono, fltp, 16 kb/s\nFile 'aac.mp3' already exists. Overwrite ? [y/N] y\nOutput #0, mp3, to 'aac.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp\nStream mapping:\n  Stream #0:0 -> #0:0 (aac -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      11kB time=00:00:10.37 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.482877%\n```\n\n\n\n\n### 支持mp2\n\n**编译**\n\n```\n    --enable-encoder=mp2 \\\n    --enable-decoder=mp2 \\\n    --enable-muxer=mp2 \\\n    --enable-decoder=mp2float \\\n    --enable-encoder=mp2fixed \\\n```\n\n**测试通过**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.mp2\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, mp2, to 'test.mp2':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16, 128 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> mp2)\nPress [q] to stop, [?] for help\nsize=     159kB time=00:00:10.12 bitrate= 128.4kbits/s    \nvideo:0kB audio:159kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp2 mp2.mp3\n[mp3 @ 0x1b77d80] Estimating duration from bitrate, this may be inaccurate\nInput #0, mp3, from 'test.mp2':\n  Duration: 00:00:10.29, start: 0.000000, bitrate: 126 kb/s\n    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16p, 126 kb/s\nFile 'mp2.mp3' already exists. Overwrite ? [y/N] y\nOutput #0, mp3, to 'mp2.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 16000 Hz, mono, s16p\nStream mapping:\n  Stream #0:0 -> #0:0 (mp2 -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      30kB time=00:00:10.15 bitrate=  24.3kbits/s    \nvideo:0kB audio:30kB subtitle:0 data:0 global headers:0kB muxing overhead 0.733568%\n```\n\n### flac 支持\n**编译**\n\n```\n   --enable-encoder=flac \\\n    --enable-decoder=flac \\\n    --enable-demuxer=flac \\\n    --enable-muxer=flac \\\n    --enable-parser=flac \\\n```\n\n**测试通过**\n\n```\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.flac\nffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, flac, to 'test.flac':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: flac, 8000 Hz, mono, s16, 128 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> flac)\nPress [q] to stop, [?] for help\nsize=      92kB time=00:00:10.22 bitrate=  73.4kbits/s    \nvideo:0kB audio:84kB subtitle:0 data:0 global headers:0kB muxing overhead 9.643538%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.flac flac.mp3\nInput #0, flac, from 'test.flac':\n  Metadata:\n    ENCODER         : Lavf55.33.100\n  Duration: 00:00:10.16, bitrate: 73 kb/s\n    Stream #0:0: Audio: flac, 8000 Hz, mono, s16\nOutput #0, mp3, to 'flac.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p\nStream mapping:\n  Stream #0:0 -> #0:0 (flac -> libmp3lame)\nPress [q] to stop, [?] for help\n[libmp3lame @ 0x1a913a0] Trying to remove 576 samples, but the queue is empty\nsize=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%\n```\n\n部分flac转mp3失败的原因之一是ffmpeg没有将图片格式编在里面的缘故，\n在ffmpeg编译时添加以下参数\n\n```\n    --enable-encoder=jpeg2000 \\\n    --enable-encoder=mjpeg \\\n    --enable-encoder=ljpeg \\\n    --enable-encoder=jpegls \\\n    --enable-decoder=jpeg2000 \\\n    --enable-decoder=jpegls \\\n    --enable-decoder=mjpeg \\\n    --enable-decoder=mjpegb \\\n    --enable-muxer=mjpeg \\\n    --enable-demuxer=mjpeg \\\n    --enable-encoder=png \\\n    --enable-decoder=png \\\n    --enable-parser=png \\\n```\n\n加入图片支持后，以上转码依旧报错\n\n```\nInput #0, flac, from 'b1.flac':\n  Duration: 00:08:32.31, bitrate: 871 kb/s\n    Stream #0:0: Audio: flac, 44100 Hz, stereo, s16\n    Stream #0:1: Video: mjpeg, yuvj420p(pc), 542x475 [SAR 96:96 DAR 542:475], 90k tbr, 90k tbn, 90k tbc\n    Metadata:\n      comment         : Cover (front)\nFile 'test.mp3' already exists. Overwrite ? [y/N] y\n'scale' filter not present, cannot convert pixel formats.\nError opening filters!\nConversion failed!\n```\n\n解决方法：\n编译时添加scale的支持\n\n```\n   --enable-swscale \\\n    --enable-swscale-alpha \\\n    --enable-filter=scale \\\n```\n\n\n\n### 支持 ac3\n\n**编译**\n\n```\n    --enable-encoder=ac3 \\\n    --enable-decoder=ac3 \\\n    --enable-encoder=ac3_fixed\\\n    --enable-decoder=atrac3 \\\n    --enable-decoder=atrac3p \\\n    --enable-encoder=eac3 \\\n    --enable-decoder=eac3 \\\n    --enable-muxer=ac3 \\\n    --enable-demuxer=ac3 \\\n    --enable-muxer=eac3 \\\n    --enable-demuxer=eac3 \\\n```\n\n**测试通过**\n\n```\n./ffmpeg -i test.mp3 test.ac3\nInput #0, mp3, from 'test.mp3':\n  Metadata:\n    encoder         : Lavf55.33.100\n  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s\n    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s\nOutput #0, ac3, to 'test.ac3':\n  Metadata:\n    encoder         : Lavf55.33.100\n    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s\nStream mapping:\n  Stream #0:0 -> #0:0 (mp3 -> ac3)\nPress [q] to stop, [?] for help\nsize=     119kB time=00:00:10.14 bitrate=  96.3kbits/s    \nvideo:0kB audio:119kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%\nfun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.ac3 ac3.mp3\n[ac3 @ 0x15a7d80] Estimating duration from bitrate, this may be inaccurate\nInput #0, ac3, from 'test.ac3':\n  Duration: 00:00:10.18, start: 0.000000, bitrate: 96 kb/s\n    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s\nOutput #0, mp3, to 'ac3.mp3':\n  Metadata:\n    TSSE            : Lavf55.33.100\n    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp\nStream mapping:\n  Stream #0:0 -> #0:0 (ac3 -> libmp3lame)\nPress [q] to stop, [?] for help\nsize=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    \nvideo:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%\n```\n\n### 支持wma/wmv\n\n编译参数\n\n```\n --enable-decoder=wmalossless \\\n    --enable-decoder=wmapro \\\n    --enable-encoder=wmav1 \\\n    --enable-decoder=wmav1 \\\n    --enable-encoder=wmav2 \\\n    --enable-decoder=wmav2 \\\n    --enable-decoder=wmavoice \\\n    --enable-demuxer=xwma \\\n    --enable-demuxer=avi \\\n    --enable-muxer=avi \\\n    --enable-demuxer=asf \\\n    --enable-muxer=asf \\\n    --enable-encoder=wmv1 \\\n    --enable-decoder=wmv1 \\\n    --enable-encoder=wmv2 \\\n    --enable-decoder=wmv2 \\\n    --enable-decoder=wmv3 \\\n    --enable-decoder=wmv3_crystalhd \\\n    --enable-decoder=wmv3_vdpau \\\n    --enable-decoder=wmv3image \\\n```\n\n### 本次编译涉及所有配置项\n\n```\n./configure \\\n    --extra-cflags='-I/usr/include -static' \\\n    --extra-ldflags='-I/usr/lib -static' \\\n    --disable-debug \\\n    --disable-shared \\\n    --enable-static \\\n    --enable-gpl \\\n    --enable-libmp3lame \\\n    --enable-nonfree \\\n    --disable-logging \\\n    --disable-avdevice \\\n    --disable-swscale \\\n    --disable-postproc \\\n    --disable-dxva2 \\\n    --disable-vaapi \\\n    --disable-vda \\\n    --disable-vdpau \\\n    --disable-everything \\\n    --disable-runtime-cpudetect \\\n    --disable-swscale-alpha \\\n    --disable-ffplay \\\n    --disable-ffprobe \\\n    --disable-ffserver \\\n    --disable-doc \\\n    --disable-htmlpages \\\n    --disable-manpages \\\n    --disable-podpages \\\n    --disable-txtpages \\\n    --enable-protocol=file \\\n    --enable-protocol=pipe \\\n    --enable-protocol=http \\\n    --enable-protocol=https \\\n    --enable-filter=aresample \\\n   --enable-decoder=mp3 \\\n    --enable-demuxer=mp3 \\\n    --enable-parser=mpegaudio \\\n    --enable-muxer=mp3 \\\n    --enable-encoder=libmp3lame \\\n\t--enable-version3 \\\n    --enable-libvo-aacenc \\\n    --enable-libfdk_aac \\\n    --enable-libfdk-aac \\\n    --enable-libfaac \\\n    --enable-parser=aac \\\n    --enable-encoder=aac \\\n    --enable-decoder=aac \\\n    --enable-encoder=libfaac \\\n    --enable-encoder=libvo_aacenc \\\n    --enable-encoder=libaacplus \\\n    --enable-encoder=libfdk_aac \\\n    --enable-decoder=libfdk_aac\\\n\t--enable-demuxer=aac \\\n    --enable-muxer=adts \\\n    --enable-libopencore-amrnb \\\n\t--enable-libopencore-amrwb \\\n\t--enable-libvo_amrwbenc \\\n    --enable-encoder=libvo_amrwbenc \\\n    --enable-decoder=libopencore_amrnb \\\n\t--enable-encoder=libopencore_amrnb \\\n    --enable-decoder=libopencore_amrwb \\\n    --enable-decoder=amrnb \\\n    --enable-decoder=amrwb \\\n\t--enable-muxer=amr \\\n    --enable-demuxer=amr \\\n    --enable-libwavpack \\\n    --enable-muxer=wav \\\n    --enable-demuxer=wav \\\n    --enable-decoder=wavpack \\\n    --enable-encoder=wavpack \\\n    --enable-encoder=pcm_s16le \\\n    --enable-decoder=pcm_s16le \\\n    --enable-libvorbis \\\n    --enable-parser=vorbis \\\n    --enable-encoder=vorbis \\\n    --enable-decoder=vorbis \\\n    --enable-encoder=libvorbis \\\n    --enable-decoder=libvorbis \\\n    --enable-muxer=ogg \\\n    --enable-demuxer=ogg \\\n    --enable-decoder=mp1float \\\n    --enable-decoder=mp1 \\\n    --enable-encoder=mp2 \\\n    --enable-decoder=mp2 \\\n    --enable-muxer=mp2 \\\n    --enable-decoder=mp2float \\\n    --enable-encoder=mp2fixed \\\n    --enable-encoder=flac \\\n    --enable-decoder=flac \\\n    --enable-demuxer=flac \\\n    --enable-muxer=flac \\\n    --enable-parser=flac \\\n    --enable-encoder=ac3 \\\n    --enable-decoder=ac3 \\\n    --enable-encoder=ac3_fixed\\\n    --enable-decoder=atrac3 \\\n    --enable-decoder=atrac3p \\\n    --enable-encoder=eac3 \\\n    --enable-decoder=eac3 \\\n    --enable-muxer=ac3 \\\n    --enable-demuxer=ac3 \\\n    --enable-muxer=eac3 \\\n    --enable-demuxer=eac3 \\\n    --enable-decoder=wmalossless \\\n    --enable-decoder=wmapro \\\n    --enable-encoder=wmav1 \\\n    --enable-decoder=wmav1 \\\n    --enable-encoder=wmav2 \\\n    --enable-decoder=wmav2 \\\n    --enable-decoder=wmavoice \\\n    --enable-demuxer=xwma \\\n    --enable-demuxer=avi \\\n    --enable-muxer=avi \\\n    --enable-demuxer=asf \\\n    --enable-muxer=asf \\\n    --enable-encoder=wmv1 \\\n    --enable-decoder=wmv1 \\\n    --enable-encoder=wmv2 \\\n    --enable-decoder=wmv2 \\\n    --enable-decoder=wmv3 \\\n    --enable-decoder=wmv3_crystalhd \\\n    --enable-decoder=wmv3_vdpau \\\n    --enable-decoder=wmv3image \\\n        --enable-encoder=jpeg2000 \\\n    --enable-encoder=mjpeg \\\n    --enable-encoder=ljpeg \\\n    --enable-encoder=jpegls \\\n    --enable-decoder=jpeg2000 \\\n    --enable-decoder=jpegls \\\n    --enable-decoder=mjpeg \\\n    --enable-decoder=mjpegb \\\n    --enable-muxer=mjpeg \\\n    --enable-demuxer=mjpeg \\\n    --enable-encoder=png \\\n    --enable-decoder=png \\\n    --enable-parser=png \\\n    --enable-swscale \\\n    --enable-swscale-alpha \\\n    --enable-filter=scale \\\n    --enable-encoder=pcm_u8 \\\n    --enable-decoder=pcm_u8 \\\n    --enable-muxer=pcm_u8 \\\n    --enable-demuxer=pcm_u8 \\\n    --enable-small \\\n\n```\n","slug":"2015-03-16-ffmpeg-audio","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhr003eqj7l1m5as64t","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2> <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\"><br><br></div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\"><br><br><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#概述\">概述</a></li><br><li><a href=\"#依赖库安装\">依赖库安装</a><ul><br><li><a href=\"#yasm130\">yasm1.3.0</a></li><br><li><a href=\"#安装mp3依赖库\">安装mp3依赖库</a></li><br><li><a href=\"#error-libopencoreamrnb-not-found\">ERROR: libopencore_amrnb not found</a></li><br><li><a href=\"#error-libvoamrwbenc-not-found\">ERROR: libvo_amrwbenc not found</a></li><br><li><a href=\"#error-libwavpack-not-found\">ERROR: libwavpack not found</a></li><br><li><a href=\"#error-libaacplus-200-not-found\">ERROR: libaacplus &gt;= 2.0.0 not found</a></li><br><li><a href=\"#error-libfdkaac-not-found\">ERROR: libfdk_aac not found</a></li><br><li><a href=\"#error-libvoaacenc-not-found\">ERROR: libvo_aacenc not found</a></li><br></ul><br></li><br><li><a href=\"#编译安装ffmpeg\">编译安装ffmpeg</a><ul><br><li><a href=\"#常用编译方式小结\">常用编译方式小结</a></li><br><li><a href=\"#支持vorbis\">支持vorbis</a></li><br><li><a href=\"#支持wav\">支持wav</a></li><br><li><a href=\"#支持aac\">支持aac</a></li><br><li><a href=\"#支持mp2\">支持mp2</a></li><br><li><a href=\"#flac-支持\">flac 支持</a></li><br><li><a href=\"#支持-ac3\">支持 ac3</a></li><br><li><a href=\"#支持wmawmv\">支持wma/wmv</a></li><br><li><a href=\"#本次编译涉及所有配置项\">本次编译涉及所有配置项</a></li><br></ul><br></li><br></ul><br><br><br></div><br></div><br></div></div>\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本文将详细介绍编译安装ffmpeg,该ffmpeg将支持目前业界各主流音频格式，主要功能为支持mp2，mp3，flac，vorbis，wav，aac，amr，ac3，wma，wmv格式转为mp3/aac/amr。</p>\n<h2 id=\"依赖库安装\"><a href=\"#依赖库安装\" class=\"headerlink\" title=\"依赖库安装\"></a>依赖库安装</h2><h3 id=\"yasm1-3-0\"><a href=\"#yasm1-3-0\" class=\"headerlink\" title=\"yasm1.3.0\"></a>yasm1.3.0</h3><p>编译安装 <a href=\"http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz\" target=\"_blank\" rel=\"external\">yasm-1.3.0.tar.gz</a> </p>\n<h3 id=\"安装mp3依赖库\"><a href=\"#安装mp3依赖库\" class=\"headerlink\" title=\"安装mp3依赖库\"></a>安装mp3依赖库</h3><p>   错误</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: libmp3lame &gt;= 3.98.3 not found</span><br></pre></td></tr></table></figure>\n<p>  安装：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libmp3lame-dev - MP3 encoding library (development)</span><br><span class=\"line\">apt-get install   libmp3lame-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libopencore-amrnb-not-found\"><a href=\"#ERROR-libopencore-amrnb-not-found\" class=\"headerlink\" title=\"ERROR: libopencore_amrnb not found\"></a>ERROR: libopencore_amrnb not found</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libx264-dev libxvidcore-dev libopencore-amrwb-dev libopencore-amrnb-dev libfaad-dev libfaac-dev libmp3lame-dev \\</span><br><span class=\"line\">libtwolame-dev liba52-0.7.4-dev libcddb2-dev libcdaudio-dev libcdio-cdda-dev libvorbis-dev libopenjpeg-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libvo-amrwbenc-not-found\"><a href=\"#ERROR-libvo-amrwbenc-not-found\" class=\"headerlink\" title=\"ERROR: libvo_amrwbenc not found\"></a>ERROR: libvo_amrwbenc not found</h3><p><a href=\"http://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/</a></p>\n<h3 id=\"ERROR-libwavpack-not-found\"><a href=\"#ERROR-libwavpack-not-found\" class=\"headerlink\" title=\"ERROR: libwavpack not found\"></a>ERROR: libwavpack not found</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libwavpack-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libaacplus-gt-2-0-0-not-found\"><a href=\"#ERROR-libaacplus-gt-2-0-0-not-found\" class=\"headerlink\" title=\"ERROR: libaacplus &gt;= 2.0.0 not found\"></a>ERROR: libaacplus &gt;= 2.0.0 not found</h3><p><a href=\"https://trac.ffmpeg.org/wiki/How%20to%20quickly%20compile%20libaacplus\" target=\"_blank\" rel=\"external\">ffmpeg官网解决方案</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># apt-get install libfftw3-dev pkg-config autoconf automake libtool unzip</span><br><span class=\"line\">$ wget http://tipok.org.ua/downloads/media/aacplus/libaacplus/libaacplus-2.0.2.tar.gz</span><br><span class=\"line\">$ tar -xzf libaacplus-2.0.2.tar.gz</span><br><span class=\"line\">$ cd libaacplus-2.0.2</span><br><span class=\"line\">$ ./autogen.sh --enable-shared --enable-static</span><br><span class=\"line\">$ make</span><br><span class=\"line\"># make install</span><br><span class=\"line\"># ldconfig</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libfdk-aac-not-found\"><a href=\"#ERROR-libfdk-aac-not-found\" class=\"headerlink\" title=\"ERROR: libfdk_aac not found\"></a>ERROR: libfdk_aac not found</h3><p>编译安装<a href=\"http://sourceforge.net/projects/opencore-amr/?source=directory\" target=\"_blank\" rel=\"external\">libfdk_aac</a></p>\n<h3 id=\"ERROR-libvo-aacenc-not-found\"><a href=\"#ERROR-libvo-aacenc-not-found\" class=\"headerlink\" title=\"ERROR: libvo_aacenc not found\"></a>ERROR: libvo_aacenc not found</h3><p>编译安装<a href=\"http://sourceforge.net/projects/opencore-amr/files/vo-aacenc/vo-aacenc-0.1.2.tar.gz/download\" target=\"_blank\" rel=\"external\">vo-aacenc-0.1.2.tar.gz</a></p>\n<h2 id=\"编译安装ffmpeg\"><a href=\"#编译安装ffmpeg\" class=\"headerlink\" title=\"编译安装ffmpeg\"></a>编译安装ffmpeg</h2><h3 id=\"常用编译方式小结\"><a href=\"#常用编译方式小结\" class=\"headerlink\" title=\"常用编译方式小结\"></a>常用编译方式小结</h3><p>1.编译时设置通用参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">    --extra-cflags=&apos;-I/usr/include -static&apos; \\</span><br><span class=\"line\">    --extra-ldflags=&apos;-I/usr/lib -static&apos; \\</span><br><span class=\"line\">    --disable-debug \\</span><br><span class=\"line\">    --disable-shared \\</span><br><span class=\"line\">    --enable-static \\</span><br><span class=\"line\">    --enable-gpl \\</span><br><span class=\"line\">    --enable-libmp3lame \\</span><br><span class=\"line\">    --enable-nonfree \\</span><br><span class=\"line\">    --disable-logging \\</span><br><span class=\"line\">    --disable-avdevice \\</span><br><span class=\"line\">    --disable-swscale \\</span><br><span class=\"line\">    --disable-postproc \\</span><br><span class=\"line\">    --disable-dxva2 \\</span><br><span class=\"line\">    --disable-vaapi \\</span><br><span class=\"line\">    --disable-vda \\</span><br><span class=\"line\">    --disable-vdpau \\</span><br><span class=\"line\">    --disable-everything \\</span><br><span class=\"line\">    --disable-runtime-cpudetect \\</span><br><span class=\"line\">    --disable-swscale-alpha \\</span><br><span class=\"line\">    --disable-ffplay \\</span><br><span class=\"line\">    --disable-ffprobe \\</span><br><span class=\"line\">    --disable-ffserver \\</span><br><span class=\"line\">    --disable-doc \\</span><br><span class=\"line\">    --disable-htmlpages \\</span><br><span class=\"line\">    --disable-manpages \\</span><br><span class=\"line\">    --disable-podpages \\</span><br><span class=\"line\">    --disable-txtpages \\</span><br><span class=\"line\">    --enable-protocol=file \\</span><br><span class=\"line\">    --enable-protocol=pipe \\</span><br><span class=\"line\">    --enable-protocol=http \\</span><br><span class=\"line\">    --enable-protocol=https \\</span><br><span class=\"line\">    --enable-filter=aresample \\</span><br></pre></td></tr></table></figure>\n<p>2.从第一步生成的config.h中，grep 想要安装的格式关键字，如想要安装mp3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ grep MP3 config.h </span><br><span class=\"line\">#define CONFIG_LIBMP3LAME 1</span><br><span class=\"line\">#define CONFIG_MP3_HEADER_DECOMPRESS_BSF 0</span><br><span class=\"line\">#define CONFIG_MP3_DECODER 1</span><br><span class=\"line\">#define CONFIG_MP3FLOAT_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ADU_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ADUFLOAT_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ON4_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ON4FLOAT_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3_DEMUXER 1</span><br><span class=\"line\">#define CONFIG_LIBMP3LAME_ENCODER 1</span><br><span class=\"line\">#define CONFIG_MP3_MUXER 1</span><br></pre></td></tr></table></figure>\n<p>3.设置诸如encoder,decoder,muxer,demuxer对应项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-libmp3lame \\</span><br><span class=\"line\">--enable-decoder=mp3 \\</span><br><span class=\"line\"> --enable-demuxer=mp3 \\</span><br><span class=\"line\"> --enable-muxer=mp3 \\</span><br><span class=\"line\"> --enable-encoder=libmp3lame \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持vorbis\"><a href=\"#支持vorbis\" class=\"headerlink\" title=\"支持vorbis\"></a>支持vorbis</h3><p><strong>编译参数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-libvorbis \\</span><br><span class=\"line\">--enable-parser=vorbis \\</span><br><span class=\"line\">--enable-encoder=vorbis \\</span><br><span class=\"line\">--enable-decoder=vorbis \\</span><br><span class=\"line\">--enable-encoder=libvorbis \\</span><br><span class=\"line\">--enable-decoder=libvorbis \\</span><br><span class=\"line\">--enable-muxer=ogg \\</span><br><span class=\"line\">--enable-demuxer=ogg \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试成功</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.ogg</span><br><span class=\"line\">ffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers</span><br><span class=\"line\">  built on Mar 14 2015 01:24:30 with gcc 4.9.1 (Ubuntu 4.9.1-16ubuntu6)</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, ogg, to &apos;test.ogg&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: vorbis (libvorbis), 8000 Hz, mono, fltp</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      encoder         : Lavf55.33.100</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; libvorbis)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      25kB time=00:00:10.08 bitrate=  20.3kbits/s    </span><br><span class=\"line\">video:0kB audio:22kB subtitle:0 data:0 global headers:3kB muxing overhead 2.472099%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i  test.ogg ogg.mp3</span><br><span class=\"line\">Input #0, ogg, from &apos;test.ogg&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.09, start: 0.000000, bitrate: 20 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: vorbis, 8000 Hz, mono, fltp, 22 kb/s</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      ENCODER         : Lavf55.33.100</span><br><span class=\"line\">Output #0, mp3, to &apos;ogg.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      ENCODER         : Lavf55.33.100</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (vorbis -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持wav\"><a href=\"#支持wav\" class=\"headerlink\" title=\"支持wav\"></a>支持wav</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-libwavpack \\</span><br><span class=\"line\">   --enable-muxer=wav \\</span><br><span class=\"line\">   --enable-demuxer=wav \\</span><br><span class=\"line\">   --enable-decoder=wavpack \\</span><br><span class=\"line\">   --enable-encoder=wavpack \\</span><br><span class=\"line\">   --enable-decoder=wav \\</span><br><span class=\"line\">   --enable-encoder=wav \\</span><br><span class=\"line\">   --enable-encoder=pcm_s16le \\</span><br><span class=\"line\">   --enable-decoder=pcm_s16le \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试成功</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.wav wav.mp3</span><br><span class=\"line\">Guessed Channel Layout for  Input Stream #0.0 : mono</span><br><span class=\"line\">Input #0, wav, from &apos;test.wav&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.09, bitrate: 128 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Output #0, mp3, to &apos;wav.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (pcm_s16le -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">[libmp3lame @ 0x29fe940] Trying to remove 576 samples, but the queue is empty</span><br><span class=\"line\">size=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 haha.wav</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">File &apos;haha.wav&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">Output #0, wav, to &apos;haha.wav&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    ISFT            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; pcm_s16le)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=     158kB time=00:00:10.08 bitrate= 128.1kbits/s    </span><br><span class=\"line\">video:0kB audio:158kB subtitle:0 data:0 global headers:0kB muxing overhead 0.049574%</span><br></pre></td></tr></table></figure>\n<p>部分从wav转mp3,遇到一下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input #0, wav, from &apos;../resource/flac/1.wav&apos;:</span><br><span class=\"line\">  Duration: 00:09:05.67, bitrate: 96 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: pcm_u8 ([1][0][0][0] / 0x0001), 12000 Hz, mono, 96 kb/s</span><br><span class=\"line\">[abuffer @ 0x1a3b520] Unable to parse option value &quot;(null)&quot; as sample format</span><br><span class=\"line\">    Last message repeated 1 times</span><br><span class=\"line\">[abuffer @ 0x1a3b520] Error setting option sample_fmt to value (null).</span><br><span class=\"line\">[graph 0 input from stream 0:0 @ 0x1a4fea0] Error applying options to the filter.</span><br><span class=\"line\">Error opening filters!</span><br><span class=\"line\">Conversion failed!</span><br></pre></td></tr></table></figure>\n<p>解决方法，加上编译参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=pcm_u8 \\</span><br><span class=\"line\"> --enable-decoder=pcm_u8 \\</span><br><span class=\"line\"> --enable-muxer=pcm_u8 \\</span><br><span class=\"line\"> --enable-demuxer=pcm_u8 \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持aac\"><a href=\"#支持aac\" class=\"headerlink\" title=\"支持aac\"></a>支持aac</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> --enable-libvo-aacenc \\</span><br><span class=\"line\">--enable-libfdk_aac \\</span><br><span class=\"line\">--enable-libfaac \\</span><br><span class=\"line\">--enable-parser=aac \\</span><br><span class=\"line\">--enable-encoder=aac \\</span><br><span class=\"line\">--enable-decoder=aac \\</span><br><span class=\"line\">--enable-encoder=libfaac \\</span><br><span class=\"line\">--enable-encoder=libvo_aacenc \\</span><br><span class=\"line\">--enable-encoder=libaacplus \\</span><br><span class=\"line\">--enable-encoder=libfdk_aac \\</span><br><span class=\"line\">--enable-decoder=libfdk_aac\\</span><br><span class=\"line\">--enable-demuxer=aac \\</span><br><span class=\"line\">--enable-muxer=adts \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ./ffmpeg -i test.mp3 haha.aac</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, adts, to &apos;haha.aac&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: aac (libfdk_aac), 8000 Hz, mono, s16, 17 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; libfdk_aac)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      22kB time=00:00:10.11 bitrate=  18.0kbits/s    </span><br><span class=\"line\">video:0kB audio:22kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i haha.aac aac.mp3</span><br><span class=\"line\">[aac @ 0x15abd80] Estimating duration from bitrate, this may be inaccurate</span><br><span class=\"line\">Input #0, aac, from &apos;haha.aac&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.86, bitrate: 16 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: aac, 8000 Hz, mono, fltp, 16 kb/s</span><br><span class=\"line\">File &apos;aac.mp3&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">Output #0, mp3, to &apos;aac.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (aac -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      11kB time=00:00:10.37 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.482877%</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持mp2\"><a href=\"#支持mp2\" class=\"headerlink\" title=\"支持mp2\"></a>支持mp2</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=mp2 \\</span><br><span class=\"line\">--enable-decoder=mp2 \\</span><br><span class=\"line\">--enable-muxer=mp2 \\</span><br><span class=\"line\">--enable-decoder=mp2float \\</span><br><span class=\"line\">--enable-encoder=mp2fixed \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试通过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.mp2</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, mp2, to &apos;test.mp2&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; mp2)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=     159kB time=00:00:10.12 bitrate= 128.4kbits/s    </span><br><span class=\"line\">video:0kB audio:159kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp2 mp2.mp3</span><br><span class=\"line\">[mp3 @ 0x1b77d80] Estimating duration from bitrate, this may be inaccurate</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp2&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.29, start: 0.000000, bitrate: 126 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16p, 126 kb/s</span><br><span class=\"line\">File &apos;mp2.mp3&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">Output #0, mp3, to &apos;mp2.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 16000 Hz, mono, s16p</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp2 -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      30kB time=00:00:10.15 bitrate=  24.3kbits/s    </span><br><span class=\"line\">video:0kB audio:30kB subtitle:0 data:0 global headers:0kB muxing overhead 0.733568%</span><br></pre></td></tr></table></figure>\n<h3 id=\"flac-支持\"><a href=\"#flac-支持\" class=\"headerlink\" title=\"flac 支持\"></a>flac 支持</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=flac \\</span><br><span class=\"line\"> --enable-decoder=flac \\</span><br><span class=\"line\"> --enable-demuxer=flac \\</span><br><span class=\"line\"> --enable-muxer=flac \\</span><br><span class=\"line\"> --enable-parser=flac \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试通过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.flac</span><br><span class=\"line\">ffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, flac, to &apos;test.flac&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: flac, 8000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; flac)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      92kB time=00:00:10.22 bitrate=  73.4kbits/s    </span><br><span class=\"line\">video:0kB audio:84kB subtitle:0 data:0 global headers:0kB muxing overhead 9.643538%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.flac flac.mp3</span><br><span class=\"line\">Input #0, flac, from &apos;test.flac&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    ENCODER         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.16, bitrate: 73 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: flac, 8000 Hz, mono, s16</span><br><span class=\"line\">Output #0, mp3, to &apos;flac.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (flac -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">[libmp3lame @ 0x1a913a0] Trying to remove 576 samples, but the queue is empty</span><br><span class=\"line\">size=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%</span><br></pre></td></tr></table></figure>\n<p>部分flac转mp3失败的原因之一是ffmpeg没有将图片格式编在里面的缘故，<br>在ffmpeg编译时添加以下参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=jpeg2000 \\</span><br><span class=\"line\">--enable-encoder=mjpeg \\</span><br><span class=\"line\">--enable-encoder=ljpeg \\</span><br><span class=\"line\">--enable-encoder=jpegls \\</span><br><span class=\"line\">--enable-decoder=jpeg2000 \\</span><br><span class=\"line\">--enable-decoder=jpegls \\</span><br><span class=\"line\">--enable-decoder=mjpeg \\</span><br><span class=\"line\">--enable-decoder=mjpegb \\</span><br><span class=\"line\">--enable-muxer=mjpeg \\</span><br><span class=\"line\">--enable-demuxer=mjpeg \\</span><br><span class=\"line\">--enable-encoder=png \\</span><br><span class=\"line\">--enable-decoder=png \\</span><br><span class=\"line\">--enable-parser=png \\</span><br></pre></td></tr></table></figure>\n<p>加入图片支持后，以上转码依旧报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input #0, flac, from &apos;b1.flac&apos;:</span><br><span class=\"line\">  Duration: 00:08:32.31, bitrate: 871 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: flac, 44100 Hz, stereo, s16</span><br><span class=\"line\">    Stream #0:1: Video: mjpeg, yuvj420p(pc), 542x475 [SAR 96:96 DAR 542:475], 90k tbr, 90k tbn, 90k tbc</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      comment         : Cover (front)</span><br><span class=\"line\">File &apos;test.mp3&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">&apos;scale&apos; filter not present, cannot convert pixel formats.</span><br><span class=\"line\">Error opening filters!</span><br><span class=\"line\">Conversion failed!</span><br></pre></td></tr></table></figure>\n<p>解决方法：<br>编译时添加scale的支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-swscale \\</span><br><span class=\"line\"> --enable-swscale-alpha \\</span><br><span class=\"line\"> --enable-filter=scale \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持-ac3\"><a href=\"#支持-ac3\" class=\"headerlink\" title=\"支持 ac3\"></a>支持 ac3</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=ac3 \\</span><br><span class=\"line\">--enable-decoder=ac3 \\</span><br><span class=\"line\">--enable-encoder=ac3_fixed\\</span><br><span class=\"line\">--enable-decoder=atrac3 \\</span><br><span class=\"line\">--enable-decoder=atrac3p \\</span><br><span class=\"line\">--enable-encoder=eac3 \\</span><br><span class=\"line\">--enable-decoder=eac3 \\</span><br><span class=\"line\">--enable-muxer=ac3 \\</span><br><span class=\"line\">--enable-demuxer=ac3 \\</span><br><span class=\"line\">--enable-muxer=eac3 \\</span><br><span class=\"line\">--enable-demuxer=eac3 \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试通过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ffmpeg -i test.mp3 test.ac3</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, ac3, to &apos;test.ac3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; ac3)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=     119kB time=00:00:10.14 bitrate=  96.3kbits/s    </span><br><span class=\"line\">video:0kB audio:119kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.ac3 ac3.mp3</span><br><span class=\"line\">[ac3 @ 0x15a7d80] Estimating duration from bitrate, this may be inaccurate</span><br><span class=\"line\">Input #0, ac3, from &apos;test.ac3&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.18, start: 0.000000, bitrate: 96 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s</span><br><span class=\"line\">Output #0, mp3, to &apos;ac3.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (ac3 -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持wma-wmv\"><a href=\"#支持wma-wmv\" class=\"headerlink\" title=\"支持wma/wmv\"></a>支持wma/wmv</h3><p>编译参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-decoder=wmalossless \\</span><br><span class=\"line\">   --enable-decoder=wmapro \\</span><br><span class=\"line\">   --enable-encoder=wmav1 \\</span><br><span class=\"line\">   --enable-decoder=wmav1 \\</span><br><span class=\"line\">   --enable-encoder=wmav2 \\</span><br><span class=\"line\">   --enable-decoder=wmav2 \\</span><br><span class=\"line\">   --enable-decoder=wmavoice \\</span><br><span class=\"line\">   --enable-demuxer=xwma \\</span><br><span class=\"line\">   --enable-demuxer=avi \\</span><br><span class=\"line\">   --enable-muxer=avi \\</span><br><span class=\"line\">   --enable-demuxer=asf \\</span><br><span class=\"line\">   --enable-muxer=asf \\</span><br><span class=\"line\">   --enable-encoder=wmv1 \\</span><br><span class=\"line\">   --enable-decoder=wmv1 \\</span><br><span class=\"line\">   --enable-encoder=wmv2 \\</span><br><span class=\"line\">   --enable-decoder=wmv2 \\</span><br><span class=\"line\">   --enable-decoder=wmv3 \\</span><br><span class=\"line\">   --enable-decoder=wmv3_crystalhd \\</span><br><span class=\"line\">   --enable-decoder=wmv3_vdpau \\</span><br><span class=\"line\">   --enable-decoder=wmv3image \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"本次编译涉及所有配置项\"><a href=\"#本次编译涉及所有配置项\" class=\"headerlink\" title=\"本次编译涉及所有配置项\"></a>本次编译涉及所有配置项</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">    --extra-cflags=&apos;-I/usr/include -static&apos; \\</span><br><span class=\"line\">    --extra-ldflags=&apos;-I/usr/lib -static&apos; \\</span><br><span class=\"line\">    --disable-debug \\</span><br><span class=\"line\">    --disable-shared \\</span><br><span class=\"line\">    --enable-static \\</span><br><span class=\"line\">    --enable-gpl \\</span><br><span class=\"line\">    --enable-libmp3lame \\</span><br><span class=\"line\">    --enable-nonfree \\</span><br><span class=\"line\">    --disable-logging \\</span><br><span class=\"line\">    --disable-avdevice \\</span><br><span class=\"line\">    --disable-swscale \\</span><br><span class=\"line\">    --disable-postproc \\</span><br><span class=\"line\">    --disable-dxva2 \\</span><br><span class=\"line\">    --disable-vaapi \\</span><br><span class=\"line\">    --disable-vda \\</span><br><span class=\"line\">    --disable-vdpau \\</span><br><span class=\"line\">    --disable-everything \\</span><br><span class=\"line\">    --disable-runtime-cpudetect \\</span><br><span class=\"line\">    --disable-swscale-alpha \\</span><br><span class=\"line\">    --disable-ffplay \\</span><br><span class=\"line\">    --disable-ffprobe \\</span><br><span class=\"line\">    --disable-ffserver \\</span><br><span class=\"line\">    --disable-doc \\</span><br><span class=\"line\">    --disable-htmlpages \\</span><br><span class=\"line\">    --disable-manpages \\</span><br><span class=\"line\">    --disable-podpages \\</span><br><span class=\"line\">    --disable-txtpages \\</span><br><span class=\"line\">    --enable-protocol=file \\</span><br><span class=\"line\">    --enable-protocol=pipe \\</span><br><span class=\"line\">    --enable-protocol=http \\</span><br><span class=\"line\">    --enable-protocol=https \\</span><br><span class=\"line\">    --enable-filter=aresample \\</span><br><span class=\"line\">   --enable-decoder=mp3 \\</span><br><span class=\"line\">    --enable-demuxer=mp3 \\</span><br><span class=\"line\">    --enable-parser=mpegaudio \\</span><br><span class=\"line\">    --enable-muxer=mp3 \\</span><br><span class=\"line\">    --enable-encoder=libmp3lame \\</span><br><span class=\"line\">\t--enable-version3 \\</span><br><span class=\"line\">    --enable-libvo-aacenc \\</span><br><span class=\"line\">    --enable-libfdk_aac \\</span><br><span class=\"line\">    --enable-libfdk-aac \\</span><br><span class=\"line\">    --enable-libfaac \\</span><br><span class=\"line\">    --enable-parser=aac \\</span><br><span class=\"line\">    --enable-encoder=aac \\</span><br><span class=\"line\">    --enable-decoder=aac \\</span><br><span class=\"line\">    --enable-encoder=libfaac \\</span><br><span class=\"line\">    --enable-encoder=libvo_aacenc \\</span><br><span class=\"line\">    --enable-encoder=libaacplus \\</span><br><span class=\"line\">    --enable-encoder=libfdk_aac \\</span><br><span class=\"line\">    --enable-decoder=libfdk_aac\\</span><br><span class=\"line\">\t--enable-demuxer=aac \\</span><br><span class=\"line\">    --enable-muxer=adts \\</span><br><span class=\"line\">    --enable-libopencore-amrnb \\</span><br><span class=\"line\">\t--enable-libopencore-amrwb \\</span><br><span class=\"line\">\t--enable-libvo_amrwbenc \\</span><br><span class=\"line\">    --enable-encoder=libvo_amrwbenc \\</span><br><span class=\"line\">    --enable-decoder=libopencore_amrnb \\</span><br><span class=\"line\">\t--enable-encoder=libopencore_amrnb \\</span><br><span class=\"line\">    --enable-decoder=libopencore_amrwb \\</span><br><span class=\"line\">    --enable-decoder=amrnb \\</span><br><span class=\"line\">    --enable-decoder=amrwb \\</span><br><span class=\"line\">\t--enable-muxer=amr \\</span><br><span class=\"line\">    --enable-demuxer=amr \\</span><br><span class=\"line\">    --enable-libwavpack \\</span><br><span class=\"line\">    --enable-muxer=wav \\</span><br><span class=\"line\">    --enable-demuxer=wav \\</span><br><span class=\"line\">    --enable-decoder=wavpack \\</span><br><span class=\"line\">    --enable-encoder=wavpack \\</span><br><span class=\"line\">    --enable-encoder=pcm_s16le \\</span><br><span class=\"line\">    --enable-decoder=pcm_s16le \\</span><br><span class=\"line\">    --enable-libvorbis \\</span><br><span class=\"line\">    --enable-parser=vorbis \\</span><br><span class=\"line\">    --enable-encoder=vorbis \\</span><br><span class=\"line\">    --enable-decoder=vorbis \\</span><br><span class=\"line\">    --enable-encoder=libvorbis \\</span><br><span class=\"line\">    --enable-decoder=libvorbis \\</span><br><span class=\"line\">    --enable-muxer=ogg \\</span><br><span class=\"line\">    --enable-demuxer=ogg \\</span><br><span class=\"line\">    --enable-decoder=mp1float \\</span><br><span class=\"line\">    --enable-decoder=mp1 \\</span><br><span class=\"line\">    --enable-encoder=mp2 \\</span><br><span class=\"line\">    --enable-decoder=mp2 \\</span><br><span class=\"line\">    --enable-muxer=mp2 \\</span><br><span class=\"line\">    --enable-decoder=mp2float \\</span><br><span class=\"line\">    --enable-encoder=mp2fixed \\</span><br><span class=\"line\">    --enable-encoder=flac \\</span><br><span class=\"line\">    --enable-decoder=flac \\</span><br><span class=\"line\">    --enable-demuxer=flac \\</span><br><span class=\"line\">    --enable-muxer=flac \\</span><br><span class=\"line\">    --enable-parser=flac \\</span><br><span class=\"line\">    --enable-encoder=ac3 \\</span><br><span class=\"line\">    --enable-decoder=ac3 \\</span><br><span class=\"line\">    --enable-encoder=ac3_fixed\\</span><br><span class=\"line\">    --enable-decoder=atrac3 \\</span><br><span class=\"line\">    --enable-decoder=atrac3p \\</span><br><span class=\"line\">    --enable-encoder=eac3 \\</span><br><span class=\"line\">    --enable-decoder=eac3 \\</span><br><span class=\"line\">    --enable-muxer=ac3 \\</span><br><span class=\"line\">    --enable-demuxer=ac3 \\</span><br><span class=\"line\">    --enable-muxer=eac3 \\</span><br><span class=\"line\">    --enable-demuxer=eac3 \\</span><br><span class=\"line\">    --enable-decoder=wmalossless \\</span><br><span class=\"line\">    --enable-decoder=wmapro \\</span><br><span class=\"line\">    --enable-encoder=wmav1 \\</span><br><span class=\"line\">    --enable-decoder=wmav1 \\</span><br><span class=\"line\">    --enable-encoder=wmav2 \\</span><br><span class=\"line\">    --enable-decoder=wmav2 \\</span><br><span class=\"line\">    --enable-decoder=wmavoice \\</span><br><span class=\"line\">    --enable-demuxer=xwma \\</span><br><span class=\"line\">    --enable-demuxer=avi \\</span><br><span class=\"line\">    --enable-muxer=avi \\</span><br><span class=\"line\">    --enable-demuxer=asf \\</span><br><span class=\"line\">    --enable-muxer=asf \\</span><br><span class=\"line\">    --enable-encoder=wmv1 \\</span><br><span class=\"line\">    --enable-decoder=wmv1 \\</span><br><span class=\"line\">    --enable-encoder=wmv2 \\</span><br><span class=\"line\">    --enable-decoder=wmv2 \\</span><br><span class=\"line\">    --enable-decoder=wmv3 \\</span><br><span class=\"line\">    --enable-decoder=wmv3_crystalhd \\</span><br><span class=\"line\">    --enable-decoder=wmv3_vdpau \\</span><br><span class=\"line\">    --enable-decoder=wmv3image \\</span><br><span class=\"line\">        --enable-encoder=jpeg2000 \\</span><br><span class=\"line\">    --enable-encoder=mjpeg \\</span><br><span class=\"line\">    --enable-encoder=ljpeg \\</span><br><span class=\"line\">    --enable-encoder=jpegls \\</span><br><span class=\"line\">    --enable-decoder=jpeg2000 \\</span><br><span class=\"line\">    --enable-decoder=jpegls \\</span><br><span class=\"line\">    --enable-decoder=mjpeg \\</span><br><span class=\"line\">    --enable-decoder=mjpegb \\</span><br><span class=\"line\">    --enable-muxer=mjpeg \\</span><br><span class=\"line\">    --enable-demuxer=mjpeg \\</span><br><span class=\"line\">    --enable-encoder=png \\</span><br><span class=\"line\">    --enable-decoder=png \\</span><br><span class=\"line\">    --enable-parser=png \\</span><br><span class=\"line\">    --enable-swscale \\</span><br><span class=\"line\">    --enable-swscale-alpha \\</span><br><span class=\"line\">    --enable-filter=scale \\</span><br><span class=\"line\">    --enable-encoder=pcm_u8 \\</span><br><span class=\"line\">    --enable-decoder=pcm_u8 \\</span><br><span class=\"line\">    --enable-muxer=pcm_u8 \\</span><br><span class=\"line\">    --enable-demuxer=pcm_u8 \\</span><br><span class=\"line\">    --enable-small \\</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2> <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\"><br><br></div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\"><br><br><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#概述\">概述</a></li><br><li><a href=\"#依赖库安装\">依赖库安装</a><ul><br><li><a href=\"#yasm130\">yasm1.3.0</a></li><br><li><a href=\"#安装mp3依赖库\">安装mp3依赖库</a></li><br><li><a href=\"#error-libopencoreamrnb-not-found\">ERROR: libopencore_amrnb not found</a></li><br><li><a href=\"#error-libvoamrwbenc-not-found\">ERROR: libvo_amrwbenc not found</a></li><br><li><a href=\"#error-libwavpack-not-found\">ERROR: libwavpack not found</a></li><br><li><a href=\"#error-libaacplus-200-not-found\">ERROR: libaacplus &gt;= 2.0.0 not found</a></li><br><li><a href=\"#error-libfdkaac-not-found\">ERROR: libfdk_aac not found</a></li><br><li><a href=\"#error-libvoaacenc-not-found\">ERROR: libvo_aacenc not found</a></li><br></ul><br></li><br><li><a href=\"#编译安装ffmpeg\">编译安装ffmpeg</a><ul><br><li><a href=\"#常用编译方式小结\">常用编译方式小结</a></li><br><li><a href=\"#支持vorbis\">支持vorbis</a></li><br><li><a href=\"#支持wav\">支持wav</a></li><br><li><a href=\"#支持aac\">支持aac</a></li><br><li><a href=\"#支持mp2\">支持mp2</a></li><br><li><a href=\"#flac-支持\">flac 支持</a></li><br><li><a href=\"#支持-ac3\">支持 ac3</a></li><br><li><a href=\"#支持wmawmv\">支持wma/wmv</a></li><br><li><a href=\"#本次编译涉及所有配置项\">本次编译涉及所有配置项</a></li><br></ul><br></li><br></ul><br></li><br></ul><br></div><br></div><br></div></div>\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本文将详细介绍编译安装ffmpeg,该ffmpeg将支持目前业界各主流音频格式，主要功能为支持mp2，mp3，flac，vorbis，wav，aac，amr，ac3，wma，wmv格式转为mp3/aac/amr。</p>\n<h2 id=\"依赖库安装\"><a href=\"#依赖库安装\" class=\"headerlink\" title=\"依赖库安装\"></a>依赖库安装</h2><h3 id=\"yasm1-3-0\"><a href=\"#yasm1-3-0\" class=\"headerlink\" title=\"yasm1.3.0\"></a>yasm1.3.0</h3><p>编译安装 <a href=\"http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz\">yasm-1.3.0.tar.gz</a> </p>\n<h3 id=\"安装mp3依赖库\"><a href=\"#安装mp3依赖库\" class=\"headerlink\" title=\"安装mp3依赖库\"></a>安装mp3依赖库</h3><p>   错误</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: libmp3lame &gt;= 3.98.3 not found</span><br></pre></td></tr></table></figure>\n<p>  安装：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libmp3lame-dev - MP3 encoding library (development)</span><br><span class=\"line\">apt-get install   libmp3lame-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libopencore-amrnb-not-found\"><a href=\"#ERROR-libopencore-amrnb-not-found\" class=\"headerlink\" title=\"ERROR: libopencore_amrnb not found\"></a>ERROR: libopencore_amrnb not found</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libx264-dev libxvidcore-dev libopencore-amrwb-dev libopencore-amrnb-dev libfaad-dev libfaac-dev libmp3lame-dev \\</span><br><span class=\"line\">libtwolame-dev liba52-0.7.4-dev libcddb2-dev libcdaudio-dev libcdio-cdda-dev libvorbis-dev libopenjpeg-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libvo-amrwbenc-not-found\"><a href=\"#ERROR-libvo-amrwbenc-not-found\" class=\"headerlink\" title=\"ERROR: libvo_amrwbenc not found\"></a>ERROR: libvo_amrwbenc not found</h3><p><a href=\"http://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/\">http://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/</a></p>\n<h3 id=\"ERROR-libwavpack-not-found\"><a href=\"#ERROR-libwavpack-not-found\" class=\"headerlink\" title=\"ERROR: libwavpack not found\"></a>ERROR: libwavpack not found</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libwavpack-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libaacplus-gt-2-0-0-not-found\"><a href=\"#ERROR-libaacplus-gt-2-0-0-not-found\" class=\"headerlink\" title=\"ERROR: libaacplus &gt;= 2.0.0 not found\"></a>ERROR: libaacplus &gt;= 2.0.0 not found</h3><p><a href=\"https://trac.ffmpeg.org/wiki/How%20to%20quickly%20compile%20libaacplus\">ffmpeg官网解决方案</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># apt-get install libfftw3-dev pkg-config autoconf automake libtool unzip</span><br><span class=\"line\">$ wget http://tipok.org.ua/downloads/media/aacplus/libaacplus/libaacplus-2.0.2.tar.gz</span><br><span class=\"line\">$ tar -xzf libaacplus-2.0.2.tar.gz</span><br><span class=\"line\">$ cd libaacplus-2.0.2</span><br><span class=\"line\">$ ./autogen.sh --enable-shared --enable-static</span><br><span class=\"line\">$ make</span><br><span class=\"line\"># make install</span><br><span class=\"line\"># ldconfig</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERROR-libfdk-aac-not-found\"><a href=\"#ERROR-libfdk-aac-not-found\" class=\"headerlink\" title=\"ERROR: libfdk_aac not found\"></a>ERROR: libfdk_aac not found</h3><p>编译安装<a href=\"http://sourceforge.net/projects/opencore-amr/?source=directory\">libfdk_aac</a></p>\n<h3 id=\"ERROR-libvo-aacenc-not-found\"><a href=\"#ERROR-libvo-aacenc-not-found\" class=\"headerlink\" title=\"ERROR: libvo_aacenc not found\"></a>ERROR: libvo_aacenc not found</h3><p>编译安装<a href=\"http://sourceforge.net/projects/opencore-amr/files/vo-aacenc/vo-aacenc-0.1.2.tar.gz/download\">vo-aacenc-0.1.2.tar.gz</a></p>\n<h2 id=\"编译安装ffmpeg\"><a href=\"#编译安装ffmpeg\" class=\"headerlink\" title=\"编译安装ffmpeg\"></a>编译安装ffmpeg</h2><h3 id=\"常用编译方式小结\"><a href=\"#常用编译方式小结\" class=\"headerlink\" title=\"常用编译方式小结\"></a>常用编译方式小结</h3><p>1.编译时设置通用参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">    --extra-cflags=&apos;-I/usr/include -static&apos; \\</span><br><span class=\"line\">    --extra-ldflags=&apos;-I/usr/lib -static&apos; \\</span><br><span class=\"line\">    --disable-debug \\</span><br><span class=\"line\">    --disable-shared \\</span><br><span class=\"line\">    --enable-static \\</span><br><span class=\"line\">    --enable-gpl \\</span><br><span class=\"line\">    --enable-libmp3lame \\</span><br><span class=\"line\">    --enable-nonfree \\</span><br><span class=\"line\">    --disable-logging \\</span><br><span class=\"line\">    --disable-avdevice \\</span><br><span class=\"line\">    --disable-swscale \\</span><br><span class=\"line\">    --disable-postproc \\</span><br><span class=\"line\">    --disable-dxva2 \\</span><br><span class=\"line\">    --disable-vaapi \\</span><br><span class=\"line\">    --disable-vda \\</span><br><span class=\"line\">    --disable-vdpau \\</span><br><span class=\"line\">    --disable-everything \\</span><br><span class=\"line\">    --disable-runtime-cpudetect \\</span><br><span class=\"line\">    --disable-swscale-alpha \\</span><br><span class=\"line\">    --disable-ffplay \\</span><br><span class=\"line\">    --disable-ffprobe \\</span><br><span class=\"line\">    --disable-ffserver \\</span><br><span class=\"line\">    --disable-doc \\</span><br><span class=\"line\">    --disable-htmlpages \\</span><br><span class=\"line\">    --disable-manpages \\</span><br><span class=\"line\">    --disable-podpages \\</span><br><span class=\"line\">    --disable-txtpages \\</span><br><span class=\"line\">    --enable-protocol=file \\</span><br><span class=\"line\">    --enable-protocol=pipe \\</span><br><span class=\"line\">    --enable-protocol=http \\</span><br><span class=\"line\">    --enable-protocol=https \\</span><br><span class=\"line\">    --enable-filter=aresample \\</span><br></pre></td></tr></table></figure>\n<p>2.从第一步生成的config.h中，grep 想要安装的格式关键字，如想要安装mp3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ grep MP3 config.h </span><br><span class=\"line\">#define CONFIG_LIBMP3LAME 1</span><br><span class=\"line\">#define CONFIG_MP3_HEADER_DECOMPRESS_BSF 0</span><br><span class=\"line\">#define CONFIG_MP3_DECODER 1</span><br><span class=\"line\">#define CONFIG_MP3FLOAT_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ADU_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ADUFLOAT_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ON4_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3ON4FLOAT_DECODER 0</span><br><span class=\"line\">#define CONFIG_MP3_DEMUXER 1</span><br><span class=\"line\">#define CONFIG_LIBMP3LAME_ENCODER 1</span><br><span class=\"line\">#define CONFIG_MP3_MUXER 1</span><br></pre></td></tr></table></figure>\n<p>3.设置诸如encoder,decoder,muxer,demuxer对应项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-libmp3lame \\</span><br><span class=\"line\">--enable-decoder=mp3 \\</span><br><span class=\"line\"> --enable-demuxer=mp3 \\</span><br><span class=\"line\"> --enable-muxer=mp3 \\</span><br><span class=\"line\"> --enable-encoder=libmp3lame \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持vorbis\"><a href=\"#支持vorbis\" class=\"headerlink\" title=\"支持vorbis\"></a>支持vorbis</h3><p><strong>编译参数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-libvorbis \\</span><br><span class=\"line\">--enable-parser=vorbis \\</span><br><span class=\"line\">--enable-encoder=vorbis \\</span><br><span class=\"line\">--enable-decoder=vorbis \\</span><br><span class=\"line\">--enable-encoder=libvorbis \\</span><br><span class=\"line\">--enable-decoder=libvorbis \\</span><br><span class=\"line\">--enable-muxer=ogg \\</span><br><span class=\"line\">--enable-demuxer=ogg \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试成功</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.ogg</span><br><span class=\"line\">ffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers</span><br><span class=\"line\">  built on Mar 14 2015 01:24:30 with gcc 4.9.1 (Ubuntu 4.9.1-16ubuntu6)</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, ogg, to &apos;test.ogg&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: vorbis (libvorbis), 8000 Hz, mono, fltp</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      encoder         : Lavf55.33.100</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; libvorbis)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      25kB time=00:00:10.08 bitrate=  20.3kbits/s    </span><br><span class=\"line\">video:0kB audio:22kB subtitle:0 data:0 global headers:3kB muxing overhead 2.472099%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i  test.ogg ogg.mp3</span><br><span class=\"line\">Input #0, ogg, from &apos;test.ogg&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.09, start: 0.000000, bitrate: 20 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: vorbis, 8000 Hz, mono, fltp, 22 kb/s</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      ENCODER         : Lavf55.33.100</span><br><span class=\"line\">Output #0, mp3, to &apos;ogg.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      ENCODER         : Lavf55.33.100</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (vorbis -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持wav\"><a href=\"#支持wav\" class=\"headerlink\" title=\"支持wav\"></a>支持wav</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-libwavpack \\</span><br><span class=\"line\">   --enable-muxer=wav \\</span><br><span class=\"line\">   --enable-demuxer=wav \\</span><br><span class=\"line\">   --enable-decoder=wavpack \\</span><br><span class=\"line\">   --enable-encoder=wavpack \\</span><br><span class=\"line\">   --enable-decoder=wav \\</span><br><span class=\"line\">   --enable-encoder=wav \\</span><br><span class=\"line\">   --enable-encoder=pcm_s16le \\</span><br><span class=\"line\">   --enable-decoder=pcm_s16le \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试成功</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.wav wav.mp3</span><br><span class=\"line\">Guessed Channel Layout for  Input Stream #0.0 : mono</span><br><span class=\"line\">Input #0, wav, from &apos;test.wav&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.09, bitrate: 128 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Output #0, mp3, to &apos;wav.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (pcm_s16le -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">[libmp3lame @ 0x29fe940] Trying to remove 576 samples, but the queue is empty</span><br><span class=\"line\">size=      10kB time=00:00:10.15 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.534965%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 haha.wav</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">File &apos;haha.wav&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">Output #0, wav, to &apos;haha.wav&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    ISFT            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 8000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; pcm_s16le)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=     158kB time=00:00:10.08 bitrate= 128.1kbits/s    </span><br><span class=\"line\">video:0kB audio:158kB subtitle:0 data:0 global headers:0kB muxing overhead 0.049574%</span><br></pre></td></tr></table></figure>\n<p>部分从wav转mp3,遇到一下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input #0, wav, from &apos;../resource/flac/1.wav&apos;:</span><br><span class=\"line\">  Duration: 00:09:05.67, bitrate: 96 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: pcm_u8 ([1][0][0][0] / 0x0001), 12000 Hz, mono, 96 kb/s</span><br><span class=\"line\">[abuffer @ 0x1a3b520] Unable to parse option value &quot;(null)&quot; as sample format</span><br><span class=\"line\">    Last message repeated 1 times</span><br><span class=\"line\">[abuffer @ 0x1a3b520] Error setting option sample_fmt to value (null).</span><br><span class=\"line\">[graph 0 input from stream 0:0 @ 0x1a4fea0] Error applying options to the filter.</span><br><span class=\"line\">Error opening filters!</span><br><span class=\"line\">Conversion failed!</span><br></pre></td></tr></table></figure>\n<p>解决方法，加上编译参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=pcm_u8 \\</span><br><span class=\"line\"> --enable-decoder=pcm_u8 \\</span><br><span class=\"line\"> --enable-muxer=pcm_u8 \\</span><br><span class=\"line\"> --enable-demuxer=pcm_u8 \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持aac\"><a href=\"#支持aac\" class=\"headerlink\" title=\"支持aac\"></a>支持aac</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> --enable-libvo-aacenc \\</span><br><span class=\"line\">--enable-libfdk_aac \\</span><br><span class=\"line\">--enable-libfaac \\</span><br><span class=\"line\">--enable-parser=aac \\</span><br><span class=\"line\">--enable-encoder=aac \\</span><br><span class=\"line\">--enable-decoder=aac \\</span><br><span class=\"line\">--enable-encoder=libfaac \\</span><br><span class=\"line\">--enable-encoder=libvo_aacenc \\</span><br><span class=\"line\">--enable-encoder=libaacplus \\</span><br><span class=\"line\">--enable-encoder=libfdk_aac \\</span><br><span class=\"line\">--enable-decoder=libfdk_aac\\</span><br><span class=\"line\">--enable-demuxer=aac \\</span><br><span class=\"line\">--enable-muxer=adts \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ./ffmpeg -i test.mp3 haha.aac</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, adts, to &apos;haha.aac&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: aac (libfdk_aac), 8000 Hz, mono, s16, 17 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; libfdk_aac)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      22kB time=00:00:10.11 bitrate=  18.0kbits/s    </span><br><span class=\"line\">video:0kB audio:22kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i haha.aac aac.mp3</span><br><span class=\"line\">[aac @ 0x15abd80] Estimating duration from bitrate, this may be inaccurate</span><br><span class=\"line\">Input #0, aac, from &apos;haha.aac&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.86, bitrate: 16 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: aac, 8000 Hz, mono, fltp, 16 kb/s</span><br><span class=\"line\">File &apos;aac.mp3&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">Output #0, mp3, to &apos;aac.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (aac -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      11kB time=00:00:10.37 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.482877%</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持mp2\"><a href=\"#支持mp2\" class=\"headerlink\" title=\"支持mp2\"></a>支持mp2</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=mp2 \\</span><br><span class=\"line\">--enable-decoder=mp2 \\</span><br><span class=\"line\">--enable-muxer=mp2 \\</span><br><span class=\"line\">--enable-decoder=mp2float \\</span><br><span class=\"line\">--enable-encoder=mp2fixed \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试通过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.mp2</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.22, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, mp2, to &apos;test.mp2&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; mp2)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=     159kB time=00:00:10.12 bitrate= 128.4kbits/s    </span><br><span class=\"line\">video:0kB audio:159kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp2 mp2.mp3</span><br><span class=\"line\">[mp3 @ 0x1b77d80] Estimating duration from bitrate, this may be inaccurate</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp2&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.29, start: 0.000000, bitrate: 126 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp2, 16000 Hz, mono, s16p, 126 kb/s</span><br><span class=\"line\">File &apos;mp2.mp3&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">Output #0, mp3, to &apos;mp2.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 16000 Hz, mono, s16p</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp2 -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      30kB time=00:00:10.15 bitrate=  24.3kbits/s    </span><br><span class=\"line\">video:0kB audio:30kB subtitle:0 data:0 global headers:0kB muxing overhead 0.733568%</span><br></pre></td></tr></table></figure>\n<h3 id=\"flac-支持\"><a href=\"#flac-支持\" class=\"headerlink\" title=\"flac 支持\"></a>flac 支持</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=flac \\</span><br><span class=\"line\"> --enable-decoder=flac \\</span><br><span class=\"line\"> --enable-demuxer=flac \\</span><br><span class=\"line\"> --enable-muxer=flac \\</span><br><span class=\"line\"> --enable-parser=flac \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试通过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.mp3 test.flac</span><br><span class=\"line\">ffmpeg version 2.2.2 Copyright (c) 2000-2014 the FFmpeg developers</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, flac, to &apos;test.flac&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: flac, 8000 Hz, mono, s16, 128 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; flac)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      92kB time=00:00:10.22 bitrate=  73.4kbits/s    </span><br><span class=\"line\">video:0kB audio:84kB subtitle:0 data:0 global headers:0kB muxing overhead 9.643538%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.flac flac.mp3</span><br><span class=\"line\">Input #0, flac, from &apos;test.flac&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    ENCODER         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.16, bitrate: 73 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: flac, 8000 Hz, mono, s16</span><br><span class=\"line\">Output #0, mp3, to &apos;flac.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, s16p</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (flac -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">[libmp3lame @ 0x1a913a0] Trying to remove 576 samples, but the queue is empty</span><br><span class=\"line\">size=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%</span><br></pre></td></tr></table></figure>\n<p>部分flac转mp3失败的原因之一是ffmpeg没有将图片格式编在里面的缘故，<br>在ffmpeg编译时添加以下参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=jpeg2000 \\</span><br><span class=\"line\">--enable-encoder=mjpeg \\</span><br><span class=\"line\">--enable-encoder=ljpeg \\</span><br><span class=\"line\">--enable-encoder=jpegls \\</span><br><span class=\"line\">--enable-decoder=jpeg2000 \\</span><br><span class=\"line\">--enable-decoder=jpegls \\</span><br><span class=\"line\">--enable-decoder=mjpeg \\</span><br><span class=\"line\">--enable-decoder=mjpegb \\</span><br><span class=\"line\">--enable-muxer=mjpeg \\</span><br><span class=\"line\">--enable-demuxer=mjpeg \\</span><br><span class=\"line\">--enable-encoder=png \\</span><br><span class=\"line\">--enable-decoder=png \\</span><br><span class=\"line\">--enable-parser=png \\</span><br></pre></td></tr></table></figure>\n<p>加入图片支持后，以上转码依旧报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input #0, flac, from &apos;b1.flac&apos;:</span><br><span class=\"line\">  Duration: 00:08:32.31, bitrate: 871 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: flac, 44100 Hz, stereo, s16</span><br><span class=\"line\">    Stream #0:1: Video: mjpeg, yuvj420p(pc), 542x475 [SAR 96:96 DAR 542:475], 90k tbr, 90k tbn, 90k tbc</span><br><span class=\"line\">    Metadata:</span><br><span class=\"line\">      comment         : Cover (front)</span><br><span class=\"line\">File &apos;test.mp3&apos; already exists. Overwrite ? [y/N] y</span><br><span class=\"line\">&apos;scale&apos; filter not present, cannot convert pixel formats.</span><br><span class=\"line\">Error opening filters!</span><br><span class=\"line\">Conversion failed!</span><br></pre></td></tr></table></figure>\n<p>解决方法：<br>编译时添加scale的支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-swscale \\</span><br><span class=\"line\"> --enable-swscale-alpha \\</span><br><span class=\"line\"> --enable-filter=scale \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持-ac3\"><a href=\"#支持-ac3\" class=\"headerlink\" title=\"支持 ac3\"></a>支持 ac3</h3><p><strong>编译</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-encoder=ac3 \\</span><br><span class=\"line\">--enable-decoder=ac3 \\</span><br><span class=\"line\">--enable-encoder=ac3_fixed\\</span><br><span class=\"line\">--enable-decoder=atrac3 \\</span><br><span class=\"line\">--enable-decoder=atrac3p \\</span><br><span class=\"line\">--enable-encoder=eac3 \\</span><br><span class=\"line\">--enable-decoder=eac3 \\</span><br><span class=\"line\">--enable-muxer=ac3 \\</span><br><span class=\"line\">--enable-demuxer=ac3 \\</span><br><span class=\"line\">--enable-muxer=eac3 \\</span><br><span class=\"line\">--enable-demuxer=eac3 \\</span><br></pre></td></tr></table></figure>\n<p><strong>测试通过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ffmpeg -i test.mp3 test.ac3</span><br><span class=\"line\">Input #0, mp3, from &apos;test.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">  Duration: 00:00:10.30, start: 0.138125, bitrate: 8 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: mp3, 8000 Hz, mono, s16p, 8 kb/s</span><br><span class=\"line\">Output #0, ac3, to &apos;test.ac3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    encoder         : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (mp3 -&gt; ac3)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=     119kB time=00:00:10.14 bitrate=  96.3kbits/s    </span><br><span class=\"line\">video:0kB audio:119kB subtitle:0 data:0 global headers:0kB muxing overhead 0.000000%</span><br><span class=\"line\">fun@ubuntu:~/software/ffmpeg-2.2.2$ ./ffmpeg -i test.ac3 ac3.mp3</span><br><span class=\"line\">[ac3 @ 0x15a7d80] Estimating duration from bitrate, this may be inaccurate</span><br><span class=\"line\">Input #0, ac3, from &apos;test.ac3&apos;:</span><br><span class=\"line\">  Duration: 00:00:10.18, start: 0.000000, bitrate: 96 kb/s</span><br><span class=\"line\">    Stream #0:0: Audio: ac3, 8000 Hz, mono, fltp, 96 kb/s</span><br><span class=\"line\">Output #0, mp3, to &apos;ac3.mp3&apos;:</span><br><span class=\"line\">  Metadata:</span><br><span class=\"line\">    TSSE            : Lavf55.33.100</span><br><span class=\"line\">    Stream #0:0: Audio: mp3 (libmp3lame), 8000 Hz, mono, fltp</span><br><span class=\"line\">Stream mapping:</span><br><span class=\"line\">  Stream #0:0 -&gt; #0:0 (ac3 -&gt; libmp3lame)</span><br><span class=\"line\">Press [q] to stop, [?] for help</span><br><span class=\"line\">size=      10kB time=00:00:10.22 bitrate=   8.3kbits/s    </span><br><span class=\"line\">video:0kB audio:10kB subtitle:0 data:0 global headers:0kB muxing overhead 2.517361%</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持wma-wmv\"><a href=\"#支持wma-wmv\" class=\"headerlink\" title=\"支持wma/wmv\"></a>支持wma/wmv</h3><p>编译参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--enable-decoder=wmalossless \\</span><br><span class=\"line\">   --enable-decoder=wmapro \\</span><br><span class=\"line\">   --enable-encoder=wmav1 \\</span><br><span class=\"line\">   --enable-decoder=wmav1 \\</span><br><span class=\"line\">   --enable-encoder=wmav2 \\</span><br><span class=\"line\">   --enable-decoder=wmav2 \\</span><br><span class=\"line\">   --enable-decoder=wmavoice \\</span><br><span class=\"line\">   --enable-demuxer=xwma \\</span><br><span class=\"line\">   --enable-demuxer=avi \\</span><br><span class=\"line\">   --enable-muxer=avi \\</span><br><span class=\"line\">   --enable-demuxer=asf \\</span><br><span class=\"line\">   --enable-muxer=asf \\</span><br><span class=\"line\">   --enable-encoder=wmv1 \\</span><br><span class=\"line\">   --enable-decoder=wmv1 \\</span><br><span class=\"line\">   --enable-encoder=wmv2 \\</span><br><span class=\"line\">   --enable-decoder=wmv2 \\</span><br><span class=\"line\">   --enable-decoder=wmv3 \\</span><br><span class=\"line\">   --enable-decoder=wmv3_crystalhd \\</span><br><span class=\"line\">   --enable-decoder=wmv3_vdpau \\</span><br><span class=\"line\">   --enable-decoder=wmv3image \\</span><br></pre></td></tr></table></figure>\n<h3 id=\"本次编译涉及所有配置项\"><a href=\"#本次编译涉及所有配置项\" class=\"headerlink\" title=\"本次编译涉及所有配置项\"></a>本次编译涉及所有配置项</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">    --extra-cflags=&apos;-I/usr/include -static&apos; \\</span><br><span class=\"line\">    --extra-ldflags=&apos;-I/usr/lib -static&apos; \\</span><br><span class=\"line\">    --disable-debug \\</span><br><span class=\"line\">    --disable-shared \\</span><br><span class=\"line\">    --enable-static \\</span><br><span class=\"line\">    --enable-gpl \\</span><br><span class=\"line\">    --enable-libmp3lame \\</span><br><span class=\"line\">    --enable-nonfree \\</span><br><span class=\"line\">    --disable-logging \\</span><br><span class=\"line\">    --disable-avdevice \\</span><br><span class=\"line\">    --disable-swscale \\</span><br><span class=\"line\">    --disable-postproc \\</span><br><span class=\"line\">    --disable-dxva2 \\</span><br><span class=\"line\">    --disable-vaapi \\</span><br><span class=\"line\">    --disable-vda \\</span><br><span class=\"line\">    --disable-vdpau \\</span><br><span class=\"line\">    --disable-everything \\</span><br><span class=\"line\">    --disable-runtime-cpudetect \\</span><br><span class=\"line\">    --disable-swscale-alpha \\</span><br><span class=\"line\">    --disable-ffplay \\</span><br><span class=\"line\">    --disable-ffprobe \\</span><br><span class=\"line\">    --disable-ffserver \\</span><br><span class=\"line\">    --disable-doc \\</span><br><span class=\"line\">    --disable-htmlpages \\</span><br><span class=\"line\">    --disable-manpages \\</span><br><span class=\"line\">    --disable-podpages \\</span><br><span class=\"line\">    --disable-txtpages \\</span><br><span class=\"line\">    --enable-protocol=file \\</span><br><span class=\"line\">    --enable-protocol=pipe \\</span><br><span class=\"line\">    --enable-protocol=http \\</span><br><span class=\"line\">    --enable-protocol=https \\</span><br><span class=\"line\">    --enable-filter=aresample \\</span><br><span class=\"line\">   --enable-decoder=mp3 \\</span><br><span class=\"line\">    --enable-demuxer=mp3 \\</span><br><span class=\"line\">    --enable-parser=mpegaudio \\</span><br><span class=\"line\">    --enable-muxer=mp3 \\</span><br><span class=\"line\">    --enable-encoder=libmp3lame \\</span><br><span class=\"line\">\t--enable-version3 \\</span><br><span class=\"line\">    --enable-libvo-aacenc \\</span><br><span class=\"line\">    --enable-libfdk_aac \\</span><br><span class=\"line\">    --enable-libfdk-aac \\</span><br><span class=\"line\">    --enable-libfaac \\</span><br><span class=\"line\">    --enable-parser=aac \\</span><br><span class=\"line\">    --enable-encoder=aac \\</span><br><span class=\"line\">    --enable-decoder=aac \\</span><br><span class=\"line\">    --enable-encoder=libfaac \\</span><br><span class=\"line\">    --enable-encoder=libvo_aacenc \\</span><br><span class=\"line\">    --enable-encoder=libaacplus \\</span><br><span class=\"line\">    --enable-encoder=libfdk_aac \\</span><br><span class=\"line\">    --enable-decoder=libfdk_aac\\</span><br><span class=\"line\">\t--enable-demuxer=aac \\</span><br><span class=\"line\">    --enable-muxer=adts \\</span><br><span class=\"line\">    --enable-libopencore-amrnb \\</span><br><span class=\"line\">\t--enable-libopencore-amrwb \\</span><br><span class=\"line\">\t--enable-libvo_amrwbenc \\</span><br><span class=\"line\">    --enable-encoder=libvo_amrwbenc \\</span><br><span class=\"line\">    --enable-decoder=libopencore_amrnb \\</span><br><span class=\"line\">\t--enable-encoder=libopencore_amrnb \\</span><br><span class=\"line\">    --enable-decoder=libopencore_amrwb \\</span><br><span class=\"line\">    --enable-decoder=amrnb \\</span><br><span class=\"line\">    --enable-decoder=amrwb \\</span><br><span class=\"line\">\t--enable-muxer=amr \\</span><br><span class=\"line\">    --enable-demuxer=amr \\</span><br><span class=\"line\">    --enable-libwavpack \\</span><br><span class=\"line\">    --enable-muxer=wav \\</span><br><span class=\"line\">    --enable-demuxer=wav \\</span><br><span class=\"line\">    --enable-decoder=wavpack \\</span><br><span class=\"line\">    --enable-encoder=wavpack \\</span><br><span class=\"line\">    --enable-encoder=pcm_s16le \\</span><br><span class=\"line\">    --enable-decoder=pcm_s16le \\</span><br><span class=\"line\">    --enable-libvorbis \\</span><br><span class=\"line\">    --enable-parser=vorbis \\</span><br><span class=\"line\">    --enable-encoder=vorbis \\</span><br><span class=\"line\">    --enable-decoder=vorbis \\</span><br><span class=\"line\">    --enable-encoder=libvorbis \\</span><br><span class=\"line\">    --enable-decoder=libvorbis \\</span><br><span class=\"line\">    --enable-muxer=ogg \\</span><br><span class=\"line\">    --enable-demuxer=ogg \\</span><br><span class=\"line\">    --enable-decoder=mp1float \\</span><br><span class=\"line\">    --enable-decoder=mp1 \\</span><br><span class=\"line\">    --enable-encoder=mp2 \\</span><br><span class=\"line\">    --enable-decoder=mp2 \\</span><br><span class=\"line\">    --enable-muxer=mp2 \\</span><br><span class=\"line\">    --enable-decoder=mp2float \\</span><br><span class=\"line\">    --enable-encoder=mp2fixed \\</span><br><span class=\"line\">    --enable-encoder=flac \\</span><br><span class=\"line\">    --enable-decoder=flac \\</span><br><span class=\"line\">    --enable-demuxer=flac \\</span><br><span class=\"line\">    --enable-muxer=flac \\</span><br><span class=\"line\">    --enable-parser=flac \\</span><br><span class=\"line\">    --enable-encoder=ac3 \\</span><br><span class=\"line\">    --enable-decoder=ac3 \\</span><br><span class=\"line\">    --enable-encoder=ac3_fixed\\</span><br><span class=\"line\">    --enable-decoder=atrac3 \\</span><br><span class=\"line\">    --enable-decoder=atrac3p \\</span><br><span class=\"line\">    --enable-encoder=eac3 \\</span><br><span class=\"line\">    --enable-decoder=eac3 \\</span><br><span class=\"line\">    --enable-muxer=ac3 \\</span><br><span class=\"line\">    --enable-demuxer=ac3 \\</span><br><span class=\"line\">    --enable-muxer=eac3 \\</span><br><span class=\"line\">    --enable-demuxer=eac3 \\</span><br><span class=\"line\">    --enable-decoder=wmalossless \\</span><br><span class=\"line\">    --enable-decoder=wmapro \\</span><br><span class=\"line\">    --enable-encoder=wmav1 \\</span><br><span class=\"line\">    --enable-decoder=wmav1 \\</span><br><span class=\"line\">    --enable-encoder=wmav2 \\</span><br><span class=\"line\">    --enable-decoder=wmav2 \\</span><br><span class=\"line\">    --enable-decoder=wmavoice \\</span><br><span class=\"line\">    --enable-demuxer=xwma \\</span><br><span class=\"line\">    --enable-demuxer=avi \\</span><br><span class=\"line\">    --enable-muxer=avi \\</span><br><span class=\"line\">    --enable-demuxer=asf \\</span><br><span class=\"line\">    --enable-muxer=asf \\</span><br><span class=\"line\">    --enable-encoder=wmv1 \\</span><br><span class=\"line\">    --enable-decoder=wmv1 \\</span><br><span class=\"line\">    --enable-encoder=wmv2 \\</span><br><span class=\"line\">    --enable-decoder=wmv2 \\</span><br><span class=\"line\">    --enable-decoder=wmv3 \\</span><br><span class=\"line\">    --enable-decoder=wmv3_crystalhd \\</span><br><span class=\"line\">    --enable-decoder=wmv3_vdpau \\</span><br><span class=\"line\">    --enable-decoder=wmv3image \\</span><br><span class=\"line\">        --enable-encoder=jpeg2000 \\</span><br><span class=\"line\">    --enable-encoder=mjpeg \\</span><br><span class=\"line\">    --enable-encoder=ljpeg \\</span><br><span class=\"line\">    --enable-encoder=jpegls \\</span><br><span class=\"line\">    --enable-decoder=jpeg2000 \\</span><br><span class=\"line\">    --enable-decoder=jpegls \\</span><br><span class=\"line\">    --enable-decoder=mjpeg \\</span><br><span class=\"line\">    --enable-decoder=mjpegb \\</span><br><span class=\"line\">    --enable-muxer=mjpeg \\</span><br><span class=\"line\">    --enable-demuxer=mjpeg \\</span><br><span class=\"line\">    --enable-encoder=png \\</span><br><span class=\"line\">    --enable-decoder=png \\</span><br><span class=\"line\">    --enable-parser=png \\</span><br><span class=\"line\">    --enable-swscale \\</span><br><span class=\"line\">    --enable-swscale-alpha \\</span><br><span class=\"line\">    --enable-filter=scale \\</span><br><span class=\"line\">    --enable-encoder=pcm_u8 \\</span><br><span class=\"line\">    --enable-decoder=pcm_u8 \\</span><br><span class=\"line\">    --enable-muxer=pcm_u8 \\</span><br><span class=\"line\">    --enable-demuxer=pcm_u8 \\</span><br><span class=\"line\">    --enable-small \\</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Nginx介绍(译文I--为什么高并发很重要)","keywords":["nginx"],"description":"nginx","comments":1,"_content":"\n\n## Nginx 介绍（译文I--为什么高并发很重要）\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n\n## 本章目录\n\n<ul>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#为什么高并发很重要？\">为什么高并发很重要？</a></li>\n<ul>\n<li><a href=\"#apache不适用了吗？\">Apache不适用了吗？</a></li>\n<li><a href=\"#使用nginx有更多优势吗？\">使用nginx有更多优势吗？</a></li>\n</ul>\n</li>\n</ul>\n\n\n\n## 概述\n\nnginx(发音为‘engine x’)是俄罗斯软件工程师 Igor Sysoev开发的一款免费开源的web服务器。自2004年开源以来，nginx一直专注于**高性能、高并发、低内存消耗**。 \n此外，nginx具备web服务器最常用的功能，如:\n\n* 负载均衡\n* 缓存\n* 访问与带宽控制\n* 与多类软件易耦合的能力\n\n这些特性使得nginx非常适用于现代web站点架构。目前，nginx是网上第二大流行的开源web服务器软件。\n\n## 为什么高并发很重要？\n\n**相比十年前，互联网已得到了广泛的普及与应用**。\n现在我们甚至难以想象离开互联网的世界。\n\n从最初基于NCSA\n\n**==>**进化到基于Apache web 提供的可进行简单文本操作的html\n\n**==>**到目前的全世界20亿用户永久在线媒介\n\n互联网一直在高速进化。\n\n随着\n\n* 永久在线个人电脑\n* 移动设备\n* 近期的平板电脑\n\n的扩散，互联网在不断的变化，整个经济体系也随之数字有线化。即时信息与娱乐服务变得更加轻盈精巧，在线业务的安全可靠性也发生了显著变化。因此，当下的网站服务比之前变得更复杂，**web引擎需要在工程上更具健壮性和可扩展性。**\n\n**并发一直是web体系结构最大的挑战之一。**自web services应用以来，并发能力持续增长。流行站点服务10w甚至100w的访问量非常常见。\n\n* 十年前，影响并发的主要因素是客户端缓慢－－－用户使用ADSL或者拨号连接网络。\n* 现在，并发主要由移动端和新的应用架构带来，这些应用采用长链接以便能让用户及时更新消息，微博和朋友圈等等。\n* 浏览器行为的变化是另一个导致并发增长的原因，现代浏览器访问网站时一般会打开4～6个并发以提高页面加载速度。\n      \n**下面简要阐述一下客户端缓慢的问题**\n\n设想一个基于Apache的简单网站服务器，该服务器生成相对简短的100K的返回体--由文本或图片组成的简单页面。服务器耗费了不到一秒的时间生成一个页面，但是在80kbps(10KB/s)的网络环境下却耗费了10秒传输到客户端。网站服务器相对较快地推送10KB的内容，却需要在释放连接前耗费10秒钟将内容发送到客户端。\n\n现在设想有1000个客户端同时连接上，请求类似的内容。假设仅分配1M内存给每个客户端，那么就是说，1000个客户端，100KB的请求内容，服务端却要消耗1G的内存。\n\n事实上，一个典型的基于Apache的网站服务器需要为每个client分配超过1M的内存，而移动端的有效速度往往也在几十kbps。针对发送内容到客户端低效这个问题，虽然提高操作系统内核的socket缓冲区的大小，能一定程度上解决缓解问题，但是并不是一个通用的解决方案，并且有无法预期的副作用。\n\n而随着长连接的使用，该问题更加明显。为了避免新建HTTP连接所带来的延时，客户端往往会保持连接，而对于每个客户端服务器必然会分配一定数量的内存。\n\n因此，为了处理\n\n* 持续增长的用户带来的负载\n* 更高量级的并发\n* 持续处理以上这些的能力\n\n一个网站需要基于大量高效的组件。\n\n而web服务器在接受和处理客户端请求过程中，其它模块诸如：\n\n* 硬件（CPU，内存，磁盘）\n* 网络带宽\n* 应用和数据存储架构\n* ……等\n\n这些显然也很重要。因此，网站服务器需具备能够随着同时并发连接数和每秒请求数的增长而非线性扩展的能力。\n\n### Apache不适用了吗？\n\n起源于90年代初期Apache网站服务器，目前依旧主导着整个互联网。Apache的架构设计不仅仅适合于当时的操作系统和硬件，同时也十分符合当时的互联网环境－－一个网站通常使用一台物理服务器运行一个Apache实例。\n\n到了2000年之后，这种单服务器模型显然无法通过简单复制以来满足日益增长的web服务需求。虽然Apache为新功能开发提供了坚实的基础，但他为每个新连接派生一个进程的设计使得其无法适用于网站的非线性扩展。诚然，Apache作为通用的web服务器软件，聚焦于\n\n* 功能多样化\n* 第三方扩展开发\n* 以及普遍适用于几乎任何类型的web应用程序开发。\n\n然而随着\n\n* 每个连接消耗的CPU和内存越持续增长\n* 硬件成本降低\n\n这样功能繁多的单一软件可伸缩性越来越差。\n\n因而，当\n\n* 服务器硬件\n* 操作系统\n* 网络设施\n\n不再是网站增长的瓶颈时，全世界的网站开发者开始寻求更高效方法来运行web服务。大约十年前，著名软件工程师Daniel Kegel提出：“是时候让web服务器并发支持10000客户端了”，并且预言了当下的云服务。Kegel的C10K设想明显推动了许多人尝试解决这个问题--通过优化web服务器以支持海量客户端的并发处理，nginx便是其中最成功的案例之一。\n\n为了解决10000个并发连接的C10K问题，nginx基于一个完全不同的架构—－更适合并发连接数和每秒请求数非线性增长。Nginx基于事件模型，因此不会像Apache为每个请求创建新进程或线程。所以内存和CPU使用事件始终保持可预期，而不受负载影响。目前，一个普通硬件上搭建的Nginx便能处理数万的并发连接。\n\n在Nginx的第一个版本发布时，其主要作为apache的助手，处理如HTML、CSS、JavaScript脚本和图片等静态请求，以降低基于Apache应用服务器的并发和延时。随着开发的进行，nginx增加了\n\n* FastCGI、uswge和SCGI等协议的支持\n* 对如memcached的分布式内存对象缓存系统的支持\n* 同时也增加了其它有用特性，如支持负载均衡和缓存的反向代理\n\n这些附加功能使nginx成为一个用于构建可伸缩的web基础设施高效的工具集。\n\n2012年2月，Apache 2.4.x版本发布。虽然最新版本的apache为加强可伸缩性和性能，增加了新的并发处理核心模块和代理模块。但要说性能、并发能力和资源利用率是否能赶上或超过纯事件驱动模型的web服务器还为时尚早。更高性能的Apache新版本令人高兴，但对于nginx+Apache的web网站架构，虽然这能够缓解后端潜在的瓶颈，却依旧无法解决部分遗留问题。\n\n### 使用nginx有更多优势吗？\n\n高性能高效地处理高并发一直是部署nginx最关键的优势。除此之外，还有更多有意义的优势。\n\n在过去的几年里，web架构一直带着解耦以及将应用层设施从web服务器中分离的理念。然而原先基于LAMP（Linux,apache,mysql php,python 或 perl）模式的web站点，或许并非仅仅转化为基于LEMP(E 是 Engine X),更多地是一种实践。这种实践将web服务器推入基础设施的边缘，并以全新的方式整合这些相同或修订后的应用集和数据库工具集。\n\nnginx的很多关键特性使得十分适合做这些工作。\n\n* 并发\n* 长连接处理\n* SSL\n* 静态内容\n* 压缩和缓存\n* 连接和请求限速\n* 以及HTTP媒体流\n* ……等\n \n 这些特性,使得nginx能够从应用层剥离而成为高效的边缘web服务层。除此之外，为提高处理大规模并发用户的性能，Nginx允许直接整合如memcached、Redis或者其他的NoSQL解决方案。\n    \n随着新环境下开发包和编程语言广泛使用，越来越多的公司开始改变应用的开发和部署习惯。Nginx已然成为这些改进案例最重要的模块之一，并且已经成功帮助过许多公司在预算内快速开发和部署其web服务。\n\nNginx开发起始于2002年，在2004年基于 two-clause BSD 授权正式对外发布。自发布起，Nginx用户就在不断增长，开发者和用户贡献提议、提交bug报告、建议以及评测报告，这些都极大地帮助和促进了整个社区的发展。\n\nNginx代码库是原生的，且完全用C语言写成。Nginx已经被移植到许多系统架构和操作系统，包括：\n\n* Linux\n* FreeBSD\n* Solaris\n* Mac OS X\n* AIX\n* Microsoft Windows。\n\nNginx有自己的函数库，并且除了zlib、PCRE和OpenSSL第三方库之外，标准模块只使用系统C库函数。此外，如果不需要或者考虑到潜在的授权冲突，可以不使用这些第三方库。\n\n简要谈谈关于Windows版本nginx。当nignx在Windows环境下工作时，Windows版本的nginx更像是概念验证而非全功能移植。这是由于目前nginx和Windows内核架构之间交互存在一定限制导致。Windows版本ngnix已暴露的问题包括：相对更低并发连接数、降低的性能、不支持缓存和带宽策略。未来Windows版本的nginx会尽力提供主流功能。\n\n","source":"_posts/2015-05-31-nginx-introduction-I.md","raw":"---\nlayout: post\ntitle: \"Nginx介绍(译文I--为什么高并发很重要)\"\nkeywords: [\"nginx\"]\ndescription: \"nginx\"\ncategory: \"nginx\"\ntags: [\"nginx\"]\ncomments: true\n---\n\n\n## Nginx 介绍（译文I--为什么高并发很重要）\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n\n## 本章目录\n\n<ul>\n<li><a href=\"#概述\">概述</a></li>\n<li><a href=\"#为什么高并发很重要？\">为什么高并发很重要？</a></li>\n<ul>\n<li><a href=\"#apache不适用了吗？\">Apache不适用了吗？</a></li>\n<li><a href=\"#使用nginx有更多优势吗？\">使用nginx有更多优势吗？</a></li>\n</ul>\n</li>\n</ul>\n\n\n\n## 概述\n\nnginx(发音为‘engine x’)是俄罗斯软件工程师 Igor Sysoev开发的一款免费开源的web服务器。自2004年开源以来，nginx一直专注于**高性能、高并发、低内存消耗**。 \n此外，nginx具备web服务器最常用的功能，如:\n\n* 负载均衡\n* 缓存\n* 访问与带宽控制\n* 与多类软件易耦合的能力\n\n这些特性使得nginx非常适用于现代web站点架构。目前，nginx是网上第二大流行的开源web服务器软件。\n\n## 为什么高并发很重要？\n\n**相比十年前，互联网已得到了广泛的普及与应用**。\n现在我们甚至难以想象离开互联网的世界。\n\n从最初基于NCSA\n\n**==>**进化到基于Apache web 提供的可进行简单文本操作的html\n\n**==>**到目前的全世界20亿用户永久在线媒介\n\n互联网一直在高速进化。\n\n随着\n\n* 永久在线个人电脑\n* 移动设备\n* 近期的平板电脑\n\n的扩散，互联网在不断的变化，整个经济体系也随之数字有线化。即时信息与娱乐服务变得更加轻盈精巧，在线业务的安全可靠性也发生了显著变化。因此，当下的网站服务比之前变得更复杂，**web引擎需要在工程上更具健壮性和可扩展性。**\n\n**并发一直是web体系结构最大的挑战之一。**自web services应用以来，并发能力持续增长。流行站点服务10w甚至100w的访问量非常常见。\n\n* 十年前，影响并发的主要因素是客户端缓慢－－－用户使用ADSL或者拨号连接网络。\n* 现在，并发主要由移动端和新的应用架构带来，这些应用采用长链接以便能让用户及时更新消息，微博和朋友圈等等。\n* 浏览器行为的变化是另一个导致并发增长的原因，现代浏览器访问网站时一般会打开4～6个并发以提高页面加载速度。\n      \n**下面简要阐述一下客户端缓慢的问题**\n\n设想一个基于Apache的简单网站服务器，该服务器生成相对简短的100K的返回体--由文本或图片组成的简单页面。服务器耗费了不到一秒的时间生成一个页面，但是在80kbps(10KB/s)的网络环境下却耗费了10秒传输到客户端。网站服务器相对较快地推送10KB的内容，却需要在释放连接前耗费10秒钟将内容发送到客户端。\n\n现在设想有1000个客户端同时连接上，请求类似的内容。假设仅分配1M内存给每个客户端，那么就是说，1000个客户端，100KB的请求内容，服务端却要消耗1G的内存。\n\n事实上，一个典型的基于Apache的网站服务器需要为每个client分配超过1M的内存，而移动端的有效速度往往也在几十kbps。针对发送内容到客户端低效这个问题，虽然提高操作系统内核的socket缓冲区的大小，能一定程度上解决缓解问题，但是并不是一个通用的解决方案，并且有无法预期的副作用。\n\n而随着长连接的使用，该问题更加明显。为了避免新建HTTP连接所带来的延时，客户端往往会保持连接，而对于每个客户端服务器必然会分配一定数量的内存。\n\n因此，为了处理\n\n* 持续增长的用户带来的负载\n* 更高量级的并发\n* 持续处理以上这些的能力\n\n一个网站需要基于大量高效的组件。\n\n而web服务器在接受和处理客户端请求过程中，其它模块诸如：\n\n* 硬件（CPU，内存，磁盘）\n* 网络带宽\n* 应用和数据存储架构\n* ……等\n\n这些显然也很重要。因此，网站服务器需具备能够随着同时并发连接数和每秒请求数的增长而非线性扩展的能力。\n\n### Apache不适用了吗？\n\n起源于90年代初期Apache网站服务器，目前依旧主导着整个互联网。Apache的架构设计不仅仅适合于当时的操作系统和硬件，同时也十分符合当时的互联网环境－－一个网站通常使用一台物理服务器运行一个Apache实例。\n\n到了2000年之后，这种单服务器模型显然无法通过简单复制以来满足日益增长的web服务需求。虽然Apache为新功能开发提供了坚实的基础，但他为每个新连接派生一个进程的设计使得其无法适用于网站的非线性扩展。诚然，Apache作为通用的web服务器软件，聚焦于\n\n* 功能多样化\n* 第三方扩展开发\n* 以及普遍适用于几乎任何类型的web应用程序开发。\n\n然而随着\n\n* 每个连接消耗的CPU和内存越持续增长\n* 硬件成本降低\n\n这样功能繁多的单一软件可伸缩性越来越差。\n\n因而，当\n\n* 服务器硬件\n* 操作系统\n* 网络设施\n\n不再是网站增长的瓶颈时，全世界的网站开发者开始寻求更高效方法来运行web服务。大约十年前，著名软件工程师Daniel Kegel提出：“是时候让web服务器并发支持10000客户端了”，并且预言了当下的云服务。Kegel的C10K设想明显推动了许多人尝试解决这个问题--通过优化web服务器以支持海量客户端的并发处理，nginx便是其中最成功的案例之一。\n\n为了解决10000个并发连接的C10K问题，nginx基于一个完全不同的架构—－更适合并发连接数和每秒请求数非线性增长。Nginx基于事件模型，因此不会像Apache为每个请求创建新进程或线程。所以内存和CPU使用事件始终保持可预期，而不受负载影响。目前，一个普通硬件上搭建的Nginx便能处理数万的并发连接。\n\n在Nginx的第一个版本发布时，其主要作为apache的助手，处理如HTML、CSS、JavaScript脚本和图片等静态请求，以降低基于Apache应用服务器的并发和延时。随着开发的进行，nginx增加了\n\n* FastCGI、uswge和SCGI等协议的支持\n* 对如memcached的分布式内存对象缓存系统的支持\n* 同时也增加了其它有用特性，如支持负载均衡和缓存的反向代理\n\n这些附加功能使nginx成为一个用于构建可伸缩的web基础设施高效的工具集。\n\n2012年2月，Apache 2.4.x版本发布。虽然最新版本的apache为加强可伸缩性和性能，增加了新的并发处理核心模块和代理模块。但要说性能、并发能力和资源利用率是否能赶上或超过纯事件驱动模型的web服务器还为时尚早。更高性能的Apache新版本令人高兴，但对于nginx+Apache的web网站架构，虽然这能够缓解后端潜在的瓶颈，却依旧无法解决部分遗留问题。\n\n### 使用nginx有更多优势吗？\n\n高性能高效地处理高并发一直是部署nginx最关键的优势。除此之外，还有更多有意义的优势。\n\n在过去的几年里，web架构一直带着解耦以及将应用层设施从web服务器中分离的理念。然而原先基于LAMP（Linux,apache,mysql php,python 或 perl）模式的web站点，或许并非仅仅转化为基于LEMP(E 是 Engine X),更多地是一种实践。这种实践将web服务器推入基础设施的边缘，并以全新的方式整合这些相同或修订后的应用集和数据库工具集。\n\nnginx的很多关键特性使得十分适合做这些工作。\n\n* 并发\n* 长连接处理\n* SSL\n* 静态内容\n* 压缩和缓存\n* 连接和请求限速\n* 以及HTTP媒体流\n* ……等\n \n 这些特性,使得nginx能够从应用层剥离而成为高效的边缘web服务层。除此之外，为提高处理大规模并发用户的性能，Nginx允许直接整合如memcached、Redis或者其他的NoSQL解决方案。\n    \n随着新环境下开发包和编程语言广泛使用，越来越多的公司开始改变应用的开发和部署习惯。Nginx已然成为这些改进案例最重要的模块之一，并且已经成功帮助过许多公司在预算内快速开发和部署其web服务。\n\nNginx开发起始于2002年，在2004年基于 two-clause BSD 授权正式对外发布。自发布起，Nginx用户就在不断增长，开发者和用户贡献提议、提交bug报告、建议以及评测报告，这些都极大地帮助和促进了整个社区的发展。\n\nNginx代码库是原生的，且完全用C语言写成。Nginx已经被移植到许多系统架构和操作系统，包括：\n\n* Linux\n* FreeBSD\n* Solaris\n* Mac OS X\n* AIX\n* Microsoft Windows。\n\nNginx有自己的函数库，并且除了zlib、PCRE和OpenSSL第三方库之外，标准模块只使用系统C库函数。此外，如果不需要或者考虑到潜在的授权冲突，可以不使用这些第三方库。\n\n简要谈谈关于Windows版本nginx。当nignx在Windows环境下工作时，Windows版本的nginx更像是概念验证而非全功能移植。这是由于目前nginx和Windows内核架构之间交互存在一定限制导致。Windows版本ngnix已暴露的问题包括：相对更低并发连接数、降低的性能、不支持缓存和带宽策略。未来Windows版本的nginx会尽力提供主流功能。\n\n","slug":"2015-05-31-nginx-introduction-I","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhs003hqj7lvvr3wpe4","content":"<h2 id=\"Nginx-介绍（译文I–为什么高并发很重要）\"><a href=\"#Nginx-介绍（译文I–为什么高并发很重要）\" class=\"headerlink\" title=\"Nginx 介绍（译文I–为什么高并发很重要）\"></a>Nginx 介绍（译文I–为什么高并发很重要）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\" target=\"_blank\" rel=\"external\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\" target=\"_blank\" rel=\"external\">Andrew Alexeev</a></li>\n</ul>\n<ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br><br></ul>\n\n\n<h2 id=\"本章目录\"><a href=\"#本章目录\" class=\"headerlink\" title=\"本章目录\"></a>本章目录</h2><ul><br><li><a href=\"#概述\">概述</a></li><br><li><a href=\"#为什么高并发很重要？\">为什么高并发很重要？</a></li><br><ul><br><li><a href=\"#apache不适用了吗？\">Apache不适用了吗？</a></li><br><li><a href=\"#使用nginx有更多优势吗？\">使用nginx有更多优势吗？</a></li><br></ul><br><br></ul>\n\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>nginx(发音为‘engine x’)是俄罗斯软件工程师 Igor Sysoev开发的一款免费开源的web服务器。自2004年开源以来，nginx一直专注于<strong>高性能、高并发、低内存消耗</strong>。<br>此外，nginx具备web服务器最常用的功能，如:</p>\n<ul>\n<li>负载均衡</li>\n<li>缓存</li>\n<li>访问与带宽控制</li>\n<li>与多类软件易耦合的能力</li>\n</ul>\n<p>这些特性使得nginx非常适用于现代web站点架构。目前，nginx是网上第二大流行的开源web服务器软件。</p>\n<h2 id=\"为什么高并发很重要？\"><a href=\"#为什么高并发很重要？\" class=\"headerlink\" title=\"为什么高并发很重要？\"></a>为什么高并发很重要？</h2><p><strong>相比十年前，互联网已得到了广泛的普及与应用</strong>。<br>现在我们甚至难以想象离开互联网的世界。</p>\n<p>从最初基于NCSA</p>\n<p><strong>==&gt;</strong>进化到基于Apache web 提供的可进行简单文本操作的html</p>\n<p><strong>==&gt;</strong>到目前的全世界20亿用户永久在线媒介</p>\n<p>互联网一直在高速进化。</p>\n<p>随着</p>\n<ul>\n<li>永久在线个人电脑</li>\n<li>移动设备</li>\n<li>近期的平板电脑</li>\n</ul>\n<p>的扩散，互联网在不断的变化，整个经济体系也随之数字有线化。即时信息与娱乐服务变得更加轻盈精巧，在线业务的安全可靠性也发生了显著变化。因此，当下的网站服务比之前变得更复杂，<strong>web引擎需要在工程上更具健壮性和可扩展性。</strong></p>\n<p><strong>并发一直是web体系结构最大的挑战之一。</strong>自web services应用以来，并发能力持续增长。流行站点服务10w甚至100w的访问量非常常见。</p>\n<ul>\n<li>十年前，影响并发的主要因素是客户端缓慢－－－用户使用ADSL或者拨号连接网络。</li>\n<li>现在，并发主要由移动端和新的应用架构带来，这些应用采用长链接以便能让用户及时更新消息，微博和朋友圈等等。</li>\n<li>浏览器行为的变化是另一个导致并发增长的原因，现代浏览器访问网站时一般会打开4～6个并发以提高页面加载速度。</li>\n</ul>\n<p><strong>下面简要阐述一下客户端缓慢的问题</strong></p>\n<p>设想一个基于Apache的简单网站服务器，该服务器生成相对简短的100K的返回体–由文本或图片组成的简单页面。服务器耗费了不到一秒的时间生成一个页面，但是在80kbps(10KB/s)的网络环境下却耗费了10秒传输到客户端。网站服务器相对较快地推送10KB的内容，却需要在释放连接前耗费10秒钟将内容发送到客户端。</p>\n<p>现在设想有1000个客户端同时连接上，请求类似的内容。假设仅分配1M内存给每个客户端，那么就是说，1000个客户端，100KB的请求内容，服务端却要消耗1G的内存。</p>\n<p>事实上，一个典型的基于Apache的网站服务器需要为每个client分配超过1M的内存，而移动端的有效速度往往也在几十kbps。针对发送内容到客户端低效这个问题，虽然提高操作系统内核的socket缓冲区的大小，能一定程度上解决缓解问题，但是并不是一个通用的解决方案，并且有无法预期的副作用。</p>\n<p>而随着长连接的使用，该问题更加明显。为了避免新建HTTP连接所带来的延时，客户端往往会保持连接，而对于每个客户端服务器必然会分配一定数量的内存。</p>\n<p>因此，为了处理</p>\n<ul>\n<li>持续增长的用户带来的负载</li>\n<li>更高量级的并发</li>\n<li>持续处理以上这些的能力</li>\n</ul>\n<p>一个网站需要基于大量高效的组件。</p>\n<p>而web服务器在接受和处理客户端请求过程中，其它模块诸如：</p>\n<ul>\n<li>硬件（CPU，内存，磁盘）</li>\n<li>网络带宽</li>\n<li>应用和数据存储架构</li>\n<li>……等</li>\n</ul>\n<p>这些显然也很重要。因此，网站服务器需具备能够随着同时并发连接数和每秒请求数的增长而非线性扩展的能力。</p>\n<h3 id=\"Apache不适用了吗？\"><a href=\"#Apache不适用了吗？\" class=\"headerlink\" title=\"Apache不适用了吗？\"></a>Apache不适用了吗？</h3><p>起源于90年代初期Apache网站服务器，目前依旧主导着整个互联网。Apache的架构设计不仅仅适合于当时的操作系统和硬件，同时也十分符合当时的互联网环境－－一个网站通常使用一台物理服务器运行一个Apache实例。</p>\n<p>到了2000年之后，这种单服务器模型显然无法通过简单复制以来满足日益增长的web服务需求。虽然Apache为新功能开发提供了坚实的基础，但他为每个新连接派生一个进程的设计使得其无法适用于网站的非线性扩展。诚然，Apache作为通用的web服务器软件，聚焦于</p>\n<ul>\n<li>功能多样化</li>\n<li>第三方扩展开发</li>\n<li>以及普遍适用于几乎任何类型的web应用程序开发。</li>\n</ul>\n<p>然而随着</p>\n<ul>\n<li>每个连接消耗的CPU和内存越持续增长</li>\n<li>硬件成本降低</li>\n</ul>\n<p>这样功能繁多的单一软件可伸缩性越来越差。</p>\n<p>因而，当</p>\n<ul>\n<li>服务器硬件</li>\n<li>操作系统</li>\n<li>网络设施</li>\n</ul>\n<p>不再是网站增长的瓶颈时，全世界的网站开发者开始寻求更高效方法来运行web服务。大约十年前，著名软件工程师Daniel Kegel提出：“是时候让web服务器并发支持10000客户端了”，并且预言了当下的云服务。Kegel的C10K设想明显推动了许多人尝试解决这个问题–通过优化web服务器以支持海量客户端的并发处理，nginx便是其中最成功的案例之一。</p>\n<p>为了解决10000个并发连接的C10K问题，nginx基于一个完全不同的架构—－更适合并发连接数和每秒请求数非线性增长。Nginx基于事件模型，因此不会像Apache为每个请求创建新进程或线程。所以内存和CPU使用事件始终保持可预期，而不受负载影响。目前，一个普通硬件上搭建的Nginx便能处理数万的并发连接。</p>\n<p>在Nginx的第一个版本发布时，其主要作为apache的助手，处理如HTML、CSS、JavaScript脚本和图片等静态请求，以降低基于Apache应用服务器的并发和延时。随着开发的进行，nginx增加了</p>\n<ul>\n<li>FastCGI、uswge和SCGI等协议的支持</li>\n<li>对如memcached的分布式内存对象缓存系统的支持</li>\n<li>同时也增加了其它有用特性，如支持负载均衡和缓存的反向代理</li>\n</ul>\n<p>这些附加功能使nginx成为一个用于构建可伸缩的web基础设施高效的工具集。</p>\n<p>2012年2月，Apache 2.4.x版本发布。虽然最新版本的apache为加强可伸缩性和性能，增加了新的并发处理核心模块和代理模块。但要说性能、并发能力和资源利用率是否能赶上或超过纯事件驱动模型的web服务器还为时尚早。更高性能的Apache新版本令人高兴，但对于nginx+Apache的web网站架构，虽然这能够缓解后端潜在的瓶颈，却依旧无法解决部分遗留问题。</p>\n<h3 id=\"使用nginx有更多优势吗？\"><a href=\"#使用nginx有更多优势吗？\" class=\"headerlink\" title=\"使用nginx有更多优势吗？\"></a>使用nginx有更多优势吗？</h3><p>高性能高效地处理高并发一直是部署nginx最关键的优势。除此之外，还有更多有意义的优势。</p>\n<p>在过去的几年里，web架构一直带着解耦以及将应用层设施从web服务器中分离的理念。然而原先基于LAMP（Linux,apache,mysql php,python 或 perl）模式的web站点，或许并非仅仅转化为基于LEMP(E 是 Engine X),更多地是一种实践。这种实践将web服务器推入基础设施的边缘，并以全新的方式整合这些相同或修订后的应用集和数据库工具集。</p>\n<p>nginx的很多关键特性使得十分适合做这些工作。</p>\n<ul>\n<li>并发</li>\n<li>长连接处理</li>\n<li>SSL</li>\n<li>静态内容</li>\n<li>压缩和缓存</li>\n<li>连接和请求限速</li>\n<li>以及HTTP媒体流</li>\n<li><p>……等</p>\n<p>这些特性,使得nginx能够从应用层剥离而成为高效的边缘web服务层。除此之外，为提高处理大规模并发用户的性能，Nginx允许直接整合如memcached、Redis或者其他的NoSQL解决方案。</p>\n</li>\n</ul>\n<p>随着新环境下开发包和编程语言广泛使用，越来越多的公司开始改变应用的开发和部署习惯。Nginx已然成为这些改进案例最重要的模块之一，并且已经成功帮助过许多公司在预算内快速开发和部署其web服务。</p>\n<p>Nginx开发起始于2002年，在2004年基于 two-clause BSD 授权正式对外发布。自发布起，Nginx用户就在不断增长，开发者和用户贡献提议、提交bug报告、建议以及评测报告，这些都极大地帮助和促进了整个社区的发展。</p>\n<p>Nginx代码库是原生的，且完全用C语言写成。Nginx已经被移植到许多系统架构和操作系统，包括：</p>\n<ul>\n<li>Linux</li>\n<li>FreeBSD</li>\n<li>Solaris</li>\n<li>Mac OS X</li>\n<li>AIX</li>\n<li>Microsoft Windows。</li>\n</ul>\n<p>Nginx有自己的函数库，并且除了zlib、PCRE和OpenSSL第三方库之外，标准模块只使用系统C库函数。此外，如果不需要或者考虑到潜在的授权冲突，可以不使用这些第三方库。</p>\n<p>简要谈谈关于Windows版本nginx。当nignx在Windows环境下工作时，Windows版本的nginx更像是概念验证而非全功能移植。这是由于目前nginx和Windows内核架构之间交互存在一定限制导致。Windows版本ngnix已暴露的问题包括：相对更低并发连接数、降低的性能、不支持缓存和带宽策略。未来Windows版本的nginx会尽力提供主流功能。</p>\n","excerpt":"","more":"<h2 id=\"Nginx-介绍（译文I–为什么高并发很重要）\"><a href=\"#Nginx-介绍（译文I–为什么高并发很重要）\" class=\"headerlink\" title=\"Nginx 介绍（译文I–为什么高并发很重要）\"></a>Nginx 介绍（译文I–为什么高并发很重要）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\">Andrew Alexeev</a></li>\n</ul>\n<ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br></li><br></ul>\n\n\n<h2 id=\"本章目录\"><a href=\"#本章目录\" class=\"headerlink\" title=\"本章目录\"></a>本章目录</h2><ul><br><li><a href=\"#概述\">概述</a></li><br><li><a href=\"#为什么高并发很重要？\">为什么高并发很重要？</a></li><br><ul><br><li><a href=\"#apache不适用了吗？\">Apache不适用了吗？</a></li><br><li><a href=\"#使用nginx有更多优势吗？\">使用nginx有更多优势吗？</a></li><br></ul><br></li><br></ul>\n\n\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>nginx(发音为‘engine x’)是俄罗斯软件工程师 Igor Sysoev开发的一款免费开源的web服务器。自2004年开源以来，nginx一直专注于<strong>高性能、高并发、低内存消耗</strong>。<br>此外，nginx具备web服务器最常用的功能，如:</p>\n<ul>\n<li>负载均衡</li>\n<li>缓存</li>\n<li>访问与带宽控制</li>\n<li>与多类软件易耦合的能力</li>\n</ul>\n<p>这些特性使得nginx非常适用于现代web站点架构。目前，nginx是网上第二大流行的开源web服务器软件。</p>\n<h2 id=\"为什么高并发很重要？\"><a href=\"#为什么高并发很重要？\" class=\"headerlink\" title=\"为什么高并发很重要？\"></a>为什么高并发很重要？</h2><p><strong>相比十年前，互联网已得到了广泛的普及与应用</strong>。<br>现在我们甚至难以想象离开互联网的世界。</p>\n<p>从最初基于NCSA</p>\n<p><strong>==&gt;</strong>进化到基于Apache web 提供的可进行简单文本操作的html</p>\n<p><strong>==&gt;</strong>到目前的全世界20亿用户永久在线媒介</p>\n<p>互联网一直在高速进化。</p>\n<p>随着</p>\n<ul>\n<li>永久在线个人电脑</li>\n<li>移动设备</li>\n<li>近期的平板电脑</li>\n</ul>\n<p>的扩散，互联网在不断的变化，整个经济体系也随之数字有线化。即时信息与娱乐服务变得更加轻盈精巧，在线业务的安全可靠性也发生了显著变化。因此，当下的网站服务比之前变得更复杂，<strong>web引擎需要在工程上更具健壮性和可扩展性。</strong></p>\n<p><strong>并发一直是web体系结构最大的挑战之一。</strong>自web services应用以来，并发能力持续增长。流行站点服务10w甚至100w的访问量非常常见。</p>\n<ul>\n<li>十年前，影响并发的主要因素是客户端缓慢－－－用户使用ADSL或者拨号连接网络。</li>\n<li>现在，并发主要由移动端和新的应用架构带来，这些应用采用长链接以便能让用户及时更新消息，微博和朋友圈等等。</li>\n<li>浏览器行为的变化是另一个导致并发增长的原因，现代浏览器访问网站时一般会打开4～6个并发以提高页面加载速度。</li>\n</ul>\n<p><strong>下面简要阐述一下客户端缓慢的问题</strong></p>\n<p>设想一个基于Apache的简单网站服务器，该服务器生成相对简短的100K的返回体–由文本或图片组成的简单页面。服务器耗费了不到一秒的时间生成一个页面，但是在80kbps(10KB/s)的网络环境下却耗费了10秒传输到客户端。网站服务器相对较快地推送10KB的内容，却需要在释放连接前耗费10秒钟将内容发送到客户端。</p>\n<p>现在设想有1000个客户端同时连接上，请求类似的内容。假设仅分配1M内存给每个客户端，那么就是说，1000个客户端，100KB的请求内容，服务端却要消耗1G的内存。</p>\n<p>事实上，一个典型的基于Apache的网站服务器需要为每个client分配超过1M的内存，而移动端的有效速度往往也在几十kbps。针对发送内容到客户端低效这个问题，虽然提高操作系统内核的socket缓冲区的大小，能一定程度上解决缓解问题，但是并不是一个通用的解决方案，并且有无法预期的副作用。</p>\n<p>而随着长连接的使用，该问题更加明显。为了避免新建HTTP连接所带来的延时，客户端往往会保持连接，而对于每个客户端服务器必然会分配一定数量的内存。</p>\n<p>因此，为了处理</p>\n<ul>\n<li>持续增长的用户带来的负载</li>\n<li>更高量级的并发</li>\n<li>持续处理以上这些的能力</li>\n</ul>\n<p>一个网站需要基于大量高效的组件。</p>\n<p>而web服务器在接受和处理客户端请求过程中，其它模块诸如：</p>\n<ul>\n<li>硬件（CPU，内存，磁盘）</li>\n<li>网络带宽</li>\n<li>应用和数据存储架构</li>\n<li>……等</li>\n</ul>\n<p>这些显然也很重要。因此，网站服务器需具备能够随着同时并发连接数和每秒请求数的增长而非线性扩展的能力。</p>\n<h3 id=\"Apache不适用了吗？\"><a href=\"#Apache不适用了吗？\" class=\"headerlink\" title=\"Apache不适用了吗？\"></a>Apache不适用了吗？</h3><p>起源于90年代初期Apache网站服务器，目前依旧主导着整个互联网。Apache的架构设计不仅仅适合于当时的操作系统和硬件，同时也十分符合当时的互联网环境－－一个网站通常使用一台物理服务器运行一个Apache实例。</p>\n<p>到了2000年之后，这种单服务器模型显然无法通过简单复制以来满足日益增长的web服务需求。虽然Apache为新功能开发提供了坚实的基础，但他为每个新连接派生一个进程的设计使得其无法适用于网站的非线性扩展。诚然，Apache作为通用的web服务器软件，聚焦于</p>\n<ul>\n<li>功能多样化</li>\n<li>第三方扩展开发</li>\n<li>以及普遍适用于几乎任何类型的web应用程序开发。</li>\n</ul>\n<p>然而随着</p>\n<ul>\n<li>每个连接消耗的CPU和内存越持续增长</li>\n<li>硬件成本降低</li>\n</ul>\n<p>这样功能繁多的单一软件可伸缩性越来越差。</p>\n<p>因而，当</p>\n<ul>\n<li>服务器硬件</li>\n<li>操作系统</li>\n<li>网络设施</li>\n</ul>\n<p>不再是网站增长的瓶颈时，全世界的网站开发者开始寻求更高效方法来运行web服务。大约十年前，著名软件工程师Daniel Kegel提出：“是时候让web服务器并发支持10000客户端了”，并且预言了当下的云服务。Kegel的C10K设想明显推动了许多人尝试解决这个问题–通过优化web服务器以支持海量客户端的并发处理，nginx便是其中最成功的案例之一。</p>\n<p>为了解决10000个并发连接的C10K问题，nginx基于一个完全不同的架构—－更适合并发连接数和每秒请求数非线性增长。Nginx基于事件模型，因此不会像Apache为每个请求创建新进程或线程。所以内存和CPU使用事件始终保持可预期，而不受负载影响。目前，一个普通硬件上搭建的Nginx便能处理数万的并发连接。</p>\n<p>在Nginx的第一个版本发布时，其主要作为apache的助手，处理如HTML、CSS、JavaScript脚本和图片等静态请求，以降低基于Apache应用服务器的并发和延时。随着开发的进行，nginx增加了</p>\n<ul>\n<li>FastCGI、uswge和SCGI等协议的支持</li>\n<li>对如memcached的分布式内存对象缓存系统的支持</li>\n<li>同时也增加了其它有用特性，如支持负载均衡和缓存的反向代理</li>\n</ul>\n<p>这些附加功能使nginx成为一个用于构建可伸缩的web基础设施高效的工具集。</p>\n<p>2012年2月，Apache 2.4.x版本发布。虽然最新版本的apache为加强可伸缩性和性能，增加了新的并发处理核心模块和代理模块。但要说性能、并发能力和资源利用率是否能赶上或超过纯事件驱动模型的web服务器还为时尚早。更高性能的Apache新版本令人高兴，但对于nginx+Apache的web网站架构，虽然这能够缓解后端潜在的瓶颈，却依旧无法解决部分遗留问题。</p>\n<h3 id=\"使用nginx有更多优势吗？\"><a href=\"#使用nginx有更多优势吗？\" class=\"headerlink\" title=\"使用nginx有更多优势吗？\"></a>使用nginx有更多优势吗？</h3><p>高性能高效地处理高并发一直是部署nginx最关键的优势。除此之外，还有更多有意义的优势。</p>\n<p>在过去的几年里，web架构一直带着解耦以及将应用层设施从web服务器中分离的理念。然而原先基于LAMP（Linux,apache,mysql php,python 或 perl）模式的web站点，或许并非仅仅转化为基于LEMP(E 是 Engine X),更多地是一种实践。这种实践将web服务器推入基础设施的边缘，并以全新的方式整合这些相同或修订后的应用集和数据库工具集。</p>\n<p>nginx的很多关键特性使得十分适合做这些工作。</p>\n<ul>\n<li>并发</li>\n<li>长连接处理</li>\n<li>SSL</li>\n<li>静态内容</li>\n<li>压缩和缓存</li>\n<li>连接和请求限速</li>\n<li>以及HTTP媒体流</li>\n<li><p>……等</p>\n<p>这些特性,使得nginx能够从应用层剥离而成为高效的边缘web服务层。除此之外，为提高处理大规模并发用户的性能，Nginx允许直接整合如memcached、Redis或者其他的NoSQL解决方案。</p>\n</li>\n</ul>\n<p>随着新环境下开发包和编程语言广泛使用，越来越多的公司开始改变应用的开发和部署习惯。Nginx已然成为这些改进案例最重要的模块之一，并且已经成功帮助过许多公司在预算内快速开发和部署其web服务。</p>\n<p>Nginx开发起始于2002年，在2004年基于 two-clause BSD 授权正式对外发布。自发布起，Nginx用户就在不断增长，开发者和用户贡献提议、提交bug报告、建议以及评测报告，这些都极大地帮助和促进了整个社区的发展。</p>\n<p>Nginx代码库是原生的，且完全用C语言写成。Nginx已经被移植到许多系统架构和操作系统，包括：</p>\n<ul>\n<li>Linux</li>\n<li>FreeBSD</li>\n<li>Solaris</li>\n<li>Mac OS X</li>\n<li>AIX</li>\n<li>Microsoft Windows。</li>\n</ul>\n<p>Nginx有自己的函数库，并且除了zlib、PCRE和OpenSSL第三方库之外，标准模块只使用系统C库函数。此外，如果不需要或者考虑到潜在的授权冲突，可以不使用这些第三方库。</p>\n<p>简要谈谈关于Windows版本nginx。当nignx在Windows环境下工作时，Windows版本的nginx更像是概念验证而非全功能移植。这是由于目前nginx和Windows内核架构之间交互存在一定限制导致。Windows版本ngnix已暴露的问题包括：相对更低并发连接数、降低的性能、不支持缓存和带宽策略。未来Windows版本的nginx会尽力提供主流功能。</p>\n"},{"layout":"post","title":"Nginx介绍(译文III--Nginx配置结构)","keywords":["nginx"],"description":"nginx","auther":"Shilry","comments":1,"_content":"\n\n## Nginx 介绍（译文III--Nginx配置结构）\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n## Nginx配置结构\nNginx配置系统的设计灵感来自于Igor Sysoev的Apache使用经验。他的主要观点是认为一个可扩展的配置管理系统是web服务器最基本要素。对于一个由大量虚拟服务器（virtual servers）、目录（durectirues）、位置（location）、数据集（datasets）组成的大型复杂配置而言，维护过程中很容易遇到扩展性问题。在一个相对较大的web设置、启动、管理工作，如果没有进行适当的设置，对于应用层和系统工程师而言，这无疑将是一个噩梦。\n\n所以，nginx的配置结构按照如下两点为目标进行设计：\n\n* 活在当下：简化日常维护\n* 着眼未来：为web服务器的配置扩展提供一个简单易用的方法。\n\n详细配置内容存放于一系列的存文本文件中，这些配置文件通常存放于/usr/local/etc/nginx和/etc/nginx下。主配置文件通常命名为nginx.conf。为了保持整洁，部分配置可放于单独文件中，并自动地被主配置文件引用。然而，需要注意的是，nginx目前并不支持Apache风格的分布式配置（如.htaccess等文件）。此外，所有和nginx web服务器行为相关的配置文件应统一集中指定。\n\n配置文件由主(Master)进程在启动时读取和校验。由于worker进程是从master进程派生（fork）的，故woker能够获取到已编译好的只读配置，其中自动共享通过常用虚拟内存管理机制实现。\n\nNginx配置有多个不同的上下文，如：\n\n* main\n* http \n* server\n* upstream\n* location \n* (以及用于邮件代理的 mail )等指令块。\n\n**上下文不会出现重叠**。例如，一个location指令块是不允许被放入main指令块中的。此外，为了避免引起不必要的歧义，不存在任何类似于“全局web服务器”的配置。Nginx配置诣在整洁和富有逻辑性，因而允许用户很容易去维护包含上千个指令的复杂的配置文件集。在一次私人会话中，Sysoev说：“全局服务器配置中的位置（location）、目录(directories)和其他模块（blocks）是Apache中我所不喜欢的特性，这就是不在nginx实现这些的原因。”\n\n配置语法、格式及定义依照所谓的C风格协定，这种创建配置文件的方法已被广泛应用于大量开源及商业软件程序中。通过设计，C风格配置有以下特性：\n\n* 适合嵌套描述\n* 赋有逻辑性\n* 易于创建、读取和维护\n* 易于自动化\n* 深受广大工程师喜爱\n\n虽然nginx部分配置准则类似与Apahce的某些配置项，但是配置nginx实例与apache是完全不同的体验。例如，nginx支持重写规则，但同样的功能，Apache系统管理员要手动去适配其重写配置。同样地，重写引擎的实现也不相同。\n\n此外，nginx的设置也提供了多种对底层机制的支持，这些往往是一个高效的web服务器配置中十分有用的模块。这里有必要简单提及nginx所有特有的变量和try_files指令：\n\n* 为更好的控制来控制运行时的web服务器配置，Nginx开发了变量用于提供附加的增强（even-more-powerful）机制。变量为快速赋值做了优化，并且为内部预编译的索引。赋值是按需执行的，例如，变量的值在一个特定请求的生命周期中通常只计算一次，而后缓存起来。变量可被不同的配置指令使用，为描述条件请求处理行为提供了更多灵活性。\n* try_files指令最初是为了在其更适应的场景下逐渐替换if条件配置语句，它的设计主要用于快速高效的尝试URI与内容之间的映射。总的来说，try_files指令很好用，并且极其高效和有用。强烈推荐读者完整地学习该指令，并在任何合适的地方使用它。\n\n\n\n","source":"_posts/2015-06-08-nginx-introduction-III.md","raw":"---\nlayout: post\ntitle: \"Nginx介绍(译文III--Nginx配置结构)\"\nkeywords: [\"nginx\"]\ndescription: \"nginx\"\ncategory: \"nginx\"\ntags: [\"nginx\"]\nauther: Shilry\ncomments: true\n---\n\n\n## Nginx 介绍（译文III--Nginx配置结构）\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n## Nginx配置结构\nNginx配置系统的设计灵感来自于Igor Sysoev的Apache使用经验。他的主要观点是认为一个可扩展的配置管理系统是web服务器最基本要素。对于一个由大量虚拟服务器（virtual servers）、目录（durectirues）、位置（location）、数据集（datasets）组成的大型复杂配置而言，维护过程中很容易遇到扩展性问题。在一个相对较大的web设置、启动、管理工作，如果没有进行适当的设置，对于应用层和系统工程师而言，这无疑将是一个噩梦。\n\n所以，nginx的配置结构按照如下两点为目标进行设计：\n\n* 活在当下：简化日常维护\n* 着眼未来：为web服务器的配置扩展提供一个简单易用的方法。\n\n详细配置内容存放于一系列的存文本文件中，这些配置文件通常存放于/usr/local/etc/nginx和/etc/nginx下。主配置文件通常命名为nginx.conf。为了保持整洁，部分配置可放于单独文件中，并自动地被主配置文件引用。然而，需要注意的是，nginx目前并不支持Apache风格的分布式配置（如.htaccess等文件）。此外，所有和nginx web服务器行为相关的配置文件应统一集中指定。\n\n配置文件由主(Master)进程在启动时读取和校验。由于worker进程是从master进程派生（fork）的，故woker能够获取到已编译好的只读配置，其中自动共享通过常用虚拟内存管理机制实现。\n\nNginx配置有多个不同的上下文，如：\n\n* main\n* http \n* server\n* upstream\n* location \n* (以及用于邮件代理的 mail )等指令块。\n\n**上下文不会出现重叠**。例如，一个location指令块是不允许被放入main指令块中的。此外，为了避免引起不必要的歧义，不存在任何类似于“全局web服务器”的配置。Nginx配置诣在整洁和富有逻辑性，因而允许用户很容易去维护包含上千个指令的复杂的配置文件集。在一次私人会话中，Sysoev说：“全局服务器配置中的位置（location）、目录(directories)和其他模块（blocks）是Apache中我所不喜欢的特性，这就是不在nginx实现这些的原因。”\n\n配置语法、格式及定义依照所谓的C风格协定，这种创建配置文件的方法已被广泛应用于大量开源及商业软件程序中。通过设计，C风格配置有以下特性：\n\n* 适合嵌套描述\n* 赋有逻辑性\n* 易于创建、读取和维护\n* 易于自动化\n* 深受广大工程师喜爱\n\n虽然nginx部分配置准则类似与Apahce的某些配置项，但是配置nginx实例与apache是完全不同的体验。例如，nginx支持重写规则，但同样的功能，Apache系统管理员要手动去适配其重写配置。同样地，重写引擎的实现也不相同。\n\n此外，nginx的设置也提供了多种对底层机制的支持，这些往往是一个高效的web服务器配置中十分有用的模块。这里有必要简单提及nginx所有特有的变量和try_files指令：\n\n* 为更好的控制来控制运行时的web服务器配置，Nginx开发了变量用于提供附加的增强（even-more-powerful）机制。变量为快速赋值做了优化，并且为内部预编译的索引。赋值是按需执行的，例如，变量的值在一个特定请求的生命周期中通常只计算一次，而后缓存起来。变量可被不同的配置指令使用，为描述条件请求处理行为提供了更多灵活性。\n* try_files指令最初是为了在其更适应的场景下逐渐替换if条件配置语句，它的设计主要用于快速高效的尝试URI与内容之间的映射。总的来说，try_files指令很好用，并且极其高效和有用。强烈推荐读者完整地学习该指令，并在任何合适的地方使用它。\n\n\n\n","slug":"2015-06-08-nginx-introduction-III","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhht003jqj7ljdy5ofoh","content":"<h2 id=\"Nginx-介绍（译文III–Nginx配置结构）\"><a href=\"#Nginx-介绍（译文III–Nginx配置结构）\" class=\"headerlink\" title=\"Nginx 介绍（译文III–Nginx配置结构）\"></a>Nginx 介绍（译文III–Nginx配置结构）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\" target=\"_blank\" rel=\"external\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\" target=\"_blank\" rel=\"external\">Andrew Alexeev</a><ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br></ul></li><br></ul>\n\n\n\n<h2 id=\"Nginx配置结构\"><a href=\"#Nginx配置结构\" class=\"headerlink\" title=\"Nginx配置结构\"></a>Nginx配置结构</h2><p>Nginx配置系统的设计灵感来自于Igor Sysoev的Apache使用经验。他的主要观点是认为一个可扩展的配置管理系统是web服务器最基本要素。对于一个由大量虚拟服务器（virtual servers）、目录（durectirues）、位置（location）、数据集（datasets）组成的大型复杂配置而言，维护过程中很容易遇到扩展性问题。在一个相对较大的web设置、启动、管理工作，如果没有进行适当的设置，对于应用层和系统工程师而言，这无疑将是一个噩梦。</p>\n<p>所以，nginx的配置结构按照如下两点为目标进行设计：</p>\n<ul>\n<li>活在当下：简化日常维护</li>\n<li>着眼未来：为web服务器的配置扩展提供一个简单易用的方法。</li>\n</ul>\n<p>详细配置内容存放于一系列的存文本文件中，这些配置文件通常存放于/usr/local/etc/nginx和/etc/nginx下。主配置文件通常命名为nginx.conf。为了保持整洁，部分配置可放于单独文件中，并自动地被主配置文件引用。然而，需要注意的是，nginx目前并不支持Apache风格的分布式配置（如.htaccess等文件）。此外，所有和nginx web服务器行为相关的配置文件应统一集中指定。</p>\n<p>配置文件由主(Master)进程在启动时读取和校验。由于worker进程是从master进程派生（fork）的，故woker能够获取到已编译好的只读配置，其中自动共享通过常用虚拟内存管理机制实现。</p>\n<p>Nginx配置有多个不同的上下文，如：</p>\n<ul>\n<li>main</li>\n<li>http </li>\n<li>server</li>\n<li>upstream</li>\n<li>location </li>\n<li>(以及用于邮件代理的 mail )等指令块。</li>\n</ul>\n<p><strong>上下文不会出现重叠</strong>。例如，一个location指令块是不允许被放入main指令块中的。此外，为了避免引起不必要的歧义，不存在任何类似于“全局web服务器”的配置。Nginx配置诣在整洁和富有逻辑性，因而允许用户很容易去维护包含上千个指令的复杂的配置文件集。在一次私人会话中，Sysoev说：“全局服务器配置中的位置（location）、目录(directories)和其他模块（blocks）是Apache中我所不喜欢的特性，这就是不在nginx实现这些的原因。”</p>\n<p>配置语法、格式及定义依照所谓的C风格协定，这种创建配置文件的方法已被广泛应用于大量开源及商业软件程序中。通过设计，C风格配置有以下特性：</p>\n<ul>\n<li>适合嵌套描述</li>\n<li>赋有逻辑性</li>\n<li>易于创建、读取和维护</li>\n<li>易于自动化</li>\n<li>深受广大工程师喜爱</li>\n</ul>\n<p>虽然nginx部分配置准则类似与Apahce的某些配置项，但是配置nginx实例与apache是完全不同的体验。例如，nginx支持重写规则，但同样的功能，Apache系统管理员要手动去适配其重写配置。同样地，重写引擎的实现也不相同。</p>\n<p>此外，nginx的设置也提供了多种对底层机制的支持，这些往往是一个高效的web服务器配置中十分有用的模块。这里有必要简单提及nginx所有特有的变量和try_files指令：</p>\n<ul>\n<li>为更好的控制来控制运行时的web服务器配置，Nginx开发了变量用于提供附加的增强（even-more-powerful）机制。变量为快速赋值做了优化，并且为内部预编译的索引。赋值是按需执行的，例如，变量的值在一个特定请求的生命周期中通常只计算一次，而后缓存起来。变量可被不同的配置指令使用，为描述条件请求处理行为提供了更多灵活性。</li>\n<li>try_files指令最初是为了在其更适应的场景下逐渐替换if条件配置语句，它的设计主要用于快速高效的尝试URI与内容之间的映射。总的来说，try_files指令很好用，并且极其高效和有用。强烈推荐读者完整地学习该指令，并在任何合适的地方使用它。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Nginx-介绍（译文III–Nginx配置结构）\"><a href=\"#Nginx-介绍（译文III–Nginx配置结构）\" class=\"headerlink\" title=\"Nginx 介绍（译文III–Nginx配置结构）\"></a>Nginx 介绍（译文III–Nginx配置结构）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\">Andrew Alexeev</a><ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br></li><br></ul>\n\n</li>\n</ul>\n<h2 id=\"Nginx配置结构\"><a href=\"#Nginx配置结构\" class=\"headerlink\" title=\"Nginx配置结构\"></a>Nginx配置结构</h2><p>Nginx配置系统的设计灵感来自于Igor Sysoev的Apache使用经验。他的主要观点是认为一个可扩展的配置管理系统是web服务器最基本要素。对于一个由大量虚拟服务器（virtual servers）、目录（durectirues）、位置（location）、数据集（datasets）组成的大型复杂配置而言，维护过程中很容易遇到扩展性问题。在一个相对较大的web设置、启动、管理工作，如果没有进行适当的设置，对于应用层和系统工程师而言，这无疑将是一个噩梦。</p>\n<p>所以，nginx的配置结构按照如下两点为目标进行设计：</p>\n<ul>\n<li>活在当下：简化日常维护</li>\n<li>着眼未来：为web服务器的配置扩展提供一个简单易用的方法。</li>\n</ul>\n<p>详细配置内容存放于一系列的存文本文件中，这些配置文件通常存放于/usr/local/etc/nginx和/etc/nginx下。主配置文件通常命名为nginx.conf。为了保持整洁，部分配置可放于单独文件中，并自动地被主配置文件引用。然而，需要注意的是，nginx目前并不支持Apache风格的分布式配置（如.htaccess等文件）。此外，所有和nginx web服务器行为相关的配置文件应统一集中指定。</p>\n<p>配置文件由主(Master)进程在启动时读取和校验。由于worker进程是从master进程派生（fork）的，故woker能够获取到已编译好的只读配置，其中自动共享通过常用虚拟内存管理机制实现。</p>\n<p>Nginx配置有多个不同的上下文，如：</p>\n<ul>\n<li>main</li>\n<li>http </li>\n<li>server</li>\n<li>upstream</li>\n<li>location </li>\n<li>(以及用于邮件代理的 mail )等指令块。</li>\n</ul>\n<p><strong>上下文不会出现重叠</strong>。例如，一个location指令块是不允许被放入main指令块中的。此外，为了避免引起不必要的歧义，不存在任何类似于“全局web服务器”的配置。Nginx配置诣在整洁和富有逻辑性，因而允许用户很容易去维护包含上千个指令的复杂的配置文件集。在一次私人会话中，Sysoev说：“全局服务器配置中的位置（location）、目录(directories)和其他模块（blocks）是Apache中我所不喜欢的特性，这就是不在nginx实现这些的原因。”</p>\n<p>配置语法、格式及定义依照所谓的C风格协定，这种创建配置文件的方法已被广泛应用于大量开源及商业软件程序中。通过设计，C风格配置有以下特性：</p>\n<ul>\n<li>适合嵌套描述</li>\n<li>赋有逻辑性</li>\n<li>易于创建、读取和维护</li>\n<li>易于自动化</li>\n<li>深受广大工程师喜爱</li>\n</ul>\n<p>虽然nginx部分配置准则类似与Apahce的某些配置项，但是配置nginx实例与apache是完全不同的体验。例如，nginx支持重写规则，但同样的功能，Apache系统管理员要手动去适配其重写配置。同样地，重写引擎的实现也不相同。</p>\n<p>此外，nginx的设置也提供了多种对底层机制的支持，这些往往是一个高效的web服务器配置中十分有用的模块。这里有必要简单提及nginx所有特有的变量和try_files指令：</p>\n<ul>\n<li>为更好的控制来控制运行时的web服务器配置，Nginx开发了变量用于提供附加的增强（even-more-powerful）机制。变量为快速赋值做了优化，并且为内部预编译的索引。赋值是按需执行的，例如，变量的值在一个特定请求的生命周期中通常只计算一次，而后缓存起来。变量可被不同的配置指令使用，为描述条件请求处理行为提供了更多灵活性。</li>\n<li>try_files指令最初是为了在其更适应的场景下逐渐替换if条件配置语句，它的设计主要用于快速高效的尝试URI与内容之间的映射。总的来说，try_files指令很好用，并且极其高效和有用。强烈推荐读者完整地学习该指令，并在任何合适的地方使用它。</li>\n</ul>\n"},{"layout":"post","title":"Nginx介绍(译文II--Nginx架构综述)","keywords":["nginx"],"description":"nginx","comments":1,"_content":"\n\n## Nginx 介绍（译文II--Nginx架构综述）\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n## 本章目录\n\n<ul>\n<li><a href=\"#Nginx架构综述\">Nginx架构综述</a></li>\n<ul>\n<li><a href=\"#代码结构\">代码结构</a></li>\n<li><a href=\"#worker模型\">Worker模型</a></li>\n<li><a href=\"#nginx进程角色\">Nginx进程角色</a></li>\n<li><a href=\"#nginx缓存概述\">Nginx缓存概述</a></li>\n\n</ul>\n</ul>\n\n\n\n## Nginx架构综述\n\n使用单独的线程或进程处理每个连接,是基于线程或进程处理并发连接的传统做法。\n\n* 该做法往往会阻塞于网络和I/O操作。\n* 对于不同的应用，这种做法可能会使内存和CPU消耗变得非常低效。\n* 创建一个新的进程或线程需要准备新的运行环境，包括在内存中分配新的堆栈、新的运行上下文。\n在创建这些过程中，必然会产生额外的CPU时间，而这种运行上下文切换引起的线程抖动最终将造成性能低下。\n\n以上的这些并发症几乎存在于所有在如Apache这样的老旧网站服务架构中。因此，我们往往需要在丰富的通用特性集和优化服务器资源之间权衡利弊。\n\n早期的nginx为了做一个专注于为**动态扩展网站**提供\n\n* 更高性能\n* 高密度\n* 更有效\n\n 的使用服务器资源的专业工具，因此使用了不一样的模型。\n \n 实际上，随着各操作系统上的高级事件驱动开发的发展，使得一个\n \n * 模块化\n * 事件驱动\n * 异步\n * 单线程\n * 无阻塞架构\n \n成为了nginx源码的基础。\n\nNginx主要使用了**多路复用**与**事件通知**方式，将各个任务分发给各个特定进程。所有的请求连接由数量有限的进程（被称为worker）处理，各个worker使用一个高效的单线程循环处理，每个worer进程每秒可处理上千个并发和请求。\n\n### 代码结构\n\nNginx worker的代码包含**核心**和**功能模块**。\n\n* 核心负责维护一个严谨的处理循环，并且在请求处理的每个阶段执行对应的代码模块。\n* 模块负责大部分展示和应用层功能，包括从网络和存储设备读取、写入，内容转换、执行输出过滤，执行服务端嵌入（SSI）操作、以及在启用代理时转发请求给后端服务器。\n\n得益于nginx模块化的架构，开发者可以在无需修改核心的基础上，对服务器的功能进行扩展。Nginx的典型模块并不多，分别是：\n\n* 核心模块\n* 事件模块\n* 阶段处理器\n* 协议、变量处理器\n* 过滤器\n* 上游和负载均衡器\n\n目前，nginx并不支持动态加载模块，即模块代码是在编译核心代码时一起编译的。然而，动态加载模块和ABI已列入未来主要发布版本计划中。各个模块角色的详细信息可查看后面的nginx Internals。\n\nNginx通过使用事件通知机制和一系列提高IO的工具(在Linux、Solaris和基于BSD的操作系统上使用kqueue、epoll和event ports等技术)，来处理大量操作如接受、处理和管理连接、检索内容。其目的在于尽可能的提示操作系统，对进出流量，磁盘操作，套接字读写操作，超时等事件及时异步地获取反馈。其中，多路复用与高级I/O操作的各种方式，对每个基于Unix操作系统运行的nginx都做了高度的优化。\n\n图14.1展示了nginx架构的整体设计。\n<img src=\"/images/nginx-architecture.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\" />\n\nnginx-architecture.png-nginx架构图\n\n### Worker模型\n\n如前面提到的，**nginx不会为每个连接创建新的进程或线程**。而是由worker进程各自通过共享“监听”socket来接收新请求，同时每个worker内部会使用一个高效的处理循环来处理上千个连接。在Nginx中，不存在特定的仲裁器或分发器用以分发连接给各个worker，这个工作由操作系统内核机制完成。服务启动时，一组监听socket被创建并完成初始化，workers进程不断地从这些套接字接受、读取HTTP请求和输出响应。\n\n**事件处理循环是nginx worker代码中最复杂的部分，它包含了全面的内部调用，并且高度依赖异步任务处理的思想**。异步操作通过\n\n* 模块化\n* 事件通知\n* 大量使用回调函数\n* 高度调优的定时器\n\n等实现。\n\n总之，关键原则就是**尽可能做到非阻塞**。目前唯一还会引起Nginx阻塞的条件是woker的磁盘性能不足。\n\n* 由于nginx不为每个连接创建新进程或线程，故内存使用在大多场景中是传统并高效的。\n* 同时由于不用频繁创建－销毁进程或线程，nginx也很节省CPU时间。\n* Nginx所做的就是检查网络和存储的状态，初始化新连接、将其添加到主循环，异步处理直到完成，而后才从主循环中释放并删除。\n* 结合精心设计的系统调用、优雅实现诸如内存池等支持接口，nginx基本能够做到中低CPU使用率，即使在极端负载的情况下也不例外。\n\n **因为nginx创建了多个worker进程来处理连接，所以能够很好的利用多核CPU。**通常一核一worker便能完全利用多核体系架构，并能够优雅的避免线程抖动与锁。这是因为在一个单线程？的worker进程内部不存在资源匮乏，并且资源控制机制也能很好的隔离。此外这个模型也允许\n \n * 在物理存储设备之间进行扩展\n * 提高磁盘利用率\n * 避免磁盘I/O导致的阻塞\n \n 总之，这种将工作负载分布到多个worker进程上的方式，最终能使服务器资源被更高效的利用。\n\n**nginx worker进程数应根据具体的磁盘使用和CPU负载的模式进行调整**。具体实施方法比较简单，系统管理员往往是根据具体负载情况进行多次配置项的尝试。一般会推荐如下做法：\n\n* 如果负载模式是CPU密集型－－如处理大量的TCP/IP协议，使用SSL，或者压缩数据－－那么nginx worker进程数与CPU核数相当；\n* 如果是磁盘密集型－－如从存储磁盘中读取多样化内容给客户端的服务，或包含大量的代理服务－－此时worker的进程数应该是CPU核数的1.5～2倍。\n\n一些工程师会基于独立存储单元的个数来选择worker进程数，然而该方法的有效性会受到磁盘存储类型和配置的影响。\n\n**解决如何避免由磁盘I/O引起的大部分阻塞，**是Nginx开发者在未来版本中需要解决的主要问题之一。目前，针对某个woker的磁盘操作,如果没有足够的存储性能为其服务，该进程就可能会一直阻塞在磁盘读写操作上。当然，存在多种机制和配置指令文件用于缓解这类磁盘I/O阻塞的场景，典型的做法如结合一些像sendfile和异步IO指令，便可以为磁盘操作节省大量的空间。同时，在nginx的安装过程中，也应将数据集，可用内存数，以及底层存储架构来规划在内。\n\n**对嵌入脚本的支持有限**，是当前的worker模型存在的另一个问题。例如，标准的nginx发布版本只支持Perl作为嵌入脚本语言。原因很简单：关键是嵌入脚本很可能会在任何操作上阻塞或者异常退出，而这两个行为都会直接导致worker进程挂住而同时影响数千个连接。与此相关的更多工作已列入Nginx开发计划，即将脚本更简单，更可靠地嵌入nginx并且更适合广泛应用。\n\n## Nginx进程角色\n\nNginx在内存中运行多个进程：\n\n* 一个单独master进程\n* 多个worker进程\n* 一些特殊用途的进程，如缓存加载进程、缓存管理进程\n\n在nginx 1.x版本，所有进程都是单线程的，且主要使用共享内存机制作为进程间通信机制。除Master进程使用root用户权限运行外，缓存加载进程、缓存管理进程以及所有worker进程都使用非特权用户权限运行。\n\nmaster进程负责下列工作:\n\n* 读取和验证配置文件\n* 创建、绑定、关闭sockets\n* 按照配置数量启动、终止、维护worker进程\n* 不中断服务的形式生效新配置文件\n* 不中断服务的形式升级程序（启动新版本且需要时回滚）\n* 重新打开日志文件\n* 编译嵌入Perl脚本\n\nWorker进程负责：\n\n* 接受、处理来自客户端的连接\n* 提供反向代理和过滤功能\n* 提供其他nginx所具有的所有功能。\n\n由于worker进程是web服务器每日操作的实际执行者，关于监控nginx实例，系统管理员实际还需要时刻关注worker进程。\n\n缓存加载进程的主要职责：\n\n* 负责检查磁盘上的缓存数据\n* 维护缓存元数据的内存数据库\n\n缓存加载进程负责管理缓存相关数据的载入和更新。Nginx的文件存于一个分配好的特定目录结构下，缓存加载进程负责管理这些文件，为nginx实例做准备，主要为：\n\n1. 会遍历目录\n2. 检查缓存内容的元数据\n3. 更新共享内存中的相关条目\n4. 当数据已整理干净并做好准备时，退出服务。\n\n缓存管理进程主要负责缓存过期和失效。它在nginx正常操作时存在于内存中，在出现故障时由master进程重启。\n\n### Nginx缓存概述\n\nNginx的缓存基于文件系统使用分层数据存储实现，特点如下：\n\n* 缓存主键（key）可配置\n* 可使用不同特定请求参数来控制缓存内容\n* 缓存主键(key)和缓存元数据存储在共享内存段中，这样做的好处是缓存加载进程、缓存管理进程和worker进程都能访问到。\n* 目前不支持在内存中缓存文件，但可以用操作系统的虚拟文件系统机制进行优化。\n* 每个缓存的响应体存于文件系统的一个特定文件中，其中该存储的层次结构（层数及命名规则）由Nginx配置指令控制。\n* Nginx根据代理url的Md5值实现哈希算法，来实现获取某个已被缓存的响应体在该缓存目录结构中的文件名及路径。\n\n其中，Nginx将数据内容放入缓存的过程如下：\n\n1. 在nginx从后端服务器读取响应时，该数据此时被写入到一个临时目录（非缓存文件目录）下的临时文件中。\n2. 当nginx完成该请求处理后，该临时文件被重命名并移动到缓存文件目录下。注意如果以上临时目录与缓存目录不属于同一个文件系统，则临时文件会被拷贝一次。所以建议将临时目录和缓存目录放在同一个文件系统中。\n\n此外，管理缓存文件目录可使用如下方法：\n\n* 如果需要显示地清理缓存目录，从缓存目录结构下删除文件的行为是绝对安全的。\n* 可以使用一些nginx的第三方扩展远程控制缓存内容\n* 更多以上管理（远程or本地）缓存目录相关的工作，已被列入到主发布版的计划中。\n\n\n\n","source":"_posts/2015-06-03-nginx-introduction-II.md","raw":"---\nlayout: post\ntitle: \"Nginx介绍(译文II--Nginx架构综述)\"\nkeywords: [\"nginx\"]\ndescription: \"nginx\"\ncategory: \"nginx\"\ntags: [\"nginx\"]\ncomments: true\n---\n\n\n## Nginx 介绍（译文II--Nginx架构综述）\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n## 本章目录\n\n<ul>\n<li><a href=\"#Nginx架构综述\">Nginx架构综述</a></li>\n<ul>\n<li><a href=\"#代码结构\">代码结构</a></li>\n<li><a href=\"#worker模型\">Worker模型</a></li>\n<li><a href=\"#nginx进程角色\">Nginx进程角色</a></li>\n<li><a href=\"#nginx缓存概述\">Nginx缓存概述</a></li>\n\n</ul>\n</ul>\n\n\n\n## Nginx架构综述\n\n使用单独的线程或进程处理每个连接,是基于线程或进程处理并发连接的传统做法。\n\n* 该做法往往会阻塞于网络和I/O操作。\n* 对于不同的应用，这种做法可能会使内存和CPU消耗变得非常低效。\n* 创建一个新的进程或线程需要准备新的运行环境，包括在内存中分配新的堆栈、新的运行上下文。\n在创建这些过程中，必然会产生额外的CPU时间，而这种运行上下文切换引起的线程抖动最终将造成性能低下。\n\n以上的这些并发症几乎存在于所有在如Apache这样的老旧网站服务架构中。因此，我们往往需要在丰富的通用特性集和优化服务器资源之间权衡利弊。\n\n早期的nginx为了做一个专注于为**动态扩展网站**提供\n\n* 更高性能\n* 高密度\n* 更有效\n\n 的使用服务器资源的专业工具，因此使用了不一样的模型。\n \n 实际上，随着各操作系统上的高级事件驱动开发的发展，使得一个\n \n * 模块化\n * 事件驱动\n * 异步\n * 单线程\n * 无阻塞架构\n \n成为了nginx源码的基础。\n\nNginx主要使用了**多路复用**与**事件通知**方式，将各个任务分发给各个特定进程。所有的请求连接由数量有限的进程（被称为worker）处理，各个worker使用一个高效的单线程循环处理，每个worer进程每秒可处理上千个并发和请求。\n\n### 代码结构\n\nNginx worker的代码包含**核心**和**功能模块**。\n\n* 核心负责维护一个严谨的处理循环，并且在请求处理的每个阶段执行对应的代码模块。\n* 模块负责大部分展示和应用层功能，包括从网络和存储设备读取、写入，内容转换、执行输出过滤，执行服务端嵌入（SSI）操作、以及在启用代理时转发请求给后端服务器。\n\n得益于nginx模块化的架构，开发者可以在无需修改核心的基础上，对服务器的功能进行扩展。Nginx的典型模块并不多，分别是：\n\n* 核心模块\n* 事件模块\n* 阶段处理器\n* 协议、变量处理器\n* 过滤器\n* 上游和负载均衡器\n\n目前，nginx并不支持动态加载模块，即模块代码是在编译核心代码时一起编译的。然而，动态加载模块和ABI已列入未来主要发布版本计划中。各个模块角色的详细信息可查看后面的nginx Internals。\n\nNginx通过使用事件通知机制和一系列提高IO的工具(在Linux、Solaris和基于BSD的操作系统上使用kqueue、epoll和event ports等技术)，来处理大量操作如接受、处理和管理连接、检索内容。其目的在于尽可能的提示操作系统，对进出流量，磁盘操作，套接字读写操作，超时等事件及时异步地获取反馈。其中，多路复用与高级I/O操作的各种方式，对每个基于Unix操作系统运行的nginx都做了高度的优化。\n\n图14.1展示了nginx架构的整体设计。\n<img src=\"/images/nginx-architecture.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\" />\n\nnginx-architecture.png-nginx架构图\n\n### Worker模型\n\n如前面提到的，**nginx不会为每个连接创建新的进程或线程**。而是由worker进程各自通过共享“监听”socket来接收新请求，同时每个worker内部会使用一个高效的处理循环来处理上千个连接。在Nginx中，不存在特定的仲裁器或分发器用以分发连接给各个worker，这个工作由操作系统内核机制完成。服务启动时，一组监听socket被创建并完成初始化，workers进程不断地从这些套接字接受、读取HTTP请求和输出响应。\n\n**事件处理循环是nginx worker代码中最复杂的部分，它包含了全面的内部调用，并且高度依赖异步任务处理的思想**。异步操作通过\n\n* 模块化\n* 事件通知\n* 大量使用回调函数\n* 高度调优的定时器\n\n等实现。\n\n总之，关键原则就是**尽可能做到非阻塞**。目前唯一还会引起Nginx阻塞的条件是woker的磁盘性能不足。\n\n* 由于nginx不为每个连接创建新进程或线程，故内存使用在大多场景中是传统并高效的。\n* 同时由于不用频繁创建－销毁进程或线程，nginx也很节省CPU时间。\n* Nginx所做的就是检查网络和存储的状态，初始化新连接、将其添加到主循环，异步处理直到完成，而后才从主循环中释放并删除。\n* 结合精心设计的系统调用、优雅实现诸如内存池等支持接口，nginx基本能够做到中低CPU使用率，即使在极端负载的情况下也不例外。\n\n **因为nginx创建了多个worker进程来处理连接，所以能够很好的利用多核CPU。**通常一核一worker便能完全利用多核体系架构，并能够优雅的避免线程抖动与锁。这是因为在一个单线程？的worker进程内部不存在资源匮乏，并且资源控制机制也能很好的隔离。此外这个模型也允许\n \n * 在物理存储设备之间进行扩展\n * 提高磁盘利用率\n * 避免磁盘I/O导致的阻塞\n \n 总之，这种将工作负载分布到多个worker进程上的方式，最终能使服务器资源被更高效的利用。\n\n**nginx worker进程数应根据具体的磁盘使用和CPU负载的模式进行调整**。具体实施方法比较简单，系统管理员往往是根据具体负载情况进行多次配置项的尝试。一般会推荐如下做法：\n\n* 如果负载模式是CPU密集型－－如处理大量的TCP/IP协议，使用SSL，或者压缩数据－－那么nginx worker进程数与CPU核数相当；\n* 如果是磁盘密集型－－如从存储磁盘中读取多样化内容给客户端的服务，或包含大量的代理服务－－此时worker的进程数应该是CPU核数的1.5～2倍。\n\n一些工程师会基于独立存储单元的个数来选择worker进程数，然而该方法的有效性会受到磁盘存储类型和配置的影响。\n\n**解决如何避免由磁盘I/O引起的大部分阻塞，**是Nginx开发者在未来版本中需要解决的主要问题之一。目前，针对某个woker的磁盘操作,如果没有足够的存储性能为其服务，该进程就可能会一直阻塞在磁盘读写操作上。当然，存在多种机制和配置指令文件用于缓解这类磁盘I/O阻塞的场景，典型的做法如结合一些像sendfile和异步IO指令，便可以为磁盘操作节省大量的空间。同时，在nginx的安装过程中，也应将数据集，可用内存数，以及底层存储架构来规划在内。\n\n**对嵌入脚本的支持有限**，是当前的worker模型存在的另一个问题。例如，标准的nginx发布版本只支持Perl作为嵌入脚本语言。原因很简单：关键是嵌入脚本很可能会在任何操作上阻塞或者异常退出，而这两个行为都会直接导致worker进程挂住而同时影响数千个连接。与此相关的更多工作已列入Nginx开发计划，即将脚本更简单，更可靠地嵌入nginx并且更适合广泛应用。\n\n## Nginx进程角色\n\nNginx在内存中运行多个进程：\n\n* 一个单独master进程\n* 多个worker进程\n* 一些特殊用途的进程，如缓存加载进程、缓存管理进程\n\n在nginx 1.x版本，所有进程都是单线程的，且主要使用共享内存机制作为进程间通信机制。除Master进程使用root用户权限运行外，缓存加载进程、缓存管理进程以及所有worker进程都使用非特权用户权限运行。\n\nmaster进程负责下列工作:\n\n* 读取和验证配置文件\n* 创建、绑定、关闭sockets\n* 按照配置数量启动、终止、维护worker进程\n* 不中断服务的形式生效新配置文件\n* 不中断服务的形式升级程序（启动新版本且需要时回滚）\n* 重新打开日志文件\n* 编译嵌入Perl脚本\n\nWorker进程负责：\n\n* 接受、处理来自客户端的连接\n* 提供反向代理和过滤功能\n* 提供其他nginx所具有的所有功能。\n\n由于worker进程是web服务器每日操作的实际执行者，关于监控nginx实例，系统管理员实际还需要时刻关注worker进程。\n\n缓存加载进程的主要职责：\n\n* 负责检查磁盘上的缓存数据\n* 维护缓存元数据的内存数据库\n\n缓存加载进程负责管理缓存相关数据的载入和更新。Nginx的文件存于一个分配好的特定目录结构下，缓存加载进程负责管理这些文件，为nginx实例做准备，主要为：\n\n1. 会遍历目录\n2. 检查缓存内容的元数据\n3. 更新共享内存中的相关条目\n4. 当数据已整理干净并做好准备时，退出服务。\n\n缓存管理进程主要负责缓存过期和失效。它在nginx正常操作时存在于内存中，在出现故障时由master进程重启。\n\n### Nginx缓存概述\n\nNginx的缓存基于文件系统使用分层数据存储实现，特点如下：\n\n* 缓存主键（key）可配置\n* 可使用不同特定请求参数来控制缓存内容\n* 缓存主键(key)和缓存元数据存储在共享内存段中，这样做的好处是缓存加载进程、缓存管理进程和worker进程都能访问到。\n* 目前不支持在内存中缓存文件，但可以用操作系统的虚拟文件系统机制进行优化。\n* 每个缓存的响应体存于文件系统的一个特定文件中，其中该存储的层次结构（层数及命名规则）由Nginx配置指令控制。\n* Nginx根据代理url的Md5值实现哈希算法，来实现获取某个已被缓存的响应体在该缓存目录结构中的文件名及路径。\n\n其中，Nginx将数据内容放入缓存的过程如下：\n\n1. 在nginx从后端服务器读取响应时，该数据此时被写入到一个临时目录（非缓存文件目录）下的临时文件中。\n2. 当nginx完成该请求处理后，该临时文件被重命名并移动到缓存文件目录下。注意如果以上临时目录与缓存目录不属于同一个文件系统，则临时文件会被拷贝一次。所以建议将临时目录和缓存目录放在同一个文件系统中。\n\n此外，管理缓存文件目录可使用如下方法：\n\n* 如果需要显示地清理缓存目录，从缓存目录结构下删除文件的行为是绝对安全的。\n* 可以使用一些nginx的第三方扩展远程控制缓存内容\n* 更多以上管理（远程or本地）缓存目录相关的工作，已被列入到主发布版的计划中。\n\n\n\n","slug":"2015-06-03-nginx-introduction-II","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhu003mqj7lasbwefs4","content":"<h2 id=\"Nginx-介绍（译文II–Nginx架构综述）\"><a href=\"#Nginx-介绍（译文II–Nginx架构综述）\" class=\"headerlink\" title=\"Nginx 介绍（译文II–Nginx架构综述）\"></a>Nginx 介绍（译文II–Nginx架构综述）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\" target=\"_blank\" rel=\"external\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\" target=\"_blank\" rel=\"external\">Andrew Alexeev</a></li>\n</ul>\n<ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br><br></ul>\n\n<h2 id=\"本章目录\"><a href=\"#本章目录\" class=\"headerlink\" title=\"本章目录\"></a>本章目录</h2><ul><br><li><a href=\"#Nginx架构综述\">Nginx架构综述</a></li><br><ul><br><li><a href=\"#代码结构\">代码结构</a></li><br><li><a href=\"#worker模型\">Worker模型</a></li><br><li><a href=\"#nginx进程角色\">Nginx进程角色</a></li><br><li><a href=\"#nginx缓存概述\">Nginx缓存概述</a></li><br><br></ul><br></ul>\n\n\n\n<h2 id=\"Nginx架构综述\"><a href=\"#Nginx架构综述\" class=\"headerlink\" title=\"Nginx架构综述\"></a>Nginx架构综述</h2><p>使用单独的线程或进程处理每个连接,是基于线程或进程处理并发连接的传统做法。</p>\n<ul>\n<li>该做法往往会阻塞于网络和I/O操作。</li>\n<li>对于不同的应用，这种做法可能会使内存和CPU消耗变得非常低效。</li>\n<li>创建一个新的进程或线程需要准备新的运行环境，包括在内存中分配新的堆栈、新的运行上下文。<br>在创建这些过程中，必然会产生额外的CPU时间，而这种运行上下文切换引起的线程抖动最终将造成性能低下。</li>\n</ul>\n<p>以上的这些并发症几乎存在于所有在如Apache这样的老旧网站服务架构中。因此，我们往往需要在丰富的通用特性集和优化服务器资源之间权衡利弊。</p>\n<p>早期的nginx为了做一个专注于为<strong>动态扩展网站</strong>提供</p>\n<ul>\n<li>更高性能</li>\n<li>高密度</li>\n<li><p>更有效</p>\n<p>的使用服务器资源的专业工具，因此使用了不一样的模型。</p>\n<p>实际上，随着各操作系统上的高级事件驱动开发的发展，使得一个</p>\n<ul>\n<li>模块化</li>\n<li>事件驱动</li>\n<li>异步</li>\n<li>单线程</li>\n<li>无阻塞架构</li>\n</ul>\n</li>\n</ul>\n<p>成为了nginx源码的基础。</p>\n<p>Nginx主要使用了<strong>多路复用</strong>与<strong>事件通知</strong>方式，将各个任务分发给各个特定进程。所有的请求连接由数量有限的进程（被称为worker）处理，各个worker使用一个高效的单线程循环处理，每个worer进程每秒可处理上千个并发和请求。</p>\n<h3 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h3><p>Nginx worker的代码包含<strong>核心</strong>和<strong>功能模块</strong>。</p>\n<ul>\n<li>核心负责维护一个严谨的处理循环，并且在请求处理的每个阶段执行对应的代码模块。</li>\n<li>模块负责大部分展示和应用层功能，包括从网络和存储设备读取、写入，内容转换、执行输出过滤，执行服务端嵌入（SSI）操作、以及在启用代理时转发请求给后端服务器。</li>\n</ul>\n<p>得益于nginx模块化的架构，开发者可以在无需修改核心的基础上，对服务器的功能进行扩展。Nginx的典型模块并不多，分别是：</p>\n<ul>\n<li>核心模块</li>\n<li>事件模块</li>\n<li>阶段处理器</li>\n<li>协议、变量处理器</li>\n<li>过滤器</li>\n<li>上游和负载均衡器</li>\n</ul>\n<p>目前，nginx并不支持动态加载模块，即模块代码是在编译核心代码时一起编译的。然而，动态加载模块和ABI已列入未来主要发布版本计划中。各个模块角色的详细信息可查看后面的nginx Internals。</p>\n<p>Nginx通过使用事件通知机制和一系列提高IO的工具(在Linux、Solaris和基于BSD的操作系统上使用kqueue、epoll和event ports等技术)，来处理大量操作如接受、处理和管理连接、检索内容。其目的在于尽可能的提示操作系统，对进出流量，磁盘操作，套接字读写操作，超时等事件及时异步地获取反馈。其中，多路复用与高级I/O操作的各种方式，对每个基于Unix操作系统运行的nginx都做了高度的优化。</p>\n<p>图14.1展示了nginx架构的整体设计。<br><img src=\"/images/nginx-architecture.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\"></p>\n<p>nginx-architecture.png-nginx架构图</p>\n<h3 id=\"Worker模型\"><a href=\"#Worker模型\" class=\"headerlink\" title=\"Worker模型\"></a>Worker模型</h3><p>如前面提到的，<strong>nginx不会为每个连接创建新的进程或线程</strong>。而是由worker进程各自通过共享“监听”socket来接收新请求，同时每个worker内部会使用一个高效的处理循环来处理上千个连接。在Nginx中，不存在特定的仲裁器或分发器用以分发连接给各个worker，这个工作由操作系统内核机制完成。服务启动时，一组监听socket被创建并完成初始化，workers进程不断地从这些套接字接受、读取HTTP请求和输出响应。</p>\n<p><strong>事件处理循环是nginx worker代码中最复杂的部分，它包含了全面的内部调用，并且高度依赖异步任务处理的思想</strong>。异步操作通过</p>\n<ul>\n<li>模块化</li>\n<li>事件通知</li>\n<li>大量使用回调函数</li>\n<li>高度调优的定时器</li>\n</ul>\n<p>等实现。</p>\n<p>总之，关键原则就是<strong>尽可能做到非阻塞</strong>。目前唯一还会引起Nginx阻塞的条件是woker的磁盘性能不足。</p>\n<ul>\n<li>由于nginx不为每个连接创建新进程或线程，故内存使用在大多场景中是传统并高效的。</li>\n<li>同时由于不用频繁创建－销毁进程或线程，nginx也很节省CPU时间。</li>\n<li>Nginx所做的就是检查网络和存储的状态，初始化新连接、将其添加到主循环，异步处理直到完成，而后才从主循环中释放并删除。</li>\n<li><p>结合精心设计的系统调用、优雅实现诸如内存池等支持接口，nginx基本能够做到中低CPU使用率，即使在极端负载的情况下也不例外。</p>\n<p><strong>因为nginx创建了多个worker进程来处理连接，所以能够很好的利用多核CPU。</strong>通常一核一worker便能完全利用多核体系架构，并能够优雅的避免线程抖动与锁。这是因为在一个单线程？的worker进程内部不存在资源匮乏，并且资源控制机制也能很好的隔离。此外这个模型也允许</p>\n<ul>\n<li>在物理存储设备之间进行扩展</li>\n<li>提高磁盘利用率</li>\n<li>避免磁盘I/O导致的阻塞</li>\n</ul>\n<p>总之，这种将工作负载分布到多个worker进程上的方式，最终能使服务器资源被更高效的利用。</p>\n</li>\n</ul>\n<p><strong>nginx worker进程数应根据具体的磁盘使用和CPU负载的模式进行调整</strong>。具体实施方法比较简单，系统管理员往往是根据具体负载情况进行多次配置项的尝试。一般会推荐如下做法：</p>\n<ul>\n<li>如果负载模式是CPU密集型－－如处理大量的TCP/IP协议，使用SSL，或者压缩数据－－那么nginx worker进程数与CPU核数相当；</li>\n<li>如果是磁盘密集型－－如从存储磁盘中读取多样化内容给客户端的服务，或包含大量的代理服务－－此时worker的进程数应该是CPU核数的1.5～2倍。</li>\n</ul>\n<p>一些工程师会基于独立存储单元的个数来选择worker进程数，然而该方法的有效性会受到磁盘存储类型和配置的影响。</p>\n<p><strong>解决如何避免由磁盘I/O引起的大部分阻塞，</strong>是Nginx开发者在未来版本中需要解决的主要问题之一。目前，针对某个woker的磁盘操作,如果没有足够的存储性能为其服务，该进程就可能会一直阻塞在磁盘读写操作上。当然，存在多种机制和配置指令文件用于缓解这类磁盘I/O阻塞的场景，典型的做法如结合一些像sendfile和异步IO指令，便可以为磁盘操作节省大量的空间。同时，在nginx的安装过程中，也应将数据集，可用内存数，以及底层存储架构来规划在内。</p>\n<p><strong>对嵌入脚本的支持有限</strong>，是当前的worker模型存在的另一个问题。例如，标准的nginx发布版本只支持Perl作为嵌入脚本语言。原因很简单：关键是嵌入脚本很可能会在任何操作上阻塞或者异常退出，而这两个行为都会直接导致worker进程挂住而同时影响数千个连接。与此相关的更多工作已列入Nginx开发计划，即将脚本更简单，更可靠地嵌入nginx并且更适合广泛应用。</p>\n<h2 id=\"Nginx进程角色\"><a href=\"#Nginx进程角色\" class=\"headerlink\" title=\"Nginx进程角色\"></a>Nginx进程角色</h2><p>Nginx在内存中运行多个进程：</p>\n<ul>\n<li>一个单独master进程</li>\n<li>多个worker进程</li>\n<li>一些特殊用途的进程，如缓存加载进程、缓存管理进程</li>\n</ul>\n<p>在nginx 1.x版本，所有进程都是单线程的，且主要使用共享内存机制作为进程间通信机制。除Master进程使用root用户权限运行外，缓存加载进程、缓存管理进程以及所有worker进程都使用非特权用户权限运行。</p>\n<p>master进程负责下列工作:</p>\n<ul>\n<li>读取和验证配置文件</li>\n<li>创建、绑定、关闭sockets</li>\n<li>按照配置数量启动、终止、维护worker进程</li>\n<li>不中断服务的形式生效新配置文件</li>\n<li>不中断服务的形式升级程序（启动新版本且需要时回滚）</li>\n<li>重新打开日志文件</li>\n<li>编译嵌入Perl脚本</li>\n</ul>\n<p>Worker进程负责：</p>\n<ul>\n<li>接受、处理来自客户端的连接</li>\n<li>提供反向代理和过滤功能</li>\n<li>提供其他nginx所具有的所有功能。</li>\n</ul>\n<p>由于worker进程是web服务器每日操作的实际执行者，关于监控nginx实例，系统管理员实际还需要时刻关注worker进程。</p>\n<p>缓存加载进程的主要职责：</p>\n<ul>\n<li>负责检查磁盘上的缓存数据</li>\n<li>维护缓存元数据的内存数据库</li>\n</ul>\n<p>缓存加载进程负责管理缓存相关数据的载入和更新。Nginx的文件存于一个分配好的特定目录结构下，缓存加载进程负责管理这些文件，为nginx实例做准备，主要为：</p>\n<ol>\n<li>会遍历目录</li>\n<li>检查缓存内容的元数据</li>\n<li>更新共享内存中的相关条目</li>\n<li>当数据已整理干净并做好准备时，退出服务。</li>\n</ol>\n<p>缓存管理进程主要负责缓存过期和失效。它在nginx正常操作时存在于内存中，在出现故障时由master进程重启。</p>\n<h3 id=\"Nginx缓存概述\"><a href=\"#Nginx缓存概述\" class=\"headerlink\" title=\"Nginx缓存概述\"></a>Nginx缓存概述</h3><p>Nginx的缓存基于文件系统使用分层数据存储实现，特点如下：</p>\n<ul>\n<li>缓存主键（key）可配置</li>\n<li>可使用不同特定请求参数来控制缓存内容</li>\n<li>缓存主键(key)和缓存元数据存储在共享内存段中，这样做的好处是缓存加载进程、缓存管理进程和worker进程都能访问到。</li>\n<li>目前不支持在内存中缓存文件，但可以用操作系统的虚拟文件系统机制进行优化。</li>\n<li>每个缓存的响应体存于文件系统的一个特定文件中，其中该存储的层次结构（层数及命名规则）由Nginx配置指令控制。</li>\n<li>Nginx根据代理url的Md5值实现哈希算法，来实现获取某个已被缓存的响应体在该缓存目录结构中的文件名及路径。</li>\n</ul>\n<p>其中，Nginx将数据内容放入缓存的过程如下：</p>\n<ol>\n<li>在nginx从后端服务器读取响应时，该数据此时被写入到一个临时目录（非缓存文件目录）下的临时文件中。</li>\n<li>当nginx完成该请求处理后，该临时文件被重命名并移动到缓存文件目录下。注意如果以上临时目录与缓存目录不属于同一个文件系统，则临时文件会被拷贝一次。所以建议将临时目录和缓存目录放在同一个文件系统中。</li>\n</ol>\n<p>此外，管理缓存文件目录可使用如下方法：</p>\n<ul>\n<li>如果需要显示地清理缓存目录，从缓存目录结构下删除文件的行为是绝对安全的。</li>\n<li>可以使用一些nginx的第三方扩展远程控制缓存内容</li>\n<li>更多以上管理（远程or本地）缓存目录相关的工作，已被列入到主发布版的计划中。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Nginx-介绍（译文II–Nginx架构综述）\"><a href=\"#Nginx-介绍（译文II–Nginx架构综述）\" class=\"headerlink\" title=\"Nginx 介绍（译文II–Nginx架构综述）\"></a>Nginx 介绍（译文II–Nginx架构综述）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\">Andrew Alexeev</a></li>\n</ul>\n<ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br></li><br></ul>\n\n<h2 id=\"本章目录\"><a href=\"#本章目录\" class=\"headerlink\" title=\"本章目录\"></a>本章目录</h2><ul><br><li><a href=\"#Nginx架构综述\">Nginx架构综述</a></li><br><ul><br><li><a href=\"#代码结构\">代码结构</a></li><br><li><a href=\"#worker模型\">Worker模型</a></li><br><li><a href=\"#nginx进程角色\">Nginx进程角色</a></li><br><li><a href=\"#nginx缓存概述\">Nginx缓存概述</a></li><br><br></ul><br></ul>\n\n\n\n<h2 id=\"Nginx架构综述\"><a href=\"#Nginx架构综述\" class=\"headerlink\" title=\"Nginx架构综述\"></a>Nginx架构综述</h2><p>使用单独的线程或进程处理每个连接,是基于线程或进程处理并发连接的传统做法。</p>\n<ul>\n<li>该做法往往会阻塞于网络和I/O操作。</li>\n<li>对于不同的应用，这种做法可能会使内存和CPU消耗变得非常低效。</li>\n<li>创建一个新的进程或线程需要准备新的运行环境，包括在内存中分配新的堆栈、新的运行上下文。<br>在创建这些过程中，必然会产生额外的CPU时间，而这种运行上下文切换引起的线程抖动最终将造成性能低下。</li>\n</ul>\n<p>以上的这些并发症几乎存在于所有在如Apache这样的老旧网站服务架构中。因此，我们往往需要在丰富的通用特性集和优化服务器资源之间权衡利弊。</p>\n<p>早期的nginx为了做一个专注于为<strong>动态扩展网站</strong>提供</p>\n<ul>\n<li>更高性能</li>\n<li>高密度</li>\n<li><p>更有效</p>\n<p>的使用服务器资源的专业工具，因此使用了不一样的模型。</p>\n<p>实际上，随着各操作系统上的高级事件驱动开发的发展，使得一个</p>\n<ul>\n<li>模块化</li>\n<li>事件驱动</li>\n<li>异步</li>\n<li>单线程</li>\n<li>无阻塞架构</li>\n</ul>\n</li>\n</ul>\n<p>成为了nginx源码的基础。</p>\n<p>Nginx主要使用了<strong>多路复用</strong>与<strong>事件通知</strong>方式，将各个任务分发给各个特定进程。所有的请求连接由数量有限的进程（被称为worker）处理，各个worker使用一个高效的单线程循环处理，每个worer进程每秒可处理上千个并发和请求。</p>\n<h3 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h3><p>Nginx worker的代码包含<strong>核心</strong>和<strong>功能模块</strong>。</p>\n<ul>\n<li>核心负责维护一个严谨的处理循环，并且在请求处理的每个阶段执行对应的代码模块。</li>\n<li>模块负责大部分展示和应用层功能，包括从网络和存储设备读取、写入，内容转换、执行输出过滤，执行服务端嵌入（SSI）操作、以及在启用代理时转发请求给后端服务器。</li>\n</ul>\n<p>得益于nginx模块化的架构，开发者可以在无需修改核心的基础上，对服务器的功能进行扩展。Nginx的典型模块并不多，分别是：</p>\n<ul>\n<li>核心模块</li>\n<li>事件模块</li>\n<li>阶段处理器</li>\n<li>协议、变量处理器</li>\n<li>过滤器</li>\n<li>上游和负载均衡器</li>\n</ul>\n<p>目前，nginx并不支持动态加载模块，即模块代码是在编译核心代码时一起编译的。然而，动态加载模块和ABI已列入未来主要发布版本计划中。各个模块角色的详细信息可查看后面的nginx Internals。</p>\n<p>Nginx通过使用事件通知机制和一系列提高IO的工具(在Linux、Solaris和基于BSD的操作系统上使用kqueue、epoll和event ports等技术)，来处理大量操作如接受、处理和管理连接、检索内容。其目的在于尽可能的提示操作系统，对进出流量，磁盘操作，套接字读写操作，超时等事件及时异步地获取反馈。其中，多路复用与高级I/O操作的各种方式，对每个基于Unix操作系统运行的nginx都做了高度的优化。</p>\n<p>图14.1展示了nginx架构的整体设计。<br><img src=\"/images/nginx-architecture.png\" alt=\"NAT\" title=\"Host-only adapter\" width=\"600\" /></p>\n<p>nginx-architecture.png-nginx架构图</p>\n<h3 id=\"Worker模型\"><a href=\"#Worker模型\" class=\"headerlink\" title=\"Worker模型\"></a>Worker模型</h3><p>如前面提到的，<strong>nginx不会为每个连接创建新的进程或线程</strong>。而是由worker进程各自通过共享“监听”socket来接收新请求，同时每个worker内部会使用一个高效的处理循环来处理上千个连接。在Nginx中，不存在特定的仲裁器或分发器用以分发连接给各个worker，这个工作由操作系统内核机制完成。服务启动时，一组监听socket被创建并完成初始化，workers进程不断地从这些套接字接受、读取HTTP请求和输出响应。</p>\n<p><strong>事件处理循环是nginx worker代码中最复杂的部分，它包含了全面的内部调用，并且高度依赖异步任务处理的思想</strong>。异步操作通过</p>\n<ul>\n<li>模块化</li>\n<li>事件通知</li>\n<li>大量使用回调函数</li>\n<li>高度调优的定时器</li>\n</ul>\n<p>等实现。</p>\n<p>总之，关键原则就是<strong>尽可能做到非阻塞</strong>。目前唯一还会引起Nginx阻塞的条件是woker的磁盘性能不足。</p>\n<ul>\n<li>由于nginx不为每个连接创建新进程或线程，故内存使用在大多场景中是传统并高效的。</li>\n<li>同时由于不用频繁创建－销毁进程或线程，nginx也很节省CPU时间。</li>\n<li>Nginx所做的就是检查网络和存储的状态，初始化新连接、将其添加到主循环，异步处理直到完成，而后才从主循环中释放并删除。</li>\n<li><p>结合精心设计的系统调用、优雅实现诸如内存池等支持接口，nginx基本能够做到中低CPU使用率，即使在极端负载的情况下也不例外。</p>\n<p><strong>因为nginx创建了多个worker进程来处理连接，所以能够很好的利用多核CPU。</strong>通常一核一worker便能完全利用多核体系架构，并能够优雅的避免线程抖动与锁。这是因为在一个单线程？的worker进程内部不存在资源匮乏，并且资源控制机制也能很好的隔离。此外这个模型也允许</p>\n<ul>\n<li>在物理存储设备之间进行扩展</li>\n<li>提高磁盘利用率</li>\n<li>避免磁盘I/O导致的阻塞</li>\n</ul>\n<p>总之，这种将工作负载分布到多个worker进程上的方式，最终能使服务器资源被更高效的利用。</p>\n</li>\n</ul>\n<p><strong>nginx worker进程数应根据具体的磁盘使用和CPU负载的模式进行调整</strong>。具体实施方法比较简单，系统管理员往往是根据具体负载情况进行多次配置项的尝试。一般会推荐如下做法：</p>\n<ul>\n<li>如果负载模式是CPU密集型－－如处理大量的TCP/IP协议，使用SSL，或者压缩数据－－那么nginx worker进程数与CPU核数相当；</li>\n<li>如果是磁盘密集型－－如从存储磁盘中读取多样化内容给客户端的服务，或包含大量的代理服务－－此时worker的进程数应该是CPU核数的1.5～2倍。</li>\n</ul>\n<p>一些工程师会基于独立存储单元的个数来选择worker进程数，然而该方法的有效性会受到磁盘存储类型和配置的影响。</p>\n<p><strong>解决如何避免由磁盘I/O引起的大部分阻塞，</strong>是Nginx开发者在未来版本中需要解决的主要问题之一。目前，针对某个woker的磁盘操作,如果没有足够的存储性能为其服务，该进程就可能会一直阻塞在磁盘读写操作上。当然，存在多种机制和配置指令文件用于缓解这类磁盘I/O阻塞的场景，典型的做法如结合一些像sendfile和异步IO指令，便可以为磁盘操作节省大量的空间。同时，在nginx的安装过程中，也应将数据集，可用内存数，以及底层存储架构来规划在内。</p>\n<p><strong>对嵌入脚本的支持有限</strong>，是当前的worker模型存在的另一个问题。例如，标准的nginx发布版本只支持Perl作为嵌入脚本语言。原因很简单：关键是嵌入脚本很可能会在任何操作上阻塞或者异常退出，而这两个行为都会直接导致worker进程挂住而同时影响数千个连接。与此相关的更多工作已列入Nginx开发计划，即将脚本更简单，更可靠地嵌入nginx并且更适合广泛应用。</p>\n<h2 id=\"Nginx进程角色\"><a href=\"#Nginx进程角色\" class=\"headerlink\" title=\"Nginx进程角色\"></a>Nginx进程角色</h2><p>Nginx在内存中运行多个进程：</p>\n<ul>\n<li>一个单独master进程</li>\n<li>多个worker进程</li>\n<li>一些特殊用途的进程，如缓存加载进程、缓存管理进程</li>\n</ul>\n<p>在nginx 1.x版本，所有进程都是单线程的，且主要使用共享内存机制作为进程间通信机制。除Master进程使用root用户权限运行外，缓存加载进程、缓存管理进程以及所有worker进程都使用非特权用户权限运行。</p>\n<p>master进程负责下列工作:</p>\n<ul>\n<li>读取和验证配置文件</li>\n<li>创建、绑定、关闭sockets</li>\n<li>按照配置数量启动、终止、维护worker进程</li>\n<li>不中断服务的形式生效新配置文件</li>\n<li>不中断服务的形式升级程序（启动新版本且需要时回滚）</li>\n<li>重新打开日志文件</li>\n<li>编译嵌入Perl脚本</li>\n</ul>\n<p>Worker进程负责：</p>\n<ul>\n<li>接受、处理来自客户端的连接</li>\n<li>提供反向代理和过滤功能</li>\n<li>提供其他nginx所具有的所有功能。</li>\n</ul>\n<p>由于worker进程是web服务器每日操作的实际执行者，关于监控nginx实例，系统管理员实际还需要时刻关注worker进程。</p>\n<p>缓存加载进程的主要职责：</p>\n<ul>\n<li>负责检查磁盘上的缓存数据</li>\n<li>维护缓存元数据的内存数据库</li>\n</ul>\n<p>缓存加载进程负责管理缓存相关数据的载入和更新。Nginx的文件存于一个分配好的特定目录结构下，缓存加载进程负责管理这些文件，为nginx实例做准备，主要为：</p>\n<ol>\n<li>会遍历目录</li>\n<li>检查缓存内容的元数据</li>\n<li>更新共享内存中的相关条目</li>\n<li>当数据已整理干净并做好准备时，退出服务。</li>\n</ol>\n<p>缓存管理进程主要负责缓存过期和失效。它在nginx正常操作时存在于内存中，在出现故障时由master进程重启。</p>\n<h3 id=\"Nginx缓存概述\"><a href=\"#Nginx缓存概述\" class=\"headerlink\" title=\"Nginx缓存概述\"></a>Nginx缓存概述</h3><p>Nginx的缓存基于文件系统使用分层数据存储实现，特点如下：</p>\n<ul>\n<li>缓存主键（key）可配置</li>\n<li>可使用不同特定请求参数来控制缓存内容</li>\n<li>缓存主键(key)和缓存元数据存储在共享内存段中，这样做的好处是缓存加载进程、缓存管理进程和worker进程都能访问到。</li>\n<li>目前不支持在内存中缓存文件，但可以用操作系统的虚拟文件系统机制进行优化。</li>\n<li>每个缓存的响应体存于文件系统的一个特定文件中，其中该存储的层次结构（层数及命名规则）由Nginx配置指令控制。</li>\n<li>Nginx根据代理url的Md5值实现哈希算法，来实现获取某个已被缓存的响应体在该缓存目录结构中的文件名及路径。</li>\n</ul>\n<p>其中，Nginx将数据内容放入缓存的过程如下：</p>\n<ol>\n<li>在nginx从后端服务器读取响应时，该数据此时被写入到一个临时目录（非缓存文件目录）下的临时文件中。</li>\n<li>当nginx完成该请求处理后，该临时文件被重命名并移动到缓存文件目录下。注意如果以上临时目录与缓存目录不属于同一个文件系统，则临时文件会被拷贝一次。所以建议将临时目录和缓存目录放在同一个文件系统中。</li>\n</ol>\n<p>此外，管理缓存文件目录可使用如下方法：</p>\n<ul>\n<li>如果需要显示地清理缓存目录，从缓存目录结构下删除文件的行为是绝对安全的。</li>\n<li>可以使用一些nginx的第三方扩展远程控制缓存内容</li>\n<li>更多以上管理（远程or本地）缓存目录相关的工作，已被列入到主发布版的计划中。</li>\n</ul>\n"},{"layout":"post","title":"Nginx介绍(译文V--总结)","keywords":["nginx"],"description":"nginx","author":"Shirly","comments":1,"_content":"\n\n## Nginx 介绍（译文V--总结）\n\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n\n## 总结\n\nIgor Sysoev开始编写nginx时，大部分构建互联网的软件都已经存在，且这些软件的架构通常遵循以下几点定义：\n\n* 传统服务器\n* 网络硬件\n* 操作系统\n* 通用的传统互联网架构。\n\n然而这并未阻止Igor考虑去提升web服务器领域相关工作。所以，第一个教训显而易见的就是：总是存在可提升空间。\n\n带着开发更好web软件的想法，Igor花了不少时间设计开发最初的代码结构，并研究在多个操作系统下尝试不同的方法去优化代码。在1.0版本历时十年的活跃开发后，Igor开发了2.0版本原型。显然一个新架构的初始原型和代码结构，对于软件产品的后续开发极其重要。\n\n另外值得提到的一点是要保持专注。Nginx的windows版本是个好例子，说明无论在开发者的核心技能或应用目标上避免过于分散开发工作是值得的。同样地，加强nginx重写引擎对现存遗留配置的后向兼容能力，这些努力也是值得的。\n\n最后值得提到的是，尽管nginx开发者社区并不大，nginx的第三方模块和扩展一直都是nginx受欢迎的重要因素。Nginx用户社区和作者们十分感谢Evan Miller, Piotr Sikora, Valery Kholodkov, Zhang Yichun (agentzh)以及其他优秀软件工程师所做的工作。\n\n\nThis work is made available under the [Creative Commons Attribution 3.0 Unported](http://creativecommons.org/licenses/by/3.0/legalcode) license. Please see the [full description of the license](http://www.aosabook.org/en/intro1.html#license) for details\n","source":"_posts/2015-06-25-nginx-introduction-V.md","raw":"---\nlayout: post\ntitle: \"Nginx介绍(译文V--总结)\"\nkeywords: [\"nginx\"]\ndescription: \"nginx\"\ncategory: \"nginx\"\ntags: [\"nginx\"]\nauthor: Shirly\ncomments : true\n---\n\n\n## Nginx 介绍（译文V--总结）\n\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n\n## 总结\n\nIgor Sysoev开始编写nginx时，大部分构建互联网的软件都已经存在，且这些软件的架构通常遵循以下几点定义：\n\n* 传统服务器\n* 网络硬件\n* 操作系统\n* 通用的传统互联网架构。\n\n然而这并未阻止Igor考虑去提升web服务器领域相关工作。所以，第一个教训显而易见的就是：总是存在可提升空间。\n\n带着开发更好web软件的想法，Igor花了不少时间设计开发最初的代码结构，并研究在多个操作系统下尝试不同的方法去优化代码。在1.0版本历时十年的活跃开发后，Igor开发了2.0版本原型。显然一个新架构的初始原型和代码结构，对于软件产品的后续开发极其重要。\n\n另外值得提到的一点是要保持专注。Nginx的windows版本是个好例子，说明无论在开发者的核心技能或应用目标上避免过于分散开发工作是值得的。同样地，加强nginx重写引擎对现存遗留配置的后向兼容能力，这些努力也是值得的。\n\n最后值得提到的是，尽管nginx开发者社区并不大，nginx的第三方模块和扩展一直都是nginx受欢迎的重要因素。Nginx用户社区和作者们十分感谢Evan Miller, Piotr Sikora, Valery Kholodkov, Zhang Yichun (agentzh)以及其他优秀软件工程师所做的工作。\n\n\nThis work is made available under the [Creative Commons Attribution 3.0 Unported](http://creativecommons.org/licenses/by/3.0/legalcode) license. Please see the [full description of the license](http://www.aosabook.org/en/intro1.html#license) for details\n","slug":"2015-06-25-nginx-introduction-V","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhw003qqj7l6q0ha7x3","content":"<h2 id=\"Nginx-介绍（译文V–总结）\"><a href=\"#Nginx-介绍（译文V–总结）\" class=\"headerlink\" title=\"Nginx 介绍（译文V–总结）\"></a>Nginx 介绍（译文V–总结）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\" target=\"_blank\" rel=\"external\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\" target=\"_blank\" rel=\"external\">Andrew Alexeev</a></li>\n</ul>\n<ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br><br></ul>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Igor Sysoev开始编写nginx时，大部分构建互联网的软件都已经存在，且这些软件的架构通常遵循以下几点定义：</p>\n<ul>\n<li>传统服务器</li>\n<li>网络硬件</li>\n<li>操作系统</li>\n<li>通用的传统互联网架构。</li>\n</ul>\n<p>然而这并未阻止Igor考虑去提升web服务器领域相关工作。所以，第一个教训显而易见的就是：总是存在可提升空间。</p>\n<p>带着开发更好web软件的想法，Igor花了不少时间设计开发最初的代码结构，并研究在多个操作系统下尝试不同的方法去优化代码。在1.0版本历时十年的活跃开发后，Igor开发了2.0版本原型。显然一个新架构的初始原型和代码结构，对于软件产品的后续开发极其重要。</p>\n<p>另外值得提到的一点是要保持专注。Nginx的windows版本是个好例子，说明无论在开发者的核心技能或应用目标上避免过于分散开发工作是值得的。同样地，加强nginx重写引擎对现存遗留配置的后向兼容能力，这些努力也是值得的。</p>\n<p>最后值得提到的是，尽管nginx开发者社区并不大，nginx的第三方模块和扩展一直都是nginx受欢迎的重要因素。Nginx用户社区和作者们十分感谢Evan Miller, Piotr Sikora, Valery Kholodkov, Zhang Yichun (agentzh)以及其他优秀软件工程师所做的工作。</p>\n<p>This work is made available under the <a href=\"http://creativecommons.org/licenses/by/3.0/legalcode\" target=\"_blank\" rel=\"external\">Creative Commons Attribution 3.0 Unported</a> license. Please see the <a href=\"http://www.aosabook.org/en/intro1.html#license\" target=\"_blank\" rel=\"external\">full description of the license</a> for details</p>\n","excerpt":"","more":"<h2 id=\"Nginx-介绍（译文V–总结）\"><a href=\"#Nginx-介绍（译文V–总结）\" class=\"headerlink\" title=\"Nginx 介绍（译文V–总结）\"></a>Nginx 介绍（译文V–总结）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\">Andrew Alexeev</a></li>\n</ul>\n<ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br></li><br></ul>\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Igor Sysoev开始编写nginx时，大部分构建互联网的软件都已经存在，且这些软件的架构通常遵循以下几点定义：</p>\n<ul>\n<li>传统服务器</li>\n<li>网络硬件</li>\n<li>操作系统</li>\n<li>通用的传统互联网架构。</li>\n</ul>\n<p>然而这并未阻止Igor考虑去提升web服务器领域相关工作。所以，第一个教训显而易见的就是：总是存在可提升空间。</p>\n<p>带着开发更好web软件的想法，Igor花了不少时间设计开发最初的代码结构，并研究在多个操作系统下尝试不同的方法去优化代码。在1.0版本历时十年的活跃开发后，Igor开发了2.0版本原型。显然一个新架构的初始原型和代码结构，对于软件产品的后续开发极其重要。</p>\n<p>另外值得提到的一点是要保持专注。Nginx的windows版本是个好例子，说明无论在开发者的核心技能或应用目标上避免过于分散开发工作是值得的。同样地，加强nginx重写引擎对现存遗留配置的后向兼容能力，这些努力也是值得的。</p>\n<p>最后值得提到的是，尽管nginx开发者社区并不大，nginx的第三方模块和扩展一直都是nginx受欢迎的重要因素。Nginx用户社区和作者们十分感谢Evan Miller, Piotr Sikora, Valery Kholodkov, Zhang Yichun (agentzh)以及其他优秀软件工程师所做的工作。</p>\n<p>This work is made available under the <a href=\"http://creativecommons.org/licenses/by/3.0/legalcode\">Creative Commons Attribution 3.0 Unported</a> license. Please see the <a href=\"http://www.aosabook.org/en/intro1.html#license\">full description of the license</a> for details</p>\n"},{"layout":"post","title":"Nginx介绍(译文IV--深入nginx内核)","keywords":["nginx"],"description":"nginx","comments":1,"_content":"\n\n## Nginx 介绍（译文IV--深入nginx内核）\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n\n## 本章目录\n<ul>\n<li><a href=\"#深入nginx内核\">深入nginx内核</a></li>\n<ul>\n<li><a href=\"#功能模块\">功能模块</a></li>\n<li><a href=\"#worker\">Worker</a></li>\n<li><a href=\"#处理阶段\">处理阶段</a></li>\n<li><a href=\"#过滤器\">过滤器</a></li>\n<li><a href=\"#子请求\">子请求</a></li>\n<li><a href=\"#上游和负载均衡器\">上游和负载均衡器</a></li>\n<ul>\n<li><a href=\"#上游\">上游</a></li>\n<li><a href=\"#负载均衡器\">负载均衡器</a></li>\n</ul>\n<li><a href=\"#变量处理器\">变量处理器</a></li>\n<li><a href=\"#内存分配机制\">内存分配机制</a></li>\n</ul>\n</ul>\n\n\n\n## 深入nginx内核\n\n如前文所提及，nginx的源码主要包括一个核心（core）和多个模块(modules)。其中核心(core)部分主要用于提供以下功能：\n\n* 作为web服务器的基础\n* 提供web及邮箱的反向代理（mail reverse proxy）的功能\n* 允许使用底层网络协议\n* 创建必要的运行时环境\n* 保证各个模块间的无缝交互\n\n需要注意的是：大部分的协议和为应用程序定制的特性，由nginx的模块（modules）而非核心（core）完成。\n\n在nginx的内部，通过各个模块间的管道(pipeline)或模块链(chain)来处理所有连接。或者说，对于每个操作，都有相应的模块在处理该工作，例如\n\n* 压缩\n* 修改内容\n* 执行SSI（server-side includes）\n* 通过FastCGI、uwsgi协议与后端应用服务器交互\n* 与memcache交互。\n\n在核心(core)与实际功能模块（real \"functional\" modules）之间，还有一对模块，即http和mail。这两个模块在核心(core)和更底层的组建中间提供了一个附加的抽象层。在这些模块中，处理与各自应用层协议相关的事件序列，如已实现的HTTP，SMTP，IMAP。\n\n\n结合Nginx核心(core)，这些上层的模块负责维护调用不同功能模块的正确顺序。虽然目前HTTP协议是作为http模块的一部分实现的，但为支持其他协议如SPDY（参考“[SPDY: An experimental protocol for a faster web](http://www.chromium.org/spdy/spdy-whitepaper)），将http独立为一个功能模块已列入计划中。\n\n### 功能模块\n\n功能模块可以分为以下几类：\n\n* 事件模块\n* 阶段处理器\n* 输出过滤器\n* 变量处理器\n* 协议模块\n* 上游及负载均衡器\n\n虽然mail模块中用到了事件模块和协议，但以上大部分模块用于补充nginx的HTTP功能。\n\n* 事件模块提供了类似于kqueue和epool的基于操作系统的事件通知机制，主要取决于操作系统的能力与编译配置。\n* 协议模块允许nginx通过HTTPS, TLS/SSL, SMTP, POP3 和 IMAP等协议通信。\n\n典型的HTTP请求处理周期如下：\n\n1. 客户端发送HTTP请求。\n2. nginx核心根据配置匹配该请求的location，选择对应的阶段处理器。\n3. 根据配置需要，负载均衡器挑选一个上游服务器用于转发请求。\n4. 阶段处理器完成工作，并将每个输出缓冲区传递给第一个过滤器。\n5. 第一个过滤器将输出传给第二个过滤器。\n6. 第二个过滤器传递输出给第三个（。。。）。\n7. 最终将响应发送给客户端。\n\nNginx模块调用是高度可定制的。它主要通过一系列的回调展开工作，而这些回调则通过使用指向可执行函数的指针来实现。因而，对于那些想要自己编写模块的开发者，就必须准确地定义这些自定义模块如何运行、何时运行，从而大大加重了负担。为了缓解该负担，使之能够更好地执行，Nginx的API和开发者文档都在不断地优化中。\n\n一些在nginx中插入模块的案例：\n\n* 读取和处理配置文件之前\n* Location和server的每个配置指令生效时\n* Main配置被初始化后\n* Server配置（host/port）初始化后\n* Server配置合并到main配置后\n* Location配置初始化或者被合并到父server配置时\n* Master进程启动或退出时\n* 新的worker进程启动或退出时\n* 处理请求时\n* 过滤响应头和响应体时\n* 为request挑选，初始化和重新初始化上游服务器时\n* 处理上游服务器响应时\n* 完成与上游服务器的交互时\n\n### worker\n\n在一个woker内部，通过以下操作来引导处理循坏（run-loop）在哪里生产响应：\n\n1. 始于ngx_worker_process_cycle\n2. 根据操作系统的特性处理事件（如epoll或kqueue）\n3. 接受事件、分发相关操作\n4. 处理/代理 请求头和请求体\n5. 生成响应内容（响应头、响应体）、流式返回给客户端\n6. 完成请求\n7. 重新初始化计时器和事件\n\n处理循环（run-loop）本身通过步骤5、6来保证增量地产生响应并流式的返回给客户端\n\n处理一个HTTP请求更详细的过程可能如下：\n\n1. 初始化请求处理\n2. 处理请求头\n3. 处理请求体\n4. 调用对应处理器\n5. 执行所有处理阶段\n\n如此，便将我们带到了处理阶段。\n\n### 处理阶段\n\nNginx处理一个请求时，往往会经历一系列的处理阶段。在每个处理阶段中，都会调用对应的处理器。阶段处理器与配置文件中定义的location关联，一般地，阶段处理器处理一个请求并生成对应输出。\n\n阶段处理器处理以下四件典型事件：\n\n* 获取location的配置\n* 生成相应的响应\n* 发送头(header)信息\n* 发送主体(body)信息 \n\n一个处理器对应一个参数：一个描述请求的特定结构。请求体结构包含了客户端请求的很多有用信息，如请求方法、URI、请求头信息。\n\n\nNginx在读取完HTTP请求头以后，根据配置查找对应的虚拟服务器。如果存在对应的虚拟服务器，请求将按照以下阶段进行处理：\n\n1. 服务器重写阶段(server rewrite phase)\n2. 定位所在阶段(location phase)\n3. 位置重写阶段(location rewrite phase) -- 这样便能够将请求带回给之前的阶段\n4. 到达控制阶段(access control phase)\n5. try_files阶段(try_files phase)\n6. 日志阶段(log phase)\n\n为了给请求生成必要的响应内容，nginx将请求交传递给相应的内容处理器。根据准确的location配置，nginx会先尝试如perl, proxy_pass, flv,mp4等所谓的无条件处理器。如果请求与以上内容处理器均不匹配，那么将会严格按下面顺序选取一个处理器：random index, index, autoindex, gzip_static, static。\n\nIndex模块详细内容见Nginx官方文档，该模块只用于处理后缀是“/”的请求。如果没有匹配上如mp4或autoindex这样的专业模块，那么响应内容将被认为是磁盘上的一个文件或目录（即静态的），将由static内容处理器完成服务。目录的URI将被自动重写，以保证后缀是一个斜杠（从而发起一个HTTP重定向)。\n\n### 过滤器\n\n内容处理器处理完以后，会把内容传递到过滤器。过滤器同样与location相关联，且一个location可配置关联多个过滤器。过滤器用于管理处理器产生的输出，且各个过滤处理器的执行顺序在编译时决定。\n\n自带的过滤器顺序是预定义好的，而第三方过滤器的顺序则可以在编译阶段设置。当前的nginx版本中，过滤器只能修改输出的数据，但尚未存在相关机制编写与关联过滤器用以修改输入内容。输入过滤器将在未来版本提供。\n\n过滤器遵循一个特定的设计模式。工作过程如下：\n\n1. 一个过滤器被调用\n2. 开始工作\n3. 检查过滤器链，若存在下一个，继续进入步骤1。否则，进入步骤4\n4. nginx结束响应。\n\n过滤器不用等待前面的过滤器结束。一旦上一个过滤器提供的输入已经可用，当前过滤器便可以马上启动自己的工作（功能上非常类似于Unix中的管道）。因而，在从上游服务器接收到所有的响应之前，所生成的输出响应便已被流式地发送给客户端。\n\n过滤器可分为Header过滤器和body过滤器,由Nginx将返回body和header分发给与之关联的对应处理器。\n\n其中一个header过滤主要由以下三步组成：\n\n1. 判定处理该响应\n2. 处理响应\n3. 调用下一个过滤器 \n\nbody过滤器用于改变响应内容，举例如下：\n \n* SSI(server-side includes)\n* XSTL过滤器\n* 图片过滤器(例如调整图片大小)\n* 转换字符集\n* gzip压缩\n* chunked 编码\n\n在过滤链处理完毕后，响应体被传给writer。与writer一起还有一对特定功能的附加过滤器：\n\n* 拷贝过滤（copy filter）：负责将相关响应内容填充到内存缓冲区，这些内容很可能被存于代理临时目录下。\n\n* 延迟过滤 (postpone filter)：用于处理子请求。\n\n### 子请求\n子请求是请求／响应处理中一个很重要的机制，同时也是Nginx最强大的方面之一。通过使用子请求，Nginx可返回一个与客户端请求URL不同的响应，即某些web框架中的内部重定向。而且，Nginx走得更远－－过滤器不仅可以使用多个子请求、合并这些输出到一个单独的响应，还能互相嵌套、分层处理。一个子请求A可以产生自己的子请求B，同时，B也可以启动自己的子请求C等。子请求可以被映射到物理硬盘上的文件、其它处理器、或上流服务器。\n将原始响应体中插入新的附加内容的功能，使子进程变得很有用。例如：\n\n* SSI（server-side include)使用一个过滤器解析返回文件的内容，然后使用其指定的URL来替换include指令。\n* 实现一个过滤器，使用整个文件内容作为URL被索引，并将新的文档内容附加到该URL本身。\n\n### 上游和负载均衡器\n\n#### 上游\n\n上游一般被认为是用于实现反向代理（proxy_pass处理器）的内容处理器。上游模块执行顺序一般如下：\n\n1. 准备请求\n2. 将请求发送给上游服务器（后端）\n3. 从上游服务器接收请求\n\n在该过程中,不会调用到输出过滤器。\n上游模块设置回调函数，供上游服务器准备好读写时使用。回调函数主要实现以下功能：\n\n* 准备请求缓冲区（或缓冲区链），用于发送给上游服务器\n* 重新初始化、重置到上游服务器的连接（准时发生于在再次发起请求之前）\n* 处理上游服务器响应的首字节，并且保存该响应的指针\n* 放弃请求（当客户端过早关闭连接时）\n* 在Nginx完成读取上游服务器响应时，结束请求\n* 整理响应体（如除去空白）\n\n####  负载均衡器\n\n当存在多个符合条件的上游服务器时，负载均衡器协助proxy_pass处理器为其提供一个选择上游服务器的能力。一个负载均衡器特性如下：\n\n* 注册一个被启用的配置文件指令\n* 提供附加的上游服务器初始化功能(使用DNS解析上游服务器名称等)\n* 初始化连接结构体\n* 决定如何路由请求\n* 更新状态信息\n\n目前，nginx支持两种标准的上游服务器负载均衡规则：轮询和ip哈希。\n上游和负载均衡处理机制包含检测上游服务器异常、将请求重新路由到剩余上游服务器的算法－－当然，为加强该能力，很多工作已列入计划。总之，更多的负载均衡相关工作已列入计划，此外，下一版本的nginx将大幅度提升以上能力，即：\n\n* 基于多上游服务器的均衡负载能力\n* 异常检测机制\n\n#### 变量处理器\n\n当然还有很多其他有意思的模块，这些模块大大丰富了配置文件中使用的变量集。Nginx中的变量根据不同的模块生成和更新，其中有两个模块为变量专用：geo和map。 \n\n* geo模块用于促进基于客户端ip的跟踪。该模块可根据客户端ip地址创建任意变量。\n* map模块允许从一个变量生成另一个变量，提供了灵活映射主机名和其他运行时变量的基本能力。\n\n以上这类模块称为变量处理器。\n\n#### 内存分配机制\nnginx的内存分配机制在一个单独的nginxworker中实现（从某些方面来讲，该思路受Apach启发）。\n一个nginx内存管理高层描述如下：\n对于每一个连接，必要的内存缓冲区特点如下：\n\n1. 动态生成(dynamically allocated)\n2. 关联(linked)\n3. 用于存储和管理请求头、请求体、响应\n4. 最后根据连接释放。\n\n值得注意的是，很重要的一点是nginx尽可能的去避免在内存中拷贝数据，大部分的数据通过指针进行传递，而不是调用memcpy。\n\n再深入一点，当一个模块生成响应时，这些响应内容放入内存缓冲区，而该缓存区最终将被添加到一个缓冲区链表。该缓冲区链同样适用于子请求处理工作。\n\n根据不同的模块类型，存在着多个处理场景，因而nginx中的缓冲区链表相当复杂。\n例如，在实现body filter模块中，精确地管理缓冲区是可能是相当棘手的。\n这个模块在某一时刻只能处理缓冲区链中的一个缓冲区，且必须决定\n\n* 是否覆盖输入缓冲区\n* 是否用新分配的缓冲区替换当前缓冲区\n* 是否在这个缓冲区之前或之后插入一个新缓冲区\n\n更复杂的情况，有时一个模块收到多个缓冲区数据，因而必须处理一个不完整的缓冲区链。然而目前nginx在维护缓存链中仅提供了底层API，所以开发者需要在真正掌握nginx这一晦涩难懂的部分之后，再去开发第三方模块。\n\n以上内容中需要注意的一点：Ninx中对于一个连接，存在着为连接的整个生命周期分配的内存缓冲区，所以对于长连接需要保留一些额外的内存。同时，对于一个空闲的keepalive连接，nginx仅消耗550字节内存。其中复用和共享内存缓冲区方面，将来的版本中可能会做相关的优化。\n\n内存分配管理的任务由nginx内存池分配器完成。共享内存区用于：\n\n* 存放接受互斥锁(accept mutex)\n* 缓存元数据\n* SSL会话缓存\n* 带宽监控和管理（限速）相关的信息\n\nNginx实现了slab分配器用于管理共享内存。为保证共享内存使用过程中的并发安全，提供了一系列锁机制（互斥锁和信号量）。为了组织复杂的数据结构，nginx也提供了红黑树的实现。红黑树用于在共享内存中保存缓存元数据，跟踪非正则location定义，以及其他一系列的任务。\n\n不幸的是，上述内容被从未一致、简单地描述过，以致Nginx的第三方扩展开发工作相当复杂。虽然有一些nginx内核介绍的优秀文档（如Evan Miller写的），但是这些文档需要做很多回归工程的努力，nginx模块的开发对很多人来说，依旧是黑盒。\n\n虽然开发第三方模块的核心难点尚未解决，nginx社区最近还是涌现了大量有用的第三方模块。案例如下：\n\n* 将Lua解释器嵌入nginx\n* 负载均衡附加模块\n* 完整的WebDAV支持\n* 高级缓存控制\n* 其他本文作者所鼓励和将来支持的有趣的第三方工作。\n\n","source":"_posts/2015-06-10-nginx-introduction-IV.md","raw":"---\nlayout: post\ntitle: \"Nginx介绍(译文IV--深入nginx内核)\"\nkeywords: [\"nginx\"]\ndescription: \"nginx\"\ncategory: \"nginx\"\ntags: [\"nginx\"]\ncomments: true\n---\n\n\n## Nginx 介绍（译文IV--深入nginx内核）\n\n* 原文 [nginx](http://www.aosabook.org/en/nginx.html)\n* 作者 [Andrew Alexeev](http://www.aosabook.org/en/intro2.html#alexeev-andrew)\n<ul>\n译文结构\n<ul>\n<li><a href=\"/nginx/nginx-introduction-I.html\">译文I--为什么高并发很重要</a></li>\n<li><a href=\"/nginx/nginx-introduction-II.html\">译文II--Nginx架构综述</a></li>\n<li><a href=\"/nginx/nginx-introduction-III.html\">译文III--Nginx配置结构</a></li>\n<li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV--深入nginx内核</a></li>\n<li><a href=\"/nginx/nginx-introduction-V.html\">译文V--总结</a></li>\n</ul>\n</li>\n</ul>\n\n\n## 本章目录\n<ul>\n<li><a href=\"#深入nginx内核\">深入nginx内核</a></li>\n<ul>\n<li><a href=\"#功能模块\">功能模块</a></li>\n<li><a href=\"#worker\">Worker</a></li>\n<li><a href=\"#处理阶段\">处理阶段</a></li>\n<li><a href=\"#过滤器\">过滤器</a></li>\n<li><a href=\"#子请求\">子请求</a></li>\n<li><a href=\"#上游和负载均衡器\">上游和负载均衡器</a></li>\n<ul>\n<li><a href=\"#上游\">上游</a></li>\n<li><a href=\"#负载均衡器\">负载均衡器</a></li>\n</ul>\n<li><a href=\"#变量处理器\">变量处理器</a></li>\n<li><a href=\"#内存分配机制\">内存分配机制</a></li>\n</ul>\n</ul>\n\n\n\n## 深入nginx内核\n\n如前文所提及，nginx的源码主要包括一个核心（core）和多个模块(modules)。其中核心(core)部分主要用于提供以下功能：\n\n* 作为web服务器的基础\n* 提供web及邮箱的反向代理（mail reverse proxy）的功能\n* 允许使用底层网络协议\n* 创建必要的运行时环境\n* 保证各个模块间的无缝交互\n\n需要注意的是：大部分的协议和为应用程序定制的特性，由nginx的模块（modules）而非核心（core）完成。\n\n在nginx的内部，通过各个模块间的管道(pipeline)或模块链(chain)来处理所有连接。或者说，对于每个操作，都有相应的模块在处理该工作，例如\n\n* 压缩\n* 修改内容\n* 执行SSI（server-side includes）\n* 通过FastCGI、uwsgi协议与后端应用服务器交互\n* 与memcache交互。\n\n在核心(core)与实际功能模块（real \"functional\" modules）之间，还有一对模块，即http和mail。这两个模块在核心(core)和更底层的组建中间提供了一个附加的抽象层。在这些模块中，处理与各自应用层协议相关的事件序列，如已实现的HTTP，SMTP，IMAP。\n\n\n结合Nginx核心(core)，这些上层的模块负责维护调用不同功能模块的正确顺序。虽然目前HTTP协议是作为http模块的一部分实现的，但为支持其他协议如SPDY（参考“[SPDY: An experimental protocol for a faster web](http://www.chromium.org/spdy/spdy-whitepaper)），将http独立为一个功能模块已列入计划中。\n\n### 功能模块\n\n功能模块可以分为以下几类：\n\n* 事件模块\n* 阶段处理器\n* 输出过滤器\n* 变量处理器\n* 协议模块\n* 上游及负载均衡器\n\n虽然mail模块中用到了事件模块和协议，但以上大部分模块用于补充nginx的HTTP功能。\n\n* 事件模块提供了类似于kqueue和epool的基于操作系统的事件通知机制，主要取决于操作系统的能力与编译配置。\n* 协议模块允许nginx通过HTTPS, TLS/SSL, SMTP, POP3 和 IMAP等协议通信。\n\n典型的HTTP请求处理周期如下：\n\n1. 客户端发送HTTP请求。\n2. nginx核心根据配置匹配该请求的location，选择对应的阶段处理器。\n3. 根据配置需要，负载均衡器挑选一个上游服务器用于转发请求。\n4. 阶段处理器完成工作，并将每个输出缓冲区传递给第一个过滤器。\n5. 第一个过滤器将输出传给第二个过滤器。\n6. 第二个过滤器传递输出给第三个（。。。）。\n7. 最终将响应发送给客户端。\n\nNginx模块调用是高度可定制的。它主要通过一系列的回调展开工作，而这些回调则通过使用指向可执行函数的指针来实现。因而，对于那些想要自己编写模块的开发者，就必须准确地定义这些自定义模块如何运行、何时运行，从而大大加重了负担。为了缓解该负担，使之能够更好地执行，Nginx的API和开发者文档都在不断地优化中。\n\n一些在nginx中插入模块的案例：\n\n* 读取和处理配置文件之前\n* Location和server的每个配置指令生效时\n* Main配置被初始化后\n* Server配置（host/port）初始化后\n* Server配置合并到main配置后\n* Location配置初始化或者被合并到父server配置时\n* Master进程启动或退出时\n* 新的worker进程启动或退出时\n* 处理请求时\n* 过滤响应头和响应体时\n* 为request挑选，初始化和重新初始化上游服务器时\n* 处理上游服务器响应时\n* 完成与上游服务器的交互时\n\n### worker\n\n在一个woker内部，通过以下操作来引导处理循坏（run-loop）在哪里生产响应：\n\n1. 始于ngx_worker_process_cycle\n2. 根据操作系统的特性处理事件（如epoll或kqueue）\n3. 接受事件、分发相关操作\n4. 处理/代理 请求头和请求体\n5. 生成响应内容（响应头、响应体）、流式返回给客户端\n6. 完成请求\n7. 重新初始化计时器和事件\n\n处理循环（run-loop）本身通过步骤5、6来保证增量地产生响应并流式的返回给客户端\n\n处理一个HTTP请求更详细的过程可能如下：\n\n1. 初始化请求处理\n2. 处理请求头\n3. 处理请求体\n4. 调用对应处理器\n5. 执行所有处理阶段\n\n如此，便将我们带到了处理阶段。\n\n### 处理阶段\n\nNginx处理一个请求时，往往会经历一系列的处理阶段。在每个处理阶段中，都会调用对应的处理器。阶段处理器与配置文件中定义的location关联，一般地，阶段处理器处理一个请求并生成对应输出。\n\n阶段处理器处理以下四件典型事件：\n\n* 获取location的配置\n* 生成相应的响应\n* 发送头(header)信息\n* 发送主体(body)信息 \n\n一个处理器对应一个参数：一个描述请求的特定结构。请求体结构包含了客户端请求的很多有用信息，如请求方法、URI、请求头信息。\n\n\nNginx在读取完HTTP请求头以后，根据配置查找对应的虚拟服务器。如果存在对应的虚拟服务器，请求将按照以下阶段进行处理：\n\n1. 服务器重写阶段(server rewrite phase)\n2. 定位所在阶段(location phase)\n3. 位置重写阶段(location rewrite phase) -- 这样便能够将请求带回给之前的阶段\n4. 到达控制阶段(access control phase)\n5. try_files阶段(try_files phase)\n6. 日志阶段(log phase)\n\n为了给请求生成必要的响应内容，nginx将请求交传递给相应的内容处理器。根据准确的location配置，nginx会先尝试如perl, proxy_pass, flv,mp4等所谓的无条件处理器。如果请求与以上内容处理器均不匹配，那么将会严格按下面顺序选取一个处理器：random index, index, autoindex, gzip_static, static。\n\nIndex模块详细内容见Nginx官方文档，该模块只用于处理后缀是“/”的请求。如果没有匹配上如mp4或autoindex这样的专业模块，那么响应内容将被认为是磁盘上的一个文件或目录（即静态的），将由static内容处理器完成服务。目录的URI将被自动重写，以保证后缀是一个斜杠（从而发起一个HTTP重定向)。\n\n### 过滤器\n\n内容处理器处理完以后，会把内容传递到过滤器。过滤器同样与location相关联，且一个location可配置关联多个过滤器。过滤器用于管理处理器产生的输出，且各个过滤处理器的执行顺序在编译时决定。\n\n自带的过滤器顺序是预定义好的，而第三方过滤器的顺序则可以在编译阶段设置。当前的nginx版本中，过滤器只能修改输出的数据，但尚未存在相关机制编写与关联过滤器用以修改输入内容。输入过滤器将在未来版本提供。\n\n过滤器遵循一个特定的设计模式。工作过程如下：\n\n1. 一个过滤器被调用\n2. 开始工作\n3. 检查过滤器链，若存在下一个，继续进入步骤1。否则，进入步骤4\n4. nginx结束响应。\n\n过滤器不用等待前面的过滤器结束。一旦上一个过滤器提供的输入已经可用，当前过滤器便可以马上启动自己的工作（功能上非常类似于Unix中的管道）。因而，在从上游服务器接收到所有的响应之前，所生成的输出响应便已被流式地发送给客户端。\n\n过滤器可分为Header过滤器和body过滤器,由Nginx将返回body和header分发给与之关联的对应处理器。\n\n其中一个header过滤主要由以下三步组成：\n\n1. 判定处理该响应\n2. 处理响应\n3. 调用下一个过滤器 \n\nbody过滤器用于改变响应内容，举例如下：\n \n* SSI(server-side includes)\n* XSTL过滤器\n* 图片过滤器(例如调整图片大小)\n* 转换字符集\n* gzip压缩\n* chunked 编码\n\n在过滤链处理完毕后，响应体被传给writer。与writer一起还有一对特定功能的附加过滤器：\n\n* 拷贝过滤（copy filter）：负责将相关响应内容填充到内存缓冲区，这些内容很可能被存于代理临时目录下。\n\n* 延迟过滤 (postpone filter)：用于处理子请求。\n\n### 子请求\n子请求是请求／响应处理中一个很重要的机制，同时也是Nginx最强大的方面之一。通过使用子请求，Nginx可返回一个与客户端请求URL不同的响应，即某些web框架中的内部重定向。而且，Nginx走得更远－－过滤器不仅可以使用多个子请求、合并这些输出到一个单独的响应，还能互相嵌套、分层处理。一个子请求A可以产生自己的子请求B，同时，B也可以启动自己的子请求C等。子请求可以被映射到物理硬盘上的文件、其它处理器、或上流服务器。\n将原始响应体中插入新的附加内容的功能，使子进程变得很有用。例如：\n\n* SSI（server-side include)使用一个过滤器解析返回文件的内容，然后使用其指定的URL来替换include指令。\n* 实现一个过滤器，使用整个文件内容作为URL被索引，并将新的文档内容附加到该URL本身。\n\n### 上游和负载均衡器\n\n#### 上游\n\n上游一般被认为是用于实现反向代理（proxy_pass处理器）的内容处理器。上游模块执行顺序一般如下：\n\n1. 准备请求\n2. 将请求发送给上游服务器（后端）\n3. 从上游服务器接收请求\n\n在该过程中,不会调用到输出过滤器。\n上游模块设置回调函数，供上游服务器准备好读写时使用。回调函数主要实现以下功能：\n\n* 准备请求缓冲区（或缓冲区链），用于发送给上游服务器\n* 重新初始化、重置到上游服务器的连接（准时发生于在再次发起请求之前）\n* 处理上游服务器响应的首字节，并且保存该响应的指针\n* 放弃请求（当客户端过早关闭连接时）\n* 在Nginx完成读取上游服务器响应时，结束请求\n* 整理响应体（如除去空白）\n\n####  负载均衡器\n\n当存在多个符合条件的上游服务器时，负载均衡器协助proxy_pass处理器为其提供一个选择上游服务器的能力。一个负载均衡器特性如下：\n\n* 注册一个被启用的配置文件指令\n* 提供附加的上游服务器初始化功能(使用DNS解析上游服务器名称等)\n* 初始化连接结构体\n* 决定如何路由请求\n* 更新状态信息\n\n目前，nginx支持两种标准的上游服务器负载均衡规则：轮询和ip哈希。\n上游和负载均衡处理机制包含检测上游服务器异常、将请求重新路由到剩余上游服务器的算法－－当然，为加强该能力，很多工作已列入计划。总之，更多的负载均衡相关工作已列入计划，此外，下一版本的nginx将大幅度提升以上能力，即：\n\n* 基于多上游服务器的均衡负载能力\n* 异常检测机制\n\n#### 变量处理器\n\n当然还有很多其他有意思的模块，这些模块大大丰富了配置文件中使用的变量集。Nginx中的变量根据不同的模块生成和更新，其中有两个模块为变量专用：geo和map。 \n\n* geo模块用于促进基于客户端ip的跟踪。该模块可根据客户端ip地址创建任意变量。\n* map模块允许从一个变量生成另一个变量，提供了灵活映射主机名和其他运行时变量的基本能力。\n\n以上这类模块称为变量处理器。\n\n#### 内存分配机制\nnginx的内存分配机制在一个单独的nginxworker中实现（从某些方面来讲，该思路受Apach启发）。\n一个nginx内存管理高层描述如下：\n对于每一个连接，必要的内存缓冲区特点如下：\n\n1. 动态生成(dynamically allocated)\n2. 关联(linked)\n3. 用于存储和管理请求头、请求体、响应\n4. 最后根据连接释放。\n\n值得注意的是，很重要的一点是nginx尽可能的去避免在内存中拷贝数据，大部分的数据通过指针进行传递，而不是调用memcpy。\n\n再深入一点，当一个模块生成响应时，这些响应内容放入内存缓冲区，而该缓存区最终将被添加到一个缓冲区链表。该缓冲区链同样适用于子请求处理工作。\n\n根据不同的模块类型，存在着多个处理场景，因而nginx中的缓冲区链表相当复杂。\n例如，在实现body filter模块中，精确地管理缓冲区是可能是相当棘手的。\n这个模块在某一时刻只能处理缓冲区链中的一个缓冲区，且必须决定\n\n* 是否覆盖输入缓冲区\n* 是否用新分配的缓冲区替换当前缓冲区\n* 是否在这个缓冲区之前或之后插入一个新缓冲区\n\n更复杂的情况，有时一个模块收到多个缓冲区数据，因而必须处理一个不完整的缓冲区链。然而目前nginx在维护缓存链中仅提供了底层API，所以开发者需要在真正掌握nginx这一晦涩难懂的部分之后，再去开发第三方模块。\n\n以上内容中需要注意的一点：Ninx中对于一个连接，存在着为连接的整个生命周期分配的内存缓冲区，所以对于长连接需要保留一些额外的内存。同时，对于一个空闲的keepalive连接，nginx仅消耗550字节内存。其中复用和共享内存缓冲区方面，将来的版本中可能会做相关的优化。\n\n内存分配管理的任务由nginx内存池分配器完成。共享内存区用于：\n\n* 存放接受互斥锁(accept mutex)\n* 缓存元数据\n* SSL会话缓存\n* 带宽监控和管理（限速）相关的信息\n\nNginx实现了slab分配器用于管理共享内存。为保证共享内存使用过程中的并发安全，提供了一系列锁机制（互斥锁和信号量）。为了组织复杂的数据结构，nginx也提供了红黑树的实现。红黑树用于在共享内存中保存缓存元数据，跟踪非正则location定义，以及其他一系列的任务。\n\n不幸的是，上述内容被从未一致、简单地描述过，以致Nginx的第三方扩展开发工作相当复杂。虽然有一些nginx内核介绍的优秀文档（如Evan Miller写的），但是这些文档需要做很多回归工程的努力，nginx模块的开发对很多人来说，依旧是黑盒。\n\n虽然开发第三方模块的核心难点尚未解决，nginx社区最近还是涌现了大量有用的第三方模块。案例如下：\n\n* 将Lua解释器嵌入nginx\n* 负载均衡附加模块\n* 完整的WebDAV支持\n* 高级缓存控制\n* 其他本文作者所鼓励和将来支持的有趣的第三方工作。\n\n","slug":"2015-06-10-nginx-introduction-IV","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhhz003tqj7ll1vqwqcv","content":"<h2 id=\"Nginx-介绍（译文IV–深入nginx内核）\"><a href=\"#Nginx-介绍（译文IV–深入nginx内核）\" class=\"headerlink\" title=\"Nginx 介绍（译文IV–深入nginx内核）\"></a>Nginx 介绍（译文IV–深入nginx内核）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\" target=\"_blank\" rel=\"external\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\" target=\"_blank\" rel=\"external\">Andrew Alexeev</a><ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br></ul></li><br></ul>\n\n\n\n\n<h2 id=\"本章目录\"><a href=\"#本章目录\" class=\"headerlink\" title=\"本章目录\"></a>本章目录</h2><ul><br><li><a href=\"#深入nginx内核\">深入nginx内核</a></li><br><ul><br><li><a href=\"#功能模块\">功能模块</a></li><br><li><a href=\"#worker\">Worker</a></li><br><li><a href=\"#处理阶段\">处理阶段</a></li><br><li><a href=\"#过滤器\">过滤器</a></li><br><li><a href=\"#子请求\">子请求</a></li><br><li><a href=\"#上游和负载均衡器\">上游和负载均衡器</a></li><br><ul><br><li><a href=\"#上游\">上游</a></li><br><li><a href=\"#负载均衡器\">负载均衡器</a></li><br></ul><br><li><a href=\"#变量处理器\">变量处理器</a></li><br><li><a href=\"#内存分配机制\">内存分配机制</a></li><br></ul><br></ul>\n\n\n\n<h2 id=\"深入nginx内核\"><a href=\"#深入nginx内核\" class=\"headerlink\" title=\"深入nginx内核\"></a>深入nginx内核</h2><p>如前文所提及，nginx的源码主要包括一个核心（core）和多个模块(modules)。其中核心(core)部分主要用于提供以下功能：</p>\n<ul>\n<li>作为web服务器的基础</li>\n<li>提供web及邮箱的反向代理（mail reverse proxy）的功能</li>\n<li>允许使用底层网络协议</li>\n<li>创建必要的运行时环境</li>\n<li>保证各个模块间的无缝交互</li>\n</ul>\n<p>需要注意的是：大部分的协议和为应用程序定制的特性，由nginx的模块（modules）而非核心（core）完成。</p>\n<p>在nginx的内部，通过各个模块间的管道(pipeline)或模块链(chain)来处理所有连接。或者说，对于每个操作，都有相应的模块在处理该工作，例如</p>\n<ul>\n<li>压缩</li>\n<li>修改内容</li>\n<li>执行SSI（server-side includes）</li>\n<li>通过FastCGI、uwsgi协议与后端应用服务器交互</li>\n<li>与memcache交互。</li>\n</ul>\n<p>在核心(core)与实际功能模块（real “functional” modules）之间，还有一对模块，即http和mail。这两个模块在核心(core)和更底层的组建中间提供了一个附加的抽象层。在这些模块中，处理与各自应用层协议相关的事件序列，如已实现的HTTP，SMTP，IMAP。</p>\n<p>结合Nginx核心(core)，这些上层的模块负责维护调用不同功能模块的正确顺序。虽然目前HTTP协议是作为http模块的一部分实现的，但为支持其他协议如SPDY（参考“<a href=\"http://www.chromium.org/spdy/spdy-whitepaper\" target=\"_blank\" rel=\"external\">SPDY: An experimental protocol for a faster web</a>），将http独立为一个功能模块已列入计划中。</p>\n<h3 id=\"功能模块\"><a href=\"#功能模块\" class=\"headerlink\" title=\"功能模块\"></a>功能模块</h3><p>功能模块可以分为以下几类：</p>\n<ul>\n<li>事件模块</li>\n<li>阶段处理器</li>\n<li>输出过滤器</li>\n<li>变量处理器</li>\n<li>协议模块</li>\n<li>上游及负载均衡器</li>\n</ul>\n<p>虽然mail模块中用到了事件模块和协议，但以上大部分模块用于补充nginx的HTTP功能。</p>\n<ul>\n<li>事件模块提供了类似于kqueue和epool的基于操作系统的事件通知机制，主要取决于操作系统的能力与编译配置。</li>\n<li>协议模块允许nginx通过HTTPS, TLS/SSL, SMTP, POP3 和 IMAP等协议通信。</li>\n</ul>\n<p>典型的HTTP请求处理周期如下：</p>\n<ol>\n<li>客户端发送HTTP请求。</li>\n<li>nginx核心根据配置匹配该请求的location，选择对应的阶段处理器。</li>\n<li>根据配置需要，负载均衡器挑选一个上游服务器用于转发请求。</li>\n<li>阶段处理器完成工作，并将每个输出缓冲区传递给第一个过滤器。</li>\n<li>第一个过滤器将输出传给第二个过滤器。</li>\n<li>第二个过滤器传递输出给第三个（。。。）。</li>\n<li>最终将响应发送给客户端。</li>\n</ol>\n<p>Nginx模块调用是高度可定制的。它主要通过一系列的回调展开工作，而这些回调则通过使用指向可执行函数的指针来实现。因而，对于那些想要自己编写模块的开发者，就必须准确地定义这些自定义模块如何运行、何时运行，从而大大加重了负担。为了缓解该负担，使之能够更好地执行，Nginx的API和开发者文档都在不断地优化中。</p>\n<p>一些在nginx中插入模块的案例：</p>\n<ul>\n<li>读取和处理配置文件之前</li>\n<li>Location和server的每个配置指令生效时</li>\n<li>Main配置被初始化后</li>\n<li>Server配置（host/port）初始化后</li>\n<li>Server配置合并到main配置后</li>\n<li>Location配置初始化或者被合并到父server配置时</li>\n<li>Master进程启动或退出时</li>\n<li>新的worker进程启动或退出时</li>\n<li>处理请求时</li>\n<li>过滤响应头和响应体时</li>\n<li>为request挑选，初始化和重新初始化上游服务器时</li>\n<li>处理上游服务器响应时</li>\n<li>完成与上游服务器的交互时</li>\n</ul>\n<h3 id=\"worker\"><a href=\"#worker\" class=\"headerlink\" title=\"worker\"></a>worker</h3><p>在一个woker内部，通过以下操作来引导处理循坏（run-loop）在哪里生产响应：</p>\n<ol>\n<li>始于ngx_worker_process_cycle</li>\n<li>根据操作系统的特性处理事件（如epoll或kqueue）</li>\n<li>接受事件、分发相关操作</li>\n<li>处理/代理 请求头和请求体</li>\n<li>生成响应内容（响应头、响应体）、流式返回给客户端</li>\n<li>完成请求</li>\n<li>重新初始化计时器和事件</li>\n</ol>\n<p>处理循环（run-loop）本身通过步骤5、6来保证增量地产生响应并流式的返回给客户端</p>\n<p>处理一个HTTP请求更详细的过程可能如下：</p>\n<ol>\n<li>初始化请求处理</li>\n<li>处理请求头</li>\n<li>处理请求体</li>\n<li>调用对应处理器</li>\n<li>执行所有处理阶段</li>\n</ol>\n<p>如此，便将我们带到了处理阶段。</p>\n<h3 id=\"处理阶段\"><a href=\"#处理阶段\" class=\"headerlink\" title=\"处理阶段\"></a>处理阶段</h3><p>Nginx处理一个请求时，往往会经历一系列的处理阶段。在每个处理阶段中，都会调用对应的处理器。阶段处理器与配置文件中定义的location关联，一般地，阶段处理器处理一个请求并生成对应输出。</p>\n<p>阶段处理器处理以下四件典型事件：</p>\n<ul>\n<li>获取location的配置</li>\n<li>生成相应的响应</li>\n<li>发送头(header)信息</li>\n<li>发送主体(body)信息 </li>\n</ul>\n<p>一个处理器对应一个参数：一个描述请求的特定结构。请求体结构包含了客户端请求的很多有用信息，如请求方法、URI、请求头信息。</p>\n<p>Nginx在读取完HTTP请求头以后，根据配置查找对应的虚拟服务器。如果存在对应的虚拟服务器，请求将按照以下阶段进行处理：</p>\n<ol>\n<li>服务器重写阶段(server rewrite phase)</li>\n<li>定位所在阶段(location phase)</li>\n<li>位置重写阶段(location rewrite phase) – 这样便能够将请求带回给之前的阶段</li>\n<li>到达控制阶段(access control phase)</li>\n<li>try_files阶段(try_files phase)</li>\n<li>日志阶段(log phase)</li>\n</ol>\n<p>为了给请求生成必要的响应内容，nginx将请求交传递给相应的内容处理器。根据准确的location配置，nginx会先尝试如perl, proxy_pass, flv,mp4等所谓的无条件处理器。如果请求与以上内容处理器均不匹配，那么将会严格按下面顺序选取一个处理器：random index, index, autoindex, gzip_static, static。</p>\n<p>Index模块详细内容见Nginx官方文档，该模块只用于处理后缀是“/”的请求。如果没有匹配上如mp4或autoindex这样的专业模块，那么响应内容将被认为是磁盘上的一个文件或目录（即静态的），将由static内容处理器完成服务。目录的URI将被自动重写，以保证后缀是一个斜杠（从而发起一个HTTP重定向)。</p>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>内容处理器处理完以后，会把内容传递到过滤器。过滤器同样与location相关联，且一个location可配置关联多个过滤器。过滤器用于管理处理器产生的输出，且各个过滤处理器的执行顺序在编译时决定。</p>\n<p>自带的过滤器顺序是预定义好的，而第三方过滤器的顺序则可以在编译阶段设置。当前的nginx版本中，过滤器只能修改输出的数据，但尚未存在相关机制编写与关联过滤器用以修改输入内容。输入过滤器将在未来版本提供。</p>\n<p>过滤器遵循一个特定的设计模式。工作过程如下：</p>\n<ol>\n<li>一个过滤器被调用</li>\n<li>开始工作</li>\n<li>检查过滤器链，若存在下一个，继续进入步骤1。否则，进入步骤4</li>\n<li>nginx结束响应。</li>\n</ol>\n<p>过滤器不用等待前面的过滤器结束。一旦上一个过滤器提供的输入已经可用，当前过滤器便可以马上启动自己的工作（功能上非常类似于Unix中的管道）。因而，在从上游服务器接收到所有的响应之前，所生成的输出响应便已被流式地发送给客户端。</p>\n<p>过滤器可分为Header过滤器和body过滤器,由Nginx将返回body和header分发给与之关联的对应处理器。</p>\n<p>其中一个header过滤主要由以下三步组成：</p>\n<ol>\n<li>判定处理该响应</li>\n<li>处理响应</li>\n<li>调用下一个过滤器 </li>\n</ol>\n<p>body过滤器用于改变响应内容，举例如下：</p>\n<ul>\n<li>SSI(server-side includes)</li>\n<li>XSTL过滤器</li>\n<li>图片过滤器(例如调整图片大小)</li>\n<li>转换字符集</li>\n<li>gzip压缩</li>\n<li>chunked 编码</li>\n</ul>\n<p>在过滤链处理完毕后，响应体被传给writer。与writer一起还有一对特定功能的附加过滤器：</p>\n<ul>\n<li><p>拷贝过滤（copy filter）：负责将相关响应内容填充到内存缓冲区，这些内容很可能被存于代理临时目录下。</p>\n</li>\n<li><p>延迟过滤 (postpone filter)：用于处理子请求。</p>\n</li>\n</ul>\n<h3 id=\"子请求\"><a href=\"#子请求\" class=\"headerlink\" title=\"子请求\"></a>子请求</h3><p>子请求是请求／响应处理中一个很重要的机制，同时也是Nginx最强大的方面之一。通过使用子请求，Nginx可返回一个与客户端请求URL不同的响应，即某些web框架中的内部重定向。而且，Nginx走得更远－－过滤器不仅可以使用多个子请求、合并这些输出到一个单独的响应，还能互相嵌套、分层处理。一个子请求A可以产生自己的子请求B，同时，B也可以启动自己的子请求C等。子请求可以被映射到物理硬盘上的文件、其它处理器、或上流服务器。<br>将原始响应体中插入新的附加内容的功能，使子进程变得很有用。例如：</p>\n<ul>\n<li>SSI（server-side include)使用一个过滤器解析返回文件的内容，然后使用其指定的URL来替换include指令。</li>\n<li>实现一个过滤器，使用整个文件内容作为URL被索引，并将新的文档内容附加到该URL本身。</li>\n</ul>\n<h3 id=\"上游和负载均衡器\"><a href=\"#上游和负载均衡器\" class=\"headerlink\" title=\"上游和负载均衡器\"></a>上游和负载均衡器</h3><h4 id=\"上游\"><a href=\"#上游\" class=\"headerlink\" title=\"上游\"></a>上游</h4><p>上游一般被认为是用于实现反向代理（proxy_pass处理器）的内容处理器。上游模块执行顺序一般如下：</p>\n<ol>\n<li>准备请求</li>\n<li>将请求发送给上游服务器（后端）</li>\n<li>从上游服务器接收请求</li>\n</ol>\n<p>在该过程中,不会调用到输出过滤器。<br>上游模块设置回调函数，供上游服务器准备好读写时使用。回调函数主要实现以下功能：</p>\n<ul>\n<li>准备请求缓冲区（或缓冲区链），用于发送给上游服务器</li>\n<li>重新初始化、重置到上游服务器的连接（准时发生于在再次发起请求之前）</li>\n<li>处理上游服务器响应的首字节，并且保存该响应的指针</li>\n<li>放弃请求（当客户端过早关闭连接时）</li>\n<li>在Nginx完成读取上游服务器响应时，结束请求</li>\n<li>整理响应体（如除去空白）</li>\n</ul>\n<h4 id=\"负载均衡器\"><a href=\"#负载均衡器\" class=\"headerlink\" title=\"负载均衡器\"></a>负载均衡器</h4><p>当存在多个符合条件的上游服务器时，负载均衡器协助proxy_pass处理器为其提供一个选择上游服务器的能力。一个负载均衡器特性如下：</p>\n<ul>\n<li>注册一个被启用的配置文件指令</li>\n<li>提供附加的上游服务器初始化功能(使用DNS解析上游服务器名称等)</li>\n<li>初始化连接结构体</li>\n<li>决定如何路由请求</li>\n<li>更新状态信息</li>\n</ul>\n<p>目前，nginx支持两种标准的上游服务器负载均衡规则：轮询和ip哈希。<br>上游和负载均衡处理机制包含检测上游服务器异常、将请求重新路由到剩余上游服务器的算法－－当然，为加强该能力，很多工作已列入计划。总之，更多的负载均衡相关工作已列入计划，此外，下一版本的nginx将大幅度提升以上能力，即：</p>\n<ul>\n<li>基于多上游服务器的均衡负载能力</li>\n<li>异常检测机制</li>\n</ul>\n<h4 id=\"变量处理器\"><a href=\"#变量处理器\" class=\"headerlink\" title=\"变量处理器\"></a>变量处理器</h4><p>当然还有很多其他有意思的模块，这些模块大大丰富了配置文件中使用的变量集。Nginx中的变量根据不同的模块生成和更新，其中有两个模块为变量专用：geo和map。 </p>\n<ul>\n<li>geo模块用于促进基于客户端ip的跟踪。该模块可根据客户端ip地址创建任意变量。</li>\n<li>map模块允许从一个变量生成另一个变量，提供了灵活映射主机名和其他运行时变量的基本能力。</li>\n</ul>\n<p>以上这类模块称为变量处理器。</p>\n<h4 id=\"内存分配机制\"><a href=\"#内存分配机制\" class=\"headerlink\" title=\"内存分配机制\"></a>内存分配机制</h4><p>nginx的内存分配机制在一个单独的nginxworker中实现（从某些方面来讲，该思路受Apach启发）。<br>一个nginx内存管理高层描述如下：<br>对于每一个连接，必要的内存缓冲区特点如下：</p>\n<ol>\n<li>动态生成(dynamically allocated)</li>\n<li>关联(linked)</li>\n<li>用于存储和管理请求头、请求体、响应</li>\n<li>最后根据连接释放。</li>\n</ol>\n<p>值得注意的是，很重要的一点是nginx尽可能的去避免在内存中拷贝数据，大部分的数据通过指针进行传递，而不是调用memcpy。</p>\n<p>再深入一点，当一个模块生成响应时，这些响应内容放入内存缓冲区，而该缓存区最终将被添加到一个缓冲区链表。该缓冲区链同样适用于子请求处理工作。</p>\n<p>根据不同的模块类型，存在着多个处理场景，因而nginx中的缓冲区链表相当复杂。<br>例如，在实现body filter模块中，精确地管理缓冲区是可能是相当棘手的。<br>这个模块在某一时刻只能处理缓冲区链中的一个缓冲区，且必须决定</p>\n<ul>\n<li>是否覆盖输入缓冲区</li>\n<li>是否用新分配的缓冲区替换当前缓冲区</li>\n<li>是否在这个缓冲区之前或之后插入一个新缓冲区</li>\n</ul>\n<p>更复杂的情况，有时一个模块收到多个缓冲区数据，因而必须处理一个不完整的缓冲区链。然而目前nginx在维护缓存链中仅提供了底层API，所以开发者需要在真正掌握nginx这一晦涩难懂的部分之后，再去开发第三方模块。</p>\n<p>以上内容中需要注意的一点：Ninx中对于一个连接，存在着为连接的整个生命周期分配的内存缓冲区，所以对于长连接需要保留一些额外的内存。同时，对于一个空闲的keepalive连接，nginx仅消耗550字节内存。其中复用和共享内存缓冲区方面，将来的版本中可能会做相关的优化。</p>\n<p>内存分配管理的任务由nginx内存池分配器完成。共享内存区用于：</p>\n<ul>\n<li>存放接受互斥锁(accept mutex)</li>\n<li>缓存元数据</li>\n<li>SSL会话缓存</li>\n<li>带宽监控和管理（限速）相关的信息</li>\n</ul>\n<p>Nginx实现了slab分配器用于管理共享内存。为保证共享内存使用过程中的并发安全，提供了一系列锁机制（互斥锁和信号量）。为了组织复杂的数据结构，nginx也提供了红黑树的实现。红黑树用于在共享内存中保存缓存元数据，跟踪非正则location定义，以及其他一系列的任务。</p>\n<p>不幸的是，上述内容被从未一致、简单地描述过，以致Nginx的第三方扩展开发工作相当复杂。虽然有一些nginx内核介绍的优秀文档（如Evan Miller写的），但是这些文档需要做很多回归工程的努力，nginx模块的开发对很多人来说，依旧是黑盒。</p>\n<p>虽然开发第三方模块的核心难点尚未解决，nginx社区最近还是涌现了大量有用的第三方模块。案例如下：</p>\n<ul>\n<li>将Lua解释器嵌入nginx</li>\n<li>负载均衡附加模块</li>\n<li>完整的WebDAV支持</li>\n<li>高级缓存控制</li>\n<li>其他本文作者所鼓励和将来支持的有趣的第三方工作。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Nginx-介绍（译文IV–深入nginx内核）\"><a href=\"#Nginx-介绍（译文IV–深入nginx内核）\" class=\"headerlink\" title=\"Nginx 介绍（译文IV–深入nginx内核）\"></a>Nginx 介绍（译文IV–深入nginx内核）</h2><ul>\n<li>原文 <a href=\"http://www.aosabook.org/en/nginx.html\">nginx</a></li>\n<li>作者 <a href=\"http://www.aosabook.org/en/intro2.html#alexeev-andrew\">Andrew Alexeev</a><ul><br>译文结构<br><ul><br><li><a href=\"/nginx/nginx-introduction-I.html\">译文I–为什么高并发很重要</a></li><br><li><a href=\"/nginx/nginx-introduction-II.html\">译文II–Nginx架构综述</a></li><br><li><a href=\"/nginx/nginx-introduction-III.html\">译文III–Nginx配置结构</a></li><br><li><a href=\"/nginx/nginx-introduction-IV.html\">译文IV–深入nginx内核</a></li><br><li><a href=\"/nginx/nginx-introduction-V.html\">译文V–总结</a></li><br></ul><br></li><br></ul>\n\n\n</li>\n</ul>\n<h2 id=\"本章目录\"><a href=\"#本章目录\" class=\"headerlink\" title=\"本章目录\"></a>本章目录</h2><ul><br><li><a href=\"#深入nginx内核\">深入nginx内核</a></li><br><ul><br><li><a href=\"#功能模块\">功能模块</a></li><br><li><a href=\"#worker\">Worker</a></li><br><li><a href=\"#处理阶段\">处理阶段</a></li><br><li><a href=\"#过滤器\">过滤器</a></li><br><li><a href=\"#子请求\">子请求</a></li><br><li><a href=\"#上游和负载均衡器\">上游和负载均衡器</a></li><br><ul><br><li><a href=\"#上游\">上游</a></li><br><li><a href=\"#负载均衡器\">负载均衡器</a></li><br></ul><br><li><a href=\"#变量处理器\">变量处理器</a></li><br><li><a href=\"#内存分配机制\">内存分配机制</a></li><br></ul><br></ul>\n\n\n\n<h2 id=\"深入nginx内核\"><a href=\"#深入nginx内核\" class=\"headerlink\" title=\"深入nginx内核\"></a>深入nginx内核</h2><p>如前文所提及，nginx的源码主要包括一个核心（core）和多个模块(modules)。其中核心(core)部分主要用于提供以下功能：</p>\n<ul>\n<li>作为web服务器的基础</li>\n<li>提供web及邮箱的反向代理（mail reverse proxy）的功能</li>\n<li>允许使用底层网络协议</li>\n<li>创建必要的运行时环境</li>\n<li>保证各个模块间的无缝交互</li>\n</ul>\n<p>需要注意的是：大部分的协议和为应用程序定制的特性，由nginx的模块（modules）而非核心（core）完成。</p>\n<p>在nginx的内部，通过各个模块间的管道(pipeline)或模块链(chain)来处理所有连接。或者说，对于每个操作，都有相应的模块在处理该工作，例如</p>\n<ul>\n<li>压缩</li>\n<li>修改内容</li>\n<li>执行SSI（server-side includes）</li>\n<li>通过FastCGI、uwsgi协议与后端应用服务器交互</li>\n<li>与memcache交互。</li>\n</ul>\n<p>在核心(core)与实际功能模块（real “functional” modules）之间，还有一对模块，即http和mail。这两个模块在核心(core)和更底层的组建中间提供了一个附加的抽象层。在这些模块中，处理与各自应用层协议相关的事件序列，如已实现的HTTP，SMTP，IMAP。</p>\n<p>结合Nginx核心(core)，这些上层的模块负责维护调用不同功能模块的正确顺序。虽然目前HTTP协议是作为http模块的一部分实现的，但为支持其他协议如SPDY（参考“<a href=\"http://www.chromium.org/spdy/spdy-whitepaper\">SPDY: An experimental protocol for a faster web</a>），将http独立为一个功能模块已列入计划中。</p>\n<h3 id=\"功能模块\"><a href=\"#功能模块\" class=\"headerlink\" title=\"功能模块\"></a>功能模块</h3><p>功能模块可以分为以下几类：</p>\n<ul>\n<li>事件模块</li>\n<li>阶段处理器</li>\n<li>输出过滤器</li>\n<li>变量处理器</li>\n<li>协议模块</li>\n<li>上游及负载均衡器</li>\n</ul>\n<p>虽然mail模块中用到了事件模块和协议，但以上大部分模块用于补充nginx的HTTP功能。</p>\n<ul>\n<li>事件模块提供了类似于kqueue和epool的基于操作系统的事件通知机制，主要取决于操作系统的能力与编译配置。</li>\n<li>协议模块允许nginx通过HTTPS, TLS/SSL, SMTP, POP3 和 IMAP等协议通信。</li>\n</ul>\n<p>典型的HTTP请求处理周期如下：</p>\n<ol>\n<li>客户端发送HTTP请求。</li>\n<li>nginx核心根据配置匹配该请求的location，选择对应的阶段处理器。</li>\n<li>根据配置需要，负载均衡器挑选一个上游服务器用于转发请求。</li>\n<li>阶段处理器完成工作，并将每个输出缓冲区传递给第一个过滤器。</li>\n<li>第一个过滤器将输出传给第二个过滤器。</li>\n<li>第二个过滤器传递输出给第三个（。。。）。</li>\n<li>最终将响应发送给客户端。</li>\n</ol>\n<p>Nginx模块调用是高度可定制的。它主要通过一系列的回调展开工作，而这些回调则通过使用指向可执行函数的指针来实现。因而，对于那些想要自己编写模块的开发者，就必须准确地定义这些自定义模块如何运行、何时运行，从而大大加重了负担。为了缓解该负担，使之能够更好地执行，Nginx的API和开发者文档都在不断地优化中。</p>\n<p>一些在nginx中插入模块的案例：</p>\n<ul>\n<li>读取和处理配置文件之前</li>\n<li>Location和server的每个配置指令生效时</li>\n<li>Main配置被初始化后</li>\n<li>Server配置（host/port）初始化后</li>\n<li>Server配置合并到main配置后</li>\n<li>Location配置初始化或者被合并到父server配置时</li>\n<li>Master进程启动或退出时</li>\n<li>新的worker进程启动或退出时</li>\n<li>处理请求时</li>\n<li>过滤响应头和响应体时</li>\n<li>为request挑选，初始化和重新初始化上游服务器时</li>\n<li>处理上游服务器响应时</li>\n<li>完成与上游服务器的交互时</li>\n</ul>\n<h3 id=\"worker\"><a href=\"#worker\" class=\"headerlink\" title=\"worker\"></a>worker</h3><p>在一个woker内部，通过以下操作来引导处理循坏（run-loop）在哪里生产响应：</p>\n<ol>\n<li>始于ngx_worker_process_cycle</li>\n<li>根据操作系统的特性处理事件（如epoll或kqueue）</li>\n<li>接受事件、分发相关操作</li>\n<li>处理/代理 请求头和请求体</li>\n<li>生成响应内容（响应头、响应体）、流式返回给客户端</li>\n<li>完成请求</li>\n<li>重新初始化计时器和事件</li>\n</ol>\n<p>处理循环（run-loop）本身通过步骤5、6来保证增量地产生响应并流式的返回给客户端</p>\n<p>处理一个HTTP请求更详细的过程可能如下：</p>\n<ol>\n<li>初始化请求处理</li>\n<li>处理请求头</li>\n<li>处理请求体</li>\n<li>调用对应处理器</li>\n<li>执行所有处理阶段</li>\n</ol>\n<p>如此，便将我们带到了处理阶段。</p>\n<h3 id=\"处理阶段\"><a href=\"#处理阶段\" class=\"headerlink\" title=\"处理阶段\"></a>处理阶段</h3><p>Nginx处理一个请求时，往往会经历一系列的处理阶段。在每个处理阶段中，都会调用对应的处理器。阶段处理器与配置文件中定义的location关联，一般地，阶段处理器处理一个请求并生成对应输出。</p>\n<p>阶段处理器处理以下四件典型事件：</p>\n<ul>\n<li>获取location的配置</li>\n<li>生成相应的响应</li>\n<li>发送头(header)信息</li>\n<li>发送主体(body)信息 </li>\n</ul>\n<p>一个处理器对应一个参数：一个描述请求的特定结构。请求体结构包含了客户端请求的很多有用信息，如请求方法、URI、请求头信息。</p>\n<p>Nginx在读取完HTTP请求头以后，根据配置查找对应的虚拟服务器。如果存在对应的虚拟服务器，请求将按照以下阶段进行处理：</p>\n<ol>\n<li>服务器重写阶段(server rewrite phase)</li>\n<li>定位所在阶段(location phase)</li>\n<li>位置重写阶段(location rewrite phase) – 这样便能够将请求带回给之前的阶段</li>\n<li>到达控制阶段(access control phase)</li>\n<li>try_files阶段(try_files phase)</li>\n<li>日志阶段(log phase)</li>\n</ol>\n<p>为了给请求生成必要的响应内容，nginx将请求交传递给相应的内容处理器。根据准确的location配置，nginx会先尝试如perl, proxy_pass, flv,mp4等所谓的无条件处理器。如果请求与以上内容处理器均不匹配，那么将会严格按下面顺序选取一个处理器：random index, index, autoindex, gzip_static, static。</p>\n<p>Index模块详细内容见Nginx官方文档，该模块只用于处理后缀是“/”的请求。如果没有匹配上如mp4或autoindex这样的专业模块，那么响应内容将被认为是磁盘上的一个文件或目录（即静态的），将由static内容处理器完成服务。目录的URI将被自动重写，以保证后缀是一个斜杠（从而发起一个HTTP重定向)。</p>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>内容处理器处理完以后，会把内容传递到过滤器。过滤器同样与location相关联，且一个location可配置关联多个过滤器。过滤器用于管理处理器产生的输出，且各个过滤处理器的执行顺序在编译时决定。</p>\n<p>自带的过滤器顺序是预定义好的，而第三方过滤器的顺序则可以在编译阶段设置。当前的nginx版本中，过滤器只能修改输出的数据，但尚未存在相关机制编写与关联过滤器用以修改输入内容。输入过滤器将在未来版本提供。</p>\n<p>过滤器遵循一个特定的设计模式。工作过程如下：</p>\n<ol>\n<li>一个过滤器被调用</li>\n<li>开始工作</li>\n<li>检查过滤器链，若存在下一个，继续进入步骤1。否则，进入步骤4</li>\n<li>nginx结束响应。</li>\n</ol>\n<p>过滤器不用等待前面的过滤器结束。一旦上一个过滤器提供的输入已经可用，当前过滤器便可以马上启动自己的工作（功能上非常类似于Unix中的管道）。因而，在从上游服务器接收到所有的响应之前，所生成的输出响应便已被流式地发送给客户端。</p>\n<p>过滤器可分为Header过滤器和body过滤器,由Nginx将返回body和header分发给与之关联的对应处理器。</p>\n<p>其中一个header过滤主要由以下三步组成：</p>\n<ol>\n<li>判定处理该响应</li>\n<li>处理响应</li>\n<li>调用下一个过滤器 </li>\n</ol>\n<p>body过滤器用于改变响应内容，举例如下：</p>\n<ul>\n<li>SSI(server-side includes)</li>\n<li>XSTL过滤器</li>\n<li>图片过滤器(例如调整图片大小)</li>\n<li>转换字符集</li>\n<li>gzip压缩</li>\n<li>chunked 编码</li>\n</ul>\n<p>在过滤链处理完毕后，响应体被传给writer。与writer一起还有一对特定功能的附加过滤器：</p>\n<ul>\n<li><p>拷贝过滤（copy filter）：负责将相关响应内容填充到内存缓冲区，这些内容很可能被存于代理临时目录下。</p>\n</li>\n<li><p>延迟过滤 (postpone filter)：用于处理子请求。</p>\n</li>\n</ul>\n<h3 id=\"子请求\"><a href=\"#子请求\" class=\"headerlink\" title=\"子请求\"></a>子请求</h3><p>子请求是请求／响应处理中一个很重要的机制，同时也是Nginx最强大的方面之一。通过使用子请求，Nginx可返回一个与客户端请求URL不同的响应，即某些web框架中的内部重定向。而且，Nginx走得更远－－过滤器不仅可以使用多个子请求、合并这些输出到一个单独的响应，还能互相嵌套、分层处理。一个子请求A可以产生自己的子请求B，同时，B也可以启动自己的子请求C等。子请求可以被映射到物理硬盘上的文件、其它处理器、或上流服务器。<br>将原始响应体中插入新的附加内容的功能，使子进程变得很有用。例如：</p>\n<ul>\n<li>SSI（server-side include)使用一个过滤器解析返回文件的内容，然后使用其指定的URL来替换include指令。</li>\n<li>实现一个过滤器，使用整个文件内容作为URL被索引，并将新的文档内容附加到该URL本身。</li>\n</ul>\n<h3 id=\"上游和负载均衡器\"><a href=\"#上游和负载均衡器\" class=\"headerlink\" title=\"上游和负载均衡器\"></a>上游和负载均衡器</h3><h4 id=\"上游\"><a href=\"#上游\" class=\"headerlink\" title=\"上游\"></a>上游</h4><p>上游一般被认为是用于实现反向代理（proxy_pass处理器）的内容处理器。上游模块执行顺序一般如下：</p>\n<ol>\n<li>准备请求</li>\n<li>将请求发送给上游服务器（后端）</li>\n<li>从上游服务器接收请求</li>\n</ol>\n<p>在该过程中,不会调用到输出过滤器。<br>上游模块设置回调函数，供上游服务器准备好读写时使用。回调函数主要实现以下功能：</p>\n<ul>\n<li>准备请求缓冲区（或缓冲区链），用于发送给上游服务器</li>\n<li>重新初始化、重置到上游服务器的连接（准时发生于在再次发起请求之前）</li>\n<li>处理上游服务器响应的首字节，并且保存该响应的指针</li>\n<li>放弃请求（当客户端过早关闭连接时）</li>\n<li>在Nginx完成读取上游服务器响应时，结束请求</li>\n<li>整理响应体（如除去空白）</li>\n</ul>\n<h4 id=\"负载均衡器\"><a href=\"#负载均衡器\" class=\"headerlink\" title=\"负载均衡器\"></a>负载均衡器</h4><p>当存在多个符合条件的上游服务器时，负载均衡器协助proxy_pass处理器为其提供一个选择上游服务器的能力。一个负载均衡器特性如下：</p>\n<ul>\n<li>注册一个被启用的配置文件指令</li>\n<li>提供附加的上游服务器初始化功能(使用DNS解析上游服务器名称等)</li>\n<li>初始化连接结构体</li>\n<li>决定如何路由请求</li>\n<li>更新状态信息</li>\n</ul>\n<p>目前，nginx支持两种标准的上游服务器负载均衡规则：轮询和ip哈希。<br>上游和负载均衡处理机制包含检测上游服务器异常、将请求重新路由到剩余上游服务器的算法－－当然，为加强该能力，很多工作已列入计划。总之，更多的负载均衡相关工作已列入计划，此外，下一版本的nginx将大幅度提升以上能力，即：</p>\n<ul>\n<li>基于多上游服务器的均衡负载能力</li>\n<li>异常检测机制</li>\n</ul>\n<h4 id=\"变量处理器\"><a href=\"#变量处理器\" class=\"headerlink\" title=\"变量处理器\"></a>变量处理器</h4><p>当然还有很多其他有意思的模块，这些模块大大丰富了配置文件中使用的变量集。Nginx中的变量根据不同的模块生成和更新，其中有两个模块为变量专用：geo和map。 </p>\n<ul>\n<li>geo模块用于促进基于客户端ip的跟踪。该模块可根据客户端ip地址创建任意变量。</li>\n<li>map模块允许从一个变量生成另一个变量，提供了灵活映射主机名和其他运行时变量的基本能力。</li>\n</ul>\n<p>以上这类模块称为变量处理器。</p>\n<h4 id=\"内存分配机制\"><a href=\"#内存分配机制\" class=\"headerlink\" title=\"内存分配机制\"></a>内存分配机制</h4><p>nginx的内存分配机制在一个单独的nginxworker中实现（从某些方面来讲，该思路受Apach启发）。<br>一个nginx内存管理高层描述如下：<br>对于每一个连接，必要的内存缓冲区特点如下：</p>\n<ol>\n<li>动态生成(dynamically allocated)</li>\n<li>关联(linked)</li>\n<li>用于存储和管理请求头、请求体、响应</li>\n<li>最后根据连接释放。</li>\n</ol>\n<p>值得注意的是，很重要的一点是nginx尽可能的去避免在内存中拷贝数据，大部分的数据通过指针进行传递，而不是调用memcpy。</p>\n<p>再深入一点，当一个模块生成响应时，这些响应内容放入内存缓冲区，而该缓存区最终将被添加到一个缓冲区链表。该缓冲区链同样适用于子请求处理工作。</p>\n<p>根据不同的模块类型，存在着多个处理场景，因而nginx中的缓冲区链表相当复杂。<br>例如，在实现body filter模块中，精确地管理缓冲区是可能是相当棘手的。<br>这个模块在某一时刻只能处理缓冲区链中的一个缓冲区，且必须决定</p>\n<ul>\n<li>是否覆盖输入缓冲区</li>\n<li>是否用新分配的缓冲区替换当前缓冲区</li>\n<li>是否在这个缓冲区之前或之后插入一个新缓冲区</li>\n</ul>\n<p>更复杂的情况，有时一个模块收到多个缓冲区数据，因而必须处理一个不完整的缓冲区链。然而目前nginx在维护缓存链中仅提供了底层API，所以开发者需要在真正掌握nginx这一晦涩难懂的部分之后，再去开发第三方模块。</p>\n<p>以上内容中需要注意的一点：Ninx中对于一个连接，存在着为连接的整个生命周期分配的内存缓冲区，所以对于长连接需要保留一些额外的内存。同时，对于一个空闲的keepalive连接，nginx仅消耗550字节内存。其中复用和共享内存缓冲区方面，将来的版本中可能会做相关的优化。</p>\n<p>内存分配管理的任务由nginx内存池分配器完成。共享内存区用于：</p>\n<ul>\n<li>存放接受互斥锁(accept mutex)</li>\n<li>缓存元数据</li>\n<li>SSL会话缓存</li>\n<li>带宽监控和管理（限速）相关的信息</li>\n</ul>\n<p>Nginx实现了slab分配器用于管理共享内存。为保证共享内存使用过程中的并发安全，提供了一系列锁机制（互斥锁和信号量）。为了组织复杂的数据结构，nginx也提供了红黑树的实现。红黑树用于在共享内存中保存缓存元数据，跟踪非正则location定义，以及其他一系列的任务。</p>\n<p>不幸的是，上述内容被从未一致、简单地描述过，以致Nginx的第三方扩展开发工作相当复杂。虽然有一些nginx内核介绍的优秀文档（如Evan Miller写的），但是这些文档需要做很多回归工程的努力，nginx模块的开发对很多人来说，依旧是黑盒。</p>\n<p>虽然开发第三方模块的核心难点尚未解决，nginx社区最近还是涌现了大量有用的第三方模块。案例如下：</p>\n<ul>\n<li>将Lua解释器嵌入nginx</li>\n<li>负载均衡附加模块</li>\n<li>完整的WebDAV支持</li>\n<li>高级缓存控制</li>\n<li>其他本文作者所鼓励和将来支持的有趣的第三方工作。</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-06-13T02:38:38.000Z","updated":"2016-06-13T02:38:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipdewhi0003wqj7lzxvzcnu7","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"Nginx学习笔记(Nginx基础架构)","keywords":["nginx"],"description":"nginx basic architecture","comments":1,"_content":"\n\n## 深入Nginx--Nginx基础架构\n\n\n* 参考材料：《深入理解nginx模块开发与架构设计》 第三部分，深入Nginx-nginx基础架构\n\n# 目录\n <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\">\n\n</div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\">\n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#源码目录结构\">源码目录结构 </a></li>\n<li><a href=\"#nginx的架构设计\">Nginx的架构设计</a><ul>\n<li><a href=\"#优秀的模块化设计\">优秀的模块化设计</a></li>\n<li><a href=\"#事件驱动架构\">事件驱动架构</a></li>\n<li><a href=\"#请求的多阶段异步处理\">请求的多阶段异步处理</a></li>\n<li><a href=\"#管理进程、多工作进程的设计\">管理进程、多工作进程的设计</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div></div>\n\n\n## 源码目录结构 \n```\n.\n├── auto            自动检测系统环境以及编译相关的脚本\n│   ├── cc          关于编译器相关的编译选项的检测脚本\n│   ├── lib         nginx编译所需要的一些库的检测脚本\n│   ├── os          与平台相关的一些系统参数与系统调用相关的检测\n│   └── types       与数据类型相关的一些辅助脚本\n├── conf            存放默认配置文件，在make install后，会拷贝到安装目录中去\n├── contrib         存放一些实用工具，如geo配置生成工具（geo2nginx.pl）\n├── html            存放默认的网页文件，在make install后，会拷贝到安装目录中去\n├── man             nginx的man手册\n└── src             存放nginx的源代码\n    ├── core        nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数\n    ├── event       对系统事件处理机制的封装，以及定时器的实现相关代码\n    │   └── modules 不同事件处理方式的模块化，如select、poll、epoll、kqueue等\n    ├── http        nginx作为http服务器相关的代码\n    │   └── modules 包含http的各种功能模块\n    ├── mail        nginx作为邮件代理服务器相关的代码\n    ├── misc        一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持\n    └── os          主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口\n```\n\n## Nginx的架构设计\n\n### 优秀的模块化设计\n\n高度的模块化设计是nginx的架构基础。在Nginx中，除了少量的核心代码，其它一切皆为模块。特点如下：\n\n**高度抽象的模块接口**\n\n所有的模块都遵循着同样的ngx_module_t接口设计规范，故具备以下特点：\n\n* 良好的简单性\n* 静态可扩展性\n* 可重用性\n\n**模块接口非常简单，具有很高的灵活性**\n\n模块的基本接口nginx_module_t足够简单，只涉及到：\n\n* 模块的初始化\n* 模块的退出\n* 对配置项的处理\n\n这使得其具有足够的灵活性，使得nginx比较简单的实现了动态可修改性，即保持服务正常运行的情况下使系统功能发生改变。\n\n\n```\nstruct ngx_module_s {\n    //分类的模块的索引位置，\n    //nginx 的模块可以分为四种:core,event,http和mail \n    //每个模块都会各自建立索引，ctx_index就是每个模在其所属类组的索引\n    ngx_uint_t            ctx_index;\n    //当前模块在 ngx_modules 里面的索引\n    ngx_uint_t            index;\n\n    //预留成员，目前尚未使用\n    ngx_uint_t            spare0;\n    ngx_uint_t            spare1;\n    ngx_uint_t            spare2;\n    ngx_uint_t            spare3;\n\n    // Nginx模块版本\n    ngx_uint_t            version;\n\n    // 模块上下文，不同种类的模块有不同的上下文，因而实现了四种结构体\n    void                 *ctx;\n    //命令定义地址\n    //模块的指令集，\n    //每一个指令在源码中对应着一个ngx_command_t结构体变量\n    ngx_command_t        *commands;\n    // 模块的种类，用于区分core,event,http和mail \n    ngx_uint_t            type;\n\n    // 初始化master时执行\n    ngx_int_t           (*init_master)(ngx_log_t *log);\n\n    // 初始化module时执行\n    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);\n\n    // 初始化process时执行\n    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);\n    // 初始化thread时执行\n    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);\n    // 退出thread时执行\n    void                (*exit_thread)(ngx_cycle_t *cycle);\n    // 退出process时执行\n    void                (*exit_process)(ngx_cycle_t *cycle);\n        // 退出master时执行\n    void                (*exit_master)(ngx_cycle_t *cycle);\n\n    // 以下预留成员尚未使用\n    uintptr_t             spare_hook0;\n    uintptr_t             spare_hook1;\n    uintptr_t             spare_hook2;\n    uintptr_t             spare_hook3;\n    uintptr_t             spare_hook4;\n    uintptr_t             spare_hook5;\n    uintptr_t             spare_hook6;\n    uintptr_t             spare_hook7;\n};\n  \n```\n\n\n其中ngx_command_t结构如下：\n\n\n```\nstruct ngx_command_s {\n    // 指令名称的字符串，不可以包括空格\n    ngx_str_t             name;\n    // 用于设置指令在配置文件的哪一部分使用是合法的可选值\n    ngx_uint_t            type;\n    // 函数指针，这个函数主要是从配置文件中把该指令的参数(存放在 ngx_conf_t 中)\n    // 转换为合适的数据类型，并将转换后的值保存到模块的配置结构体中\n    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);\n    // 用于指示配置项所处内存的相对偏移位置。对于http模块，conf的设置是必要的。\n    // http在调用指令解析函数时，自动将解析出的配置项写入到http模块代码定义的\n    // 结构体中，在配置项简介中了解到，http模块可能定义3个结构体，分别存储于\n    // main,srv,loc级别的配置项中。（对应于create_main_conf,create_srv_conf,\n    // create_loc_conf方法创建的结构体），而http框架在自动解析时需要知道应把\n    // 解析出的配置项值写入到哪个结构体中。这点需要依赖conf配置的值\n    ngx_uint_t            conf;\n    //表示当前配置项在整个存储配置项的结构体中的偏移位置，以字节为单位。举个例子：\n    //我们通过指令函数回调时，需要通过conf成员找到应该用哪个结构体存放，然后\n    //通过offset成员找到这个结构体中的相应成员，以便存放该配置。\n    ngx_uint_t            offset;\n    // 用来辅助指令回调函数，可以使其更加灵活\n    void                 *post;\n};\n\n```\n\n**配置模块的设计**\n\nNginx的配置模块的类型（ngx_module_s中的type）叫做NGX_CONF_MODULE，它仅有的模块叫做ngx_conf_module,是nginx的最底层模块，它指导着所有模块以配置项为核心来提供功能。因此它是所有模块的基础。配置模块为nginx提供了以下特性：\n\n* 高可配置性\n* 高可扩展性\n* 高可定制性\n* 高可伸缩性\n\n\n**核心模块接口的简单化**\n\n核心模块的类型叫做NGX_CORE_MODULE。目前官方的核心类型模块中共有6个具体模块：\n\n* ngx_core_module\n* ngx_errlog_module\n* ngx_events_module\n* ngx_openssl_module\n* ngx_http_module\n* ngx_mail_module\n\n这些核心模块简化了nginx的设计，使得非模块化的框架代码只关注于如何调用6个核心模块\n\n核心模块的接口定义如下：\n\n```\n typedef struct {\n     //核心模块名称\n     ngx_str_t             name;\n     //解析配置项前，Nginx框架会调用create_conf方法\n     void               *(*create_conf)(ngx_cycle_t *cycle);\n     //解析配置项后，Nginx框架会调用init_conf方法\n     char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);\n } ngx_core_module_t;\n```\n\nngx_module_t接口及其对核心、事件、HTTP、mail等四类模块ctx上下文成员的具体化结构如下：\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/ngx_module_t.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\" />\n\n**多层次、多类别的模块设计**\n\n所有的模块间时分层次、分类别的，官方Nginx共有五大类型的模块：\n\n* 核心模块\n* 配置模块\n* 事件模块\n* HTTP模块\n* mail模块\n\n详细层次结构如下图\n\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_core_module.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\" />\n\n其中\n\n* 配置和核心模块是由Nginx的框架代码定义的，是其它所有模块的基础。\n* 配置模块是所有模块的基础，它实现了最基本的配置项解析功能。\n* Nginx框架会调用核心模块，但是其它三种模块都不会与框架产生关系\n* 事件、HTTP、mail这三种模块的共性是：他们在核心模块中拥有自己的代言人，并在同类模块中有一个作为核心业务与管理功能的模块\n* 事件模块由ngx_event_module定义，但所有事件模块的加载则由ngx_event_core_module负责\n* http模块由ngx_http_module定义，并由它负责加载所有的http模块，而ngx_http_core_module则负责业务的核心逻辑、决定处理具体的请求的具体http模块。mail模块与http类似\n* 事件模块是http模块和mail模块的基础\n\n\n### 事件驱动架构\n事件驱动架构，即由一些事件发生源来产生事件，由一个或多个事件收集器来收集、分发事件，然后许多事件处理器会注册自己感兴趣的事件，同时会消费这个事件。\n\n**传统Web服务器处理事件的简单模型**\n\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/traditional_web_event_ar.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"traditional_web_event_ar.jpg\" width=\"600\" />\n\n**Nginx处理事件的简单模型**\n\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_process_events_ar.jpg?raw=true\" alt=\"nginx_process_events_ar.jpg\" title=\"nginx_process_events_ar.jpg\" width=\"600\" />\n\n传统的Web服务器是每个事件消费独占一个进程资源，Nginx的事件消费者只是被事件分发者进程短期调用而已。\n其中nginx的这种设计优劣如下：\n\n**优点**\n\n* 使得网络的性能、用户感知的请求时延（延时性）都得到了提升\n* 每个用户的请求所产生的事件会及时响应\n* 整个服务器的网络吞吐量会由于事件的及时响应而增大\n\n**缺点**\n\n* 每个事件消费者都不能有阻塞行为，否则将会由于长时间占用事件分发者进程而导致其它事件得不到及时响应\n* 每个消费者不能让进程变为休眠或等待状态，如在等待一个信号量条件的满足时会使进程进入休眠状态\n* 加大了消费事件程序的开发难度\n\n### 请求的多阶段异步处理\n\n请求的多阶段异步处理，即把一个请求的处理过程按照事件的触发方式划分为多个阶段，每个阶段都可以由事件收集、分发器来触发。\n\n另：请求的多阶段异步处理职能基于事件驱动架构实现。\n\n示例：\n\n**处理获取静态文件的HTTP请求时切分的阶段及各阶段的触发事件**\n\n|阶段意义|触发事件|\n|:--|:--|\n|建立TCP连接|接收到TCP中的SYNC包|\n|开始接收用户请求|接收到TCP中的ACK包表示建立连接成功|\n|接收到用户请求并分析已接收的请求是否完整|接收到用户的数据包|\n|接收到完整的用户请求后开始处理用户请求|接收到用户的数据包|\n|由目标静态文件中读取部分内容（避免长期阻塞事件分发者进程）并直接发送给用户|接收到用户的数据包；或者接收到TCP的ACK包表示用户已接收到上次发送的数据包，TCP滑动窗口向前滑动|\n|对于非Keep-alive请求，发送完静态文件后主动关闭连接|接收到TCP中的ACK包表示拥护已接收到之前发送的所有数据包|\n|由于用户关闭连接而结束请求|接收到TCP中的FIN包|\n\n这七个阶段是可以重复发生的，即当一个下载静态资源请求可能会由于请求数据过大、网速不稳定等因素而被划分为成百上千个上述阶段。\n\n**多阶段异步处理的优势如下**\n\n* 配合事件驱动的架构，将会极大地提高网络性能\n* 使得每个进程都能全力运转，不会或者尽量少地出现进程休眠状况。\n* ...\n\n\n**划分请求阶段的原则**\n\n一般是找到请求处理流程中的阻塞方法（或者造成阻塞的代码段），在阻塞代码段上按照下面4种方式来划分阶段\n\n1. 将阻塞进程的方法按照相关的触发事件分为两个阶段：如send调用发送数据给用户时，分为两个阶段：发送且不等待结果阶段、send结果返回阶段\n2. 将阻塞方法调用按照时间分解为多个阶段的方法调用：如读取10MB的文件，分为1000次，每次读取10KB\n3. 在\"无所事事\" 且必须等待的系统的响应，从而导致系统空转时，使用定时器划分阶段。如那些循环检查标志位。。\n4. 如果某个阻塞方法完全无法划分，则必须使用独立的进程执行这个阻塞方法\n\n\n### 管理进程、多工作进程的设计\n\nNginx采用一个master,多个worker工作进程的设计方式，优点如下：\n\n* 利用多核系统的并发处理能力\n* 负载均衡\n* 管理进程会负责监控工作进程的状态，并负责管理其行为\n\n\n","source":"_posts/2015-08-04-nginx-internal-basic-architecture.md","raw":"---\nlayout: post\ntitle: \"Nginx学习笔记(Nginx基础架构)\"\nkeywords: [\"nginx\"]\ndescription: \"nginx basic architecture\"\ncategory: \"nginx\"\ntags: [\"nginx\"]\ncomments: true \n---\n\n\n## 深入Nginx--Nginx基础架构\n\n\n* 参考材料：《深入理解nginx模块开发与架构设计》 第三部分，深入Nginx-nginx基础架构\n\n# 目录\n <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\">\n\n</div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\">\n\n<div><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><a href=\"#源码目录结构\">源码目录结构 </a></li>\n<li><a href=\"#nginx的架构设计\">Nginx的架构设计</a><ul>\n<li><a href=\"#优秀的模块化设计\">优秀的模块化设计</a></li>\n<li><a href=\"#事件驱动架构\">事件驱动架构</a></li>\n<li><a href=\"#请求的多阶段异步处理\">请求的多阶段异步处理</a></li>\n<li><a href=\"#管理进程、多工作进程的设计\">管理进程、多工作进程的设计</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div></div>\n\n\n## 源码目录结构 \n```\n.\n├── auto            自动检测系统环境以及编译相关的脚本\n│   ├── cc          关于编译器相关的编译选项的检测脚本\n│   ├── lib         nginx编译所需要的一些库的检测脚本\n│   ├── os          与平台相关的一些系统参数与系统调用相关的检测\n│   └── types       与数据类型相关的一些辅助脚本\n├── conf            存放默认配置文件，在make install后，会拷贝到安装目录中去\n├── contrib         存放一些实用工具，如geo配置生成工具（geo2nginx.pl）\n├── html            存放默认的网页文件，在make install后，会拷贝到安装目录中去\n├── man             nginx的man手册\n└── src             存放nginx的源代码\n    ├── core        nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数\n    ├── event       对系统事件处理机制的封装，以及定时器的实现相关代码\n    │   └── modules 不同事件处理方式的模块化，如select、poll、epoll、kqueue等\n    ├── http        nginx作为http服务器相关的代码\n    │   └── modules 包含http的各种功能模块\n    ├── mail        nginx作为邮件代理服务器相关的代码\n    ├── misc        一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持\n    └── os          主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口\n```\n\n## Nginx的架构设计\n\n### 优秀的模块化设计\n\n高度的模块化设计是nginx的架构基础。在Nginx中，除了少量的核心代码，其它一切皆为模块。特点如下：\n\n**高度抽象的模块接口**\n\n所有的模块都遵循着同样的ngx_module_t接口设计规范，故具备以下特点：\n\n* 良好的简单性\n* 静态可扩展性\n* 可重用性\n\n**模块接口非常简单，具有很高的灵活性**\n\n模块的基本接口nginx_module_t足够简单，只涉及到：\n\n* 模块的初始化\n* 模块的退出\n* 对配置项的处理\n\n这使得其具有足够的灵活性，使得nginx比较简单的实现了动态可修改性，即保持服务正常运行的情况下使系统功能发生改变。\n\n\n```\nstruct ngx_module_s {\n    //分类的模块的索引位置，\n    //nginx 的模块可以分为四种:core,event,http和mail \n    //每个模块都会各自建立索引，ctx_index就是每个模在其所属类组的索引\n    ngx_uint_t            ctx_index;\n    //当前模块在 ngx_modules 里面的索引\n    ngx_uint_t            index;\n\n    //预留成员，目前尚未使用\n    ngx_uint_t            spare0;\n    ngx_uint_t            spare1;\n    ngx_uint_t            spare2;\n    ngx_uint_t            spare3;\n\n    // Nginx模块版本\n    ngx_uint_t            version;\n\n    // 模块上下文，不同种类的模块有不同的上下文，因而实现了四种结构体\n    void                 *ctx;\n    //命令定义地址\n    //模块的指令集，\n    //每一个指令在源码中对应着一个ngx_command_t结构体变量\n    ngx_command_t        *commands;\n    // 模块的种类，用于区分core,event,http和mail \n    ngx_uint_t            type;\n\n    // 初始化master时执行\n    ngx_int_t           (*init_master)(ngx_log_t *log);\n\n    // 初始化module时执行\n    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);\n\n    // 初始化process时执行\n    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);\n    // 初始化thread时执行\n    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);\n    // 退出thread时执行\n    void                (*exit_thread)(ngx_cycle_t *cycle);\n    // 退出process时执行\n    void                (*exit_process)(ngx_cycle_t *cycle);\n        // 退出master时执行\n    void                (*exit_master)(ngx_cycle_t *cycle);\n\n    // 以下预留成员尚未使用\n    uintptr_t             spare_hook0;\n    uintptr_t             spare_hook1;\n    uintptr_t             spare_hook2;\n    uintptr_t             spare_hook3;\n    uintptr_t             spare_hook4;\n    uintptr_t             spare_hook5;\n    uintptr_t             spare_hook6;\n    uintptr_t             spare_hook7;\n};\n  \n```\n\n\n其中ngx_command_t结构如下：\n\n\n```\nstruct ngx_command_s {\n    // 指令名称的字符串，不可以包括空格\n    ngx_str_t             name;\n    // 用于设置指令在配置文件的哪一部分使用是合法的可选值\n    ngx_uint_t            type;\n    // 函数指针，这个函数主要是从配置文件中把该指令的参数(存放在 ngx_conf_t 中)\n    // 转换为合适的数据类型，并将转换后的值保存到模块的配置结构体中\n    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);\n    // 用于指示配置项所处内存的相对偏移位置。对于http模块，conf的设置是必要的。\n    // http在调用指令解析函数时，自动将解析出的配置项写入到http模块代码定义的\n    // 结构体中，在配置项简介中了解到，http模块可能定义3个结构体，分别存储于\n    // main,srv,loc级别的配置项中。（对应于create_main_conf,create_srv_conf,\n    // create_loc_conf方法创建的结构体），而http框架在自动解析时需要知道应把\n    // 解析出的配置项值写入到哪个结构体中。这点需要依赖conf配置的值\n    ngx_uint_t            conf;\n    //表示当前配置项在整个存储配置项的结构体中的偏移位置，以字节为单位。举个例子：\n    //我们通过指令函数回调时，需要通过conf成员找到应该用哪个结构体存放，然后\n    //通过offset成员找到这个结构体中的相应成员，以便存放该配置。\n    ngx_uint_t            offset;\n    // 用来辅助指令回调函数，可以使其更加灵活\n    void                 *post;\n};\n\n```\n\n**配置模块的设计**\n\nNginx的配置模块的类型（ngx_module_s中的type）叫做NGX_CONF_MODULE，它仅有的模块叫做ngx_conf_module,是nginx的最底层模块，它指导着所有模块以配置项为核心来提供功能。因此它是所有模块的基础。配置模块为nginx提供了以下特性：\n\n* 高可配置性\n* 高可扩展性\n* 高可定制性\n* 高可伸缩性\n\n\n**核心模块接口的简单化**\n\n核心模块的类型叫做NGX_CORE_MODULE。目前官方的核心类型模块中共有6个具体模块：\n\n* ngx_core_module\n* ngx_errlog_module\n* ngx_events_module\n* ngx_openssl_module\n* ngx_http_module\n* ngx_mail_module\n\n这些核心模块简化了nginx的设计，使得非模块化的框架代码只关注于如何调用6个核心模块\n\n核心模块的接口定义如下：\n\n```\n typedef struct {\n     //核心模块名称\n     ngx_str_t             name;\n     //解析配置项前，Nginx框架会调用create_conf方法\n     void               *(*create_conf)(ngx_cycle_t *cycle);\n     //解析配置项后，Nginx框架会调用init_conf方法\n     char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);\n } ngx_core_module_t;\n```\n\nngx_module_t接口及其对核心、事件、HTTP、mail等四类模块ctx上下文成员的具体化结构如下：\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/ngx_module_t.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\" />\n\n**多层次、多类别的模块设计**\n\n所有的模块间时分层次、分类别的，官方Nginx共有五大类型的模块：\n\n* 核心模块\n* 配置模块\n* 事件模块\n* HTTP模块\n* mail模块\n\n详细层次结构如下图\n\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_core_module.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\" />\n\n其中\n\n* 配置和核心模块是由Nginx的框架代码定义的，是其它所有模块的基础。\n* 配置模块是所有模块的基础，它实现了最基本的配置项解析功能。\n* Nginx框架会调用核心模块，但是其它三种模块都不会与框架产生关系\n* 事件、HTTP、mail这三种模块的共性是：他们在核心模块中拥有自己的代言人，并在同类模块中有一个作为核心业务与管理功能的模块\n* 事件模块由ngx_event_module定义，但所有事件模块的加载则由ngx_event_core_module负责\n* http模块由ngx_http_module定义，并由它负责加载所有的http模块，而ngx_http_core_module则负责业务的核心逻辑、决定处理具体的请求的具体http模块。mail模块与http类似\n* 事件模块是http模块和mail模块的基础\n\n\n### 事件驱动架构\n事件驱动架构，即由一些事件发生源来产生事件，由一个或多个事件收集器来收集、分发事件，然后许多事件处理器会注册自己感兴趣的事件，同时会消费这个事件。\n\n**传统Web服务器处理事件的简单模型**\n\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/traditional_web_event_ar.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"traditional_web_event_ar.jpg\" width=\"600\" />\n\n**Nginx处理事件的简单模型**\n\n<img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_process_events_ar.jpg?raw=true\" alt=\"nginx_process_events_ar.jpg\" title=\"nginx_process_events_ar.jpg\" width=\"600\" />\n\n传统的Web服务器是每个事件消费独占一个进程资源，Nginx的事件消费者只是被事件分发者进程短期调用而已。\n其中nginx的这种设计优劣如下：\n\n**优点**\n\n* 使得网络的性能、用户感知的请求时延（延时性）都得到了提升\n* 每个用户的请求所产生的事件会及时响应\n* 整个服务器的网络吞吐量会由于事件的及时响应而增大\n\n**缺点**\n\n* 每个事件消费者都不能有阻塞行为，否则将会由于长时间占用事件分发者进程而导致其它事件得不到及时响应\n* 每个消费者不能让进程变为休眠或等待状态，如在等待一个信号量条件的满足时会使进程进入休眠状态\n* 加大了消费事件程序的开发难度\n\n### 请求的多阶段异步处理\n\n请求的多阶段异步处理，即把一个请求的处理过程按照事件的触发方式划分为多个阶段，每个阶段都可以由事件收集、分发器来触发。\n\n另：请求的多阶段异步处理职能基于事件驱动架构实现。\n\n示例：\n\n**处理获取静态文件的HTTP请求时切分的阶段及各阶段的触发事件**\n\n|阶段意义|触发事件|\n|:--|:--|\n|建立TCP连接|接收到TCP中的SYNC包|\n|开始接收用户请求|接收到TCP中的ACK包表示建立连接成功|\n|接收到用户请求并分析已接收的请求是否完整|接收到用户的数据包|\n|接收到完整的用户请求后开始处理用户请求|接收到用户的数据包|\n|由目标静态文件中读取部分内容（避免长期阻塞事件分发者进程）并直接发送给用户|接收到用户的数据包；或者接收到TCP的ACK包表示用户已接收到上次发送的数据包，TCP滑动窗口向前滑动|\n|对于非Keep-alive请求，发送完静态文件后主动关闭连接|接收到TCP中的ACK包表示拥护已接收到之前发送的所有数据包|\n|由于用户关闭连接而结束请求|接收到TCP中的FIN包|\n\n这七个阶段是可以重复发生的，即当一个下载静态资源请求可能会由于请求数据过大、网速不稳定等因素而被划分为成百上千个上述阶段。\n\n**多阶段异步处理的优势如下**\n\n* 配合事件驱动的架构，将会极大地提高网络性能\n* 使得每个进程都能全力运转，不会或者尽量少地出现进程休眠状况。\n* ...\n\n\n**划分请求阶段的原则**\n\n一般是找到请求处理流程中的阻塞方法（或者造成阻塞的代码段），在阻塞代码段上按照下面4种方式来划分阶段\n\n1. 将阻塞进程的方法按照相关的触发事件分为两个阶段：如send调用发送数据给用户时，分为两个阶段：发送且不等待结果阶段、send结果返回阶段\n2. 将阻塞方法调用按照时间分解为多个阶段的方法调用：如读取10MB的文件，分为1000次，每次读取10KB\n3. 在\"无所事事\" 且必须等待的系统的响应，从而导致系统空转时，使用定时器划分阶段。如那些循环检查标志位。。\n4. 如果某个阻塞方法完全无法划分，则必须使用独立的进程执行这个阻塞方法\n\n\n### 管理进程、多工作进程的设计\n\nNginx采用一个master,多个worker工作进程的设计方式，优点如下：\n\n* 利用多核系统的并发处理能力\n* 负载均衡\n* 管理进程会负责监控工作进程的状态，并负责管理其行为\n\n\n","slug":"2015-08-04-nginx-internal-basic-architecture","published":1,"date":"2016-06-13T02:39:33.000Z","updated":"2016-06-13T02:39:33.000Z","photos":[],"link":"","_id":"cipdewhi1003zqj7ltjufq7ye","content":"<h2 id=\"深入Nginx–Nginx基础架构\"><a href=\"#深入Nginx–Nginx基础架构\" class=\"headerlink\" title=\"深入Nginx–Nginx基础架构\"></a>深入Nginx–Nginx基础架构</h2><ul>\n<li>参考材料：《深入理解nginx模块开发与架构设计》 第三部分，深入Nginx-nginx基础架构</li>\n</ul>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1> <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\"><br><br></div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\"><br><br><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#源码目录结构\">源码目录结构 </a></li><br><li><a href=\"#nginx的架构设计\">Nginx的架构设计</a><ul><br><li><a href=\"#优秀的模块化设计\">优秀的模块化设计</a></li><br><li><a href=\"#事件驱动架构\">事件驱动架构</a></li><br><li><a href=\"#请求的多阶段异步处理\">请求的多阶段异步处理</a></li><br><li><a href=\"#管理进程、多工作进程的设计\">管理进程、多工作进程的设计</a></li><br></ul><br></li><br></ul><br><br><br></div><br></div><br></div></div>\n\n\n<h2 id=\"源码目录结构\"><a href=\"#源码目录结构\" class=\"headerlink\" title=\"源码目录结构\"></a>源码目录结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── auto            自动检测系统环境以及编译相关的脚本</span><br><span class=\"line\">│   ├── cc          关于编译器相关的编译选项的检测脚本</span><br><span class=\"line\">│   ├── lib         nginx编译所需要的一些库的检测脚本</span><br><span class=\"line\">│   ├── os          与平台相关的一些系统参数与系统调用相关的检测</span><br><span class=\"line\">│   └── types       与数据类型相关的一些辅助脚本</span><br><span class=\"line\">├── conf            存放默认配置文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── contrib         存放一些实用工具，如geo配置生成工具（geo2nginx.pl）</span><br><span class=\"line\">├── html            存放默认的网页文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── man             nginx的man手册</span><br><span class=\"line\">└── src             存放nginx的源代码</span><br><span class=\"line\">    ├── core        nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数</span><br><span class=\"line\">    ├── event       对系统事件处理机制的封装，以及定时器的实现相关代码</span><br><span class=\"line\">    │   └── modules 不同事件处理方式的模块化，如select、poll、epoll、kqueue等</span><br><span class=\"line\">    ├── http        nginx作为http服务器相关的代码</span><br><span class=\"line\">    │   └── modules 包含http的各种功能模块</span><br><span class=\"line\">    ├── mail        nginx作为邮件代理服务器相关的代码</span><br><span class=\"line\">    ├── misc        一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持</span><br><span class=\"line\">    └── os          主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx的架构设计\"><a href=\"#Nginx的架构设计\" class=\"headerlink\" title=\"Nginx的架构设计\"></a>Nginx的架构设计</h2><h3 id=\"优秀的模块化设计\"><a href=\"#优秀的模块化设计\" class=\"headerlink\" title=\"优秀的模块化设计\"></a>优秀的模块化设计</h3><p>高度的模块化设计是nginx的架构基础。在Nginx中，除了少量的核心代码，其它一切皆为模块。特点如下：</p>\n<p><strong>高度抽象的模块接口</strong></p>\n<p>所有的模块都遵循着同样的ngx_module_t接口设计规范，故具备以下特点：</p>\n<ul>\n<li>良好的简单性</li>\n<li>静态可扩展性</li>\n<li>可重用性</li>\n</ul>\n<p><strong>模块接口非常简单，具有很高的灵活性</strong></p>\n<p>模块的基本接口nginx_module_t足够简单，只涉及到：</p>\n<ul>\n<li>模块的初始化</li>\n<li>模块的退出</li>\n<li>对配置项的处理</li>\n</ul>\n<p>这使得其具有足够的灵活性，使得nginx比较简单的实现了动态可修改性，即保持服务正常运行的情况下使系统功能发生改变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct ngx_module_s &#123;</span><br><span class=\"line\">    //分类的模块的索引位置，</span><br><span class=\"line\">    //nginx 的模块可以分为四种:core,event,http和mail </span><br><span class=\"line\">    //每个模块都会各自建立索引，ctx_index就是每个模在其所属类组的索引</span><br><span class=\"line\">    ngx_uint_t            ctx_index;</span><br><span class=\"line\">    //当前模块在 ngx_modules 里面的索引</span><br><span class=\"line\">    ngx_uint_t            index;</span><br><span class=\"line\"></span><br><span class=\"line\">    //预留成员，目前尚未使用</span><br><span class=\"line\">    ngx_uint_t            spare0;</span><br><span class=\"line\">    ngx_uint_t            spare1;</span><br><span class=\"line\">    ngx_uint_t            spare2;</span><br><span class=\"line\">    ngx_uint_t            spare3;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Nginx模块版本</span><br><span class=\"line\">    ngx_uint_t            version;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 模块上下文，不同种类的模块有不同的上下文，因而实现了四种结构体</span><br><span class=\"line\">    void                 *ctx;</span><br><span class=\"line\">    //命令定义地址</span><br><span class=\"line\">    //模块的指令集，</span><br><span class=\"line\">    //每一个指令在源码中对应着一个ngx_command_t结构体变量</span><br><span class=\"line\">    ngx_command_t        *commands;</span><br><span class=\"line\">    // 模块的种类，用于区分core,event,http和mail </span><br><span class=\"line\">    ngx_uint_t            type;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化master时执行</span><br><span class=\"line\">    ngx_int_t           (*init_master)(ngx_log_t *log);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化module时执行</span><br><span class=\"line\">    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化process时执行</span><br><span class=\"line\">    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    // 初始化thread时执行</span><br><span class=\"line\">    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    // 退出thread时执行</span><br><span class=\"line\">    void                (*exit_thread)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    // 退出process时执行</span><br><span class=\"line\">    void                (*exit_process)(ngx_cycle_t *cycle);</span><br><span class=\"line\">        // 退出master时执行</span><br><span class=\"line\">    void                (*exit_master)(ngx_cycle_t *cycle);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 以下预留成员尚未使用</span><br><span class=\"line\">    uintptr_t             spare_hook0;</span><br><span class=\"line\">    uintptr_t             spare_hook1;</span><br><span class=\"line\">    uintptr_t             spare_hook2;</span><br><span class=\"line\">    uintptr_t             spare_hook3;</span><br><span class=\"line\">    uintptr_t             spare_hook4;</span><br><span class=\"line\">    uintptr_t             spare_hook5;</span><br><span class=\"line\">    uintptr_t             spare_hook6;</span><br><span class=\"line\">    uintptr_t             spare_hook7;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中ngx_command_t结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct ngx_command_s &#123;</span><br><span class=\"line\">    // 指令名称的字符串，不可以包括空格</span><br><span class=\"line\">    ngx_str_t             name;</span><br><span class=\"line\">    // 用于设置指令在配置文件的哪一部分使用是合法的可选值</span><br><span class=\"line\">    ngx_uint_t            type;</span><br><span class=\"line\">    // 函数指针，这个函数主要是从配置文件中把该指令的参数(存放在 ngx_conf_t 中)</span><br><span class=\"line\">    // 转换为合适的数据类型，并将转换后的值保存到模块的配置结构体中</span><br><span class=\"line\">    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);</span><br><span class=\"line\">    // 用于指示配置项所处内存的相对偏移位置。对于http模块，conf的设置是必要的。</span><br><span class=\"line\">    // http在调用指令解析函数时，自动将解析出的配置项写入到http模块代码定义的</span><br><span class=\"line\">    // 结构体中，在配置项简介中了解到，http模块可能定义3个结构体，分别存储于</span><br><span class=\"line\">    // main,srv,loc级别的配置项中。（对应于create_main_conf,create_srv_conf,</span><br><span class=\"line\">    // create_loc_conf方法创建的结构体），而http框架在自动解析时需要知道应把</span><br><span class=\"line\">    // 解析出的配置项值写入到哪个结构体中。这点需要依赖conf配置的值</span><br><span class=\"line\">    ngx_uint_t            conf;</span><br><span class=\"line\">    //表示当前配置项在整个存储配置项的结构体中的偏移位置，以字节为单位。举个例子：</span><br><span class=\"line\">    //我们通过指令函数回调时，需要通过conf成员找到应该用哪个结构体存放，然后</span><br><span class=\"line\">    //通过offset成员找到这个结构体中的相应成员，以便存放该配置。</span><br><span class=\"line\">    ngx_uint_t            offset;</span><br><span class=\"line\">    // 用来辅助指令回调函数，可以使其更加灵活</span><br><span class=\"line\">    void                 *post;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>配置模块的设计</strong></p>\n<p>Nginx的配置模块的类型（ngx_module_s中的type）叫做NGX_CONF_MODULE，它仅有的模块叫做ngx_conf_module,是nginx的最底层模块，它指导着所有模块以配置项为核心来提供功能。因此它是所有模块的基础。配置模块为nginx提供了以下特性：</p>\n<ul>\n<li>高可配置性</li>\n<li>高可扩展性</li>\n<li>高可定制性</li>\n<li>高可伸缩性</li>\n</ul>\n<p><strong>核心模块接口的简单化</strong></p>\n<p>核心模块的类型叫做NGX_CORE_MODULE。目前官方的核心类型模块中共有6个具体模块：</p>\n<ul>\n<li>ngx_core_module</li>\n<li>ngx_errlog_module</li>\n<li>ngx_events_module</li>\n<li>ngx_openssl_module</li>\n<li>ngx_http_module</li>\n<li>ngx_mail_module</li>\n</ul>\n<p>这些核心模块简化了nginx的设计，使得非模块化的框架代码只关注于如何调用6个核心模块</p>\n<p>核心模块的接口定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    //核心模块名称</span><br><span class=\"line\">    ngx_str_t             name;</span><br><span class=\"line\">    //解析配置项前，Nginx框架会调用create_conf方法</span><br><span class=\"line\">    void               *(*create_conf)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    //解析配置项后，Nginx框架会调用init_conf方法</span><br><span class=\"line\">    char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);</span><br><span class=\"line\">&#125; ngx_core_module_t;</span><br></pre></td></tr></table></figure>\n<p>ngx_module_t接口及其对核心、事件、HTTP、mail等四类模块ctx上下文成员的具体化结构如下：<br><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/ngx_module_t.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\"></p>\n<p><strong>多层次、多类别的模块设计</strong></p>\n<p>所有的模块间时分层次、分类别的，官方Nginx共有五大类型的模块：</p>\n<ul>\n<li>核心模块</li>\n<li>配置模块</li>\n<li>事件模块</li>\n<li>HTTP模块</li>\n<li>mail模块</li>\n</ul>\n<p>详细层次结构如下图</p>\n<p><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_core_module.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\"></p>\n<p>其中</p>\n<ul>\n<li>配置和核心模块是由Nginx的框架代码定义的，是其它所有模块的基础。</li>\n<li>配置模块是所有模块的基础，它实现了最基本的配置项解析功能。</li>\n<li>Nginx框架会调用核心模块，但是其它三种模块都不会与框架产生关系</li>\n<li>事件、HTTP、mail这三种模块的共性是：他们在核心模块中拥有自己的代言人，并在同类模块中有一个作为核心业务与管理功能的模块</li>\n<li>事件模块由ngx_event_module定义，但所有事件模块的加载则由ngx_event_core_module负责</li>\n<li>http模块由ngx_http_module定义，并由它负责加载所有的http模块，而ngx_http_core_module则负责业务的核心逻辑、决定处理具体的请求的具体http模块。mail模块与http类似</li>\n<li>事件模块是http模块和mail模块的基础</li>\n</ul>\n<h3 id=\"事件驱动架构\"><a href=\"#事件驱动架构\" class=\"headerlink\" title=\"事件驱动架构\"></a>事件驱动架构</h3><p>事件驱动架构，即由一些事件发生源来产生事件，由一个或多个事件收集器来收集、分发事件，然后许多事件处理器会注册自己感兴趣的事件，同时会消费这个事件。</p>\n<p><strong>传统Web服务器处理事件的简单模型</strong></p>\n<p><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/traditional_web_event_ar.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"traditional_web_event_ar.jpg\" width=\"600\"></p>\n<p><strong>Nginx处理事件的简单模型</strong></p>\n<p><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_process_events_ar.jpg?raw=true\" alt=\"nginx_process_events_ar.jpg\" title=\"nginx_process_events_ar.jpg\" width=\"600\"></p>\n<p>传统的Web服务器是每个事件消费独占一个进程资源，Nginx的事件消费者只是被事件分发者进程短期调用而已。<br>其中nginx的这种设计优劣如下：</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>使得网络的性能、用户感知的请求时延（延时性）都得到了提升</li>\n<li>每个用户的请求所产生的事件会及时响应</li>\n<li>整个服务器的网络吞吐量会由于事件的及时响应而增大</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>每个事件消费者都不能有阻塞行为，否则将会由于长时间占用事件分发者进程而导致其它事件得不到及时响应</li>\n<li>每个消费者不能让进程变为休眠或等待状态，如在等待一个信号量条件的满足时会使进程进入休眠状态</li>\n<li>加大了消费事件程序的开发难度</li>\n</ul>\n<h3 id=\"请求的多阶段异步处理\"><a href=\"#请求的多阶段异步处理\" class=\"headerlink\" title=\"请求的多阶段异步处理\"></a>请求的多阶段异步处理</h3><p>请求的多阶段异步处理，即把一个请求的处理过程按照事件的触发方式划分为多个阶段，每个阶段都可以由事件收集、分发器来触发。</p>\n<p>另：请求的多阶段异步处理职能基于事件驱动架构实现。</p>\n<p>示例：</p>\n<p><strong>处理获取静态文件的HTTP请求时切分的阶段及各阶段的触发事件</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">阶段意义</th>\n<th style=\"text-align:left\">触发事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">建立TCP连接</td>\n<td style=\"text-align:left\">接收到TCP中的SYNC包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">开始接收用户请求</td>\n<td style=\"text-align:left\">接收到TCP中的ACK包表示建立连接成功</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">接收到用户请求并分析已接收的请求是否完整</td>\n<td style=\"text-align:left\">接收到用户的数据包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">接收到完整的用户请求后开始处理用户请求</td>\n<td style=\"text-align:left\">接收到用户的数据包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">由目标静态文件中读取部分内容（避免长期阻塞事件分发者进程）并直接发送给用户</td>\n<td style=\"text-align:left\">接收到用户的数据包；或者接收到TCP的ACK包表示用户已接收到上次发送的数据包，TCP滑动窗口向前滑动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">对于非Keep-alive请求，发送完静态文件后主动关闭连接</td>\n<td style=\"text-align:left\">接收到TCP中的ACK包表示拥护已接收到之前发送的所有数据包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">由于用户关闭连接而结束请求</td>\n<td style=\"text-align:left\">接收到TCP中的FIN包</td>\n</tr>\n</tbody>\n</table>\n<p>这七个阶段是可以重复发生的，即当一个下载静态资源请求可能会由于请求数据过大、网速不稳定等因素而被划分为成百上千个上述阶段。</p>\n<p><strong>多阶段异步处理的优势如下</strong></p>\n<ul>\n<li>配合事件驱动的架构，将会极大地提高网络性能</li>\n<li>使得每个进程都能全力运转，不会或者尽量少地出现进程休眠状况。</li>\n<li>…</li>\n</ul>\n<p><strong>划分请求阶段的原则</strong></p>\n<p>一般是找到请求处理流程中的阻塞方法（或者造成阻塞的代码段），在阻塞代码段上按照下面4种方式来划分阶段</p>\n<ol>\n<li>将阻塞进程的方法按照相关的触发事件分为两个阶段：如send调用发送数据给用户时，分为两个阶段：发送且不等待结果阶段、send结果返回阶段</li>\n<li>将阻塞方法调用按照时间分解为多个阶段的方法调用：如读取10MB的文件，分为1000次，每次读取10KB</li>\n<li>在”无所事事” 且必须等待的系统的响应，从而导致系统空转时，使用定时器划分阶段。如那些循环检查标志位。。</li>\n<li>如果某个阻塞方法完全无法划分，则必须使用独立的进程执行这个阻塞方法</li>\n</ol>\n<h3 id=\"管理进程、多工作进程的设计\"><a href=\"#管理进程、多工作进程的设计\" class=\"headerlink\" title=\"管理进程、多工作进程的设计\"></a>管理进程、多工作进程的设计</h3><p>Nginx采用一个master,多个worker工作进程的设计方式，优点如下：</p>\n<ul>\n<li>利用多核系统的并发处理能力</li>\n<li>负载均衡</li>\n<li>管理进程会负责监控工作进程的状态，并负责管理其行为</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"深入Nginx–Nginx基础架构\"><a href=\"#深入Nginx–Nginx基础架构\" class=\"headerlink\" title=\"深入Nginx–Nginx基础架构\"></a>深入Nginx–Nginx基础架构</h2><ul>\n<li>参考材料：《深入理解nginx模块开发与架构设计》 第三部分，深入Nginx-nginx基础架构</li>\n</ul>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1> <div id=\"wmd-preview-section-24\" class=\"wmd-preview-section preview-content\"><br><br></div><div id=\"wmd-preview-section-11400\" class=\"wmd-preview-section preview-content\"><br><br><div><div class=\"toc\"><div class=\"toc\"><br><ul><br><li><a href=\"#源码目录结构\">源码目录结构 </a></li><br><li><a href=\"#nginx的架构设计\">Nginx的架构设计</a><ul><br><li><a href=\"#优秀的模块化设计\">优秀的模块化设计</a></li><br><li><a href=\"#事件驱动架构\">事件驱动架构</a></li><br><li><a href=\"#请求的多阶段异步处理\">请求的多阶段异步处理</a></li><br><li><a href=\"#管理进程、多工作进程的设计\">管理进程、多工作进程的设计</a></li><br></ul><br></li><br></ul><br></li><br></ul><br></div><br></div><br></div></div>\n\n\n<h2 id=\"源码目录结构\"><a href=\"#源码目录结构\" class=\"headerlink\" title=\"源码目录结构\"></a>源码目录结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── auto            自动检测系统环境以及编译相关的脚本</span><br><span class=\"line\">│   ├── cc          关于编译器相关的编译选项的检测脚本</span><br><span class=\"line\">│   ├── lib         nginx编译所需要的一些库的检测脚本</span><br><span class=\"line\">│   ├── os          与平台相关的一些系统参数与系统调用相关的检测</span><br><span class=\"line\">│   └── types       与数据类型相关的一些辅助脚本</span><br><span class=\"line\">├── conf            存放默认配置文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── contrib         存放一些实用工具，如geo配置生成工具（geo2nginx.pl）</span><br><span class=\"line\">├── html            存放默认的网页文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── man             nginx的man手册</span><br><span class=\"line\">└── src             存放nginx的源代码</span><br><span class=\"line\">    ├── core        nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数</span><br><span class=\"line\">    ├── event       对系统事件处理机制的封装，以及定时器的实现相关代码</span><br><span class=\"line\">    │   └── modules 不同事件处理方式的模块化，如select、poll、epoll、kqueue等</span><br><span class=\"line\">    ├── http        nginx作为http服务器相关的代码</span><br><span class=\"line\">    │   └── modules 包含http的各种功能模块</span><br><span class=\"line\">    ├── mail        nginx作为邮件代理服务器相关的代码</span><br><span class=\"line\">    ├── misc        一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持</span><br><span class=\"line\">    └── os          主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx的架构设计\"><a href=\"#Nginx的架构设计\" class=\"headerlink\" title=\"Nginx的架构设计\"></a>Nginx的架构设计</h2><h3 id=\"优秀的模块化设计\"><a href=\"#优秀的模块化设计\" class=\"headerlink\" title=\"优秀的模块化设计\"></a>优秀的模块化设计</h3><p>高度的模块化设计是nginx的架构基础。在Nginx中，除了少量的核心代码，其它一切皆为模块。特点如下：</p>\n<p><strong>高度抽象的模块接口</strong></p>\n<p>所有的模块都遵循着同样的ngx_module_t接口设计规范，故具备以下特点：</p>\n<ul>\n<li>良好的简单性</li>\n<li>静态可扩展性</li>\n<li>可重用性</li>\n</ul>\n<p><strong>模块接口非常简单，具有很高的灵活性</strong></p>\n<p>模块的基本接口nginx_module_t足够简单，只涉及到：</p>\n<ul>\n<li>模块的初始化</li>\n<li>模块的退出</li>\n<li>对配置项的处理</li>\n</ul>\n<p>这使得其具有足够的灵活性，使得nginx比较简单的实现了动态可修改性，即保持服务正常运行的情况下使系统功能发生改变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct ngx_module_s &#123;</span><br><span class=\"line\">    //分类的模块的索引位置，</span><br><span class=\"line\">    //nginx 的模块可以分为四种:core,event,http和mail </span><br><span class=\"line\">    //每个模块都会各自建立索引，ctx_index就是每个模在其所属类组的索引</span><br><span class=\"line\">    ngx_uint_t            ctx_index;</span><br><span class=\"line\">    //当前模块在 ngx_modules 里面的索引</span><br><span class=\"line\">    ngx_uint_t            index;</span><br><span class=\"line\"></span><br><span class=\"line\">    //预留成员，目前尚未使用</span><br><span class=\"line\">    ngx_uint_t            spare0;</span><br><span class=\"line\">    ngx_uint_t            spare1;</span><br><span class=\"line\">    ngx_uint_t            spare2;</span><br><span class=\"line\">    ngx_uint_t            spare3;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Nginx模块版本</span><br><span class=\"line\">    ngx_uint_t            version;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 模块上下文，不同种类的模块有不同的上下文，因而实现了四种结构体</span><br><span class=\"line\">    void                 *ctx;</span><br><span class=\"line\">    //命令定义地址</span><br><span class=\"line\">    //模块的指令集，</span><br><span class=\"line\">    //每一个指令在源码中对应着一个ngx_command_t结构体变量</span><br><span class=\"line\">    ngx_command_t        *commands;</span><br><span class=\"line\">    // 模块的种类，用于区分core,event,http和mail </span><br><span class=\"line\">    ngx_uint_t            type;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化master时执行</span><br><span class=\"line\">    ngx_int_t           (*init_master)(ngx_log_t *log);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化module时执行</span><br><span class=\"line\">    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化process时执行</span><br><span class=\"line\">    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    // 初始化thread时执行</span><br><span class=\"line\">    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    // 退出thread时执行</span><br><span class=\"line\">    void                (*exit_thread)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    // 退出process时执行</span><br><span class=\"line\">    void                (*exit_process)(ngx_cycle_t *cycle);</span><br><span class=\"line\">        // 退出master时执行</span><br><span class=\"line\">    void                (*exit_master)(ngx_cycle_t *cycle);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 以下预留成员尚未使用</span><br><span class=\"line\">    uintptr_t             spare_hook0;</span><br><span class=\"line\">    uintptr_t             spare_hook1;</span><br><span class=\"line\">    uintptr_t             spare_hook2;</span><br><span class=\"line\">    uintptr_t             spare_hook3;</span><br><span class=\"line\">    uintptr_t             spare_hook4;</span><br><span class=\"line\">    uintptr_t             spare_hook5;</span><br><span class=\"line\">    uintptr_t             spare_hook6;</span><br><span class=\"line\">    uintptr_t             spare_hook7;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中ngx_command_t结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct ngx_command_s &#123;</span><br><span class=\"line\">    // 指令名称的字符串，不可以包括空格</span><br><span class=\"line\">    ngx_str_t             name;</span><br><span class=\"line\">    // 用于设置指令在配置文件的哪一部分使用是合法的可选值</span><br><span class=\"line\">    ngx_uint_t            type;</span><br><span class=\"line\">    // 函数指针，这个函数主要是从配置文件中把该指令的参数(存放在 ngx_conf_t 中)</span><br><span class=\"line\">    // 转换为合适的数据类型，并将转换后的值保存到模块的配置结构体中</span><br><span class=\"line\">    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);</span><br><span class=\"line\">    // 用于指示配置项所处内存的相对偏移位置。对于http模块，conf的设置是必要的。</span><br><span class=\"line\">    // http在调用指令解析函数时，自动将解析出的配置项写入到http模块代码定义的</span><br><span class=\"line\">    // 结构体中，在配置项简介中了解到，http模块可能定义3个结构体，分别存储于</span><br><span class=\"line\">    // main,srv,loc级别的配置项中。（对应于create_main_conf,create_srv_conf,</span><br><span class=\"line\">    // create_loc_conf方法创建的结构体），而http框架在自动解析时需要知道应把</span><br><span class=\"line\">    // 解析出的配置项值写入到哪个结构体中。这点需要依赖conf配置的值</span><br><span class=\"line\">    ngx_uint_t            conf;</span><br><span class=\"line\">    //表示当前配置项在整个存储配置项的结构体中的偏移位置，以字节为单位。举个例子：</span><br><span class=\"line\">    //我们通过指令函数回调时，需要通过conf成员找到应该用哪个结构体存放，然后</span><br><span class=\"line\">    //通过offset成员找到这个结构体中的相应成员，以便存放该配置。</span><br><span class=\"line\">    ngx_uint_t            offset;</span><br><span class=\"line\">    // 用来辅助指令回调函数，可以使其更加灵活</span><br><span class=\"line\">    void                 *post;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>配置模块的设计</strong></p>\n<p>Nginx的配置模块的类型（ngx_module_s中的type）叫做NGX_CONF_MODULE，它仅有的模块叫做ngx_conf_module,是nginx的最底层模块，它指导着所有模块以配置项为核心来提供功能。因此它是所有模块的基础。配置模块为nginx提供了以下特性：</p>\n<ul>\n<li>高可配置性</li>\n<li>高可扩展性</li>\n<li>高可定制性</li>\n<li>高可伸缩性</li>\n</ul>\n<p><strong>核心模块接口的简单化</strong></p>\n<p>核心模块的类型叫做NGX_CORE_MODULE。目前官方的核心类型模块中共有6个具体模块：</p>\n<ul>\n<li>ngx_core_module</li>\n<li>ngx_errlog_module</li>\n<li>ngx_events_module</li>\n<li>ngx_openssl_module</li>\n<li>ngx_http_module</li>\n<li>ngx_mail_module</li>\n</ul>\n<p>这些核心模块简化了nginx的设计，使得非模块化的框架代码只关注于如何调用6个核心模块</p>\n<p>核心模块的接口定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    //核心模块名称</span><br><span class=\"line\">    ngx_str_t             name;</span><br><span class=\"line\">    //解析配置项前，Nginx框架会调用create_conf方法</span><br><span class=\"line\">    void               *(*create_conf)(ngx_cycle_t *cycle);</span><br><span class=\"line\">    //解析配置项后，Nginx框架会调用init_conf方法</span><br><span class=\"line\">    char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);</span><br><span class=\"line\">&#125; ngx_core_module_t;</span><br></pre></td></tr></table></figure>\n<p>ngx_module_t接口及其对核心、事件、HTTP、mail等四类模块ctx上下文成员的具体化结构如下：<br><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/ngx_module_t.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\" /></p>\n<p><strong>多层次、多类别的模块设计</strong></p>\n<p>所有的模块间时分层次、分类别的，官方Nginx共有五大类型的模块：</p>\n<ul>\n<li>核心模块</li>\n<li>配置模块</li>\n<li>事件模块</li>\n<li>HTTP模块</li>\n<li>mail模块</li>\n</ul>\n<p>详细层次结构如下图</p>\n<p><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_core_module.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"ngx_module_t.jpg\" width=\"600\" /></p>\n<p>其中</p>\n<ul>\n<li>配置和核心模块是由Nginx的框架代码定义的，是其它所有模块的基础。</li>\n<li>配置模块是所有模块的基础，它实现了最基本的配置项解析功能。</li>\n<li>Nginx框架会调用核心模块，但是其它三种模块都不会与框架产生关系</li>\n<li>事件、HTTP、mail这三种模块的共性是：他们在核心模块中拥有自己的代言人，并在同类模块中有一个作为核心业务与管理功能的模块</li>\n<li>事件模块由ngx_event_module定义，但所有事件模块的加载则由ngx_event_core_module负责</li>\n<li>http模块由ngx_http_module定义，并由它负责加载所有的http模块，而ngx_http_core_module则负责业务的核心逻辑、决定处理具体的请求的具体http模块。mail模块与http类似</li>\n<li>事件模块是http模块和mail模块的基础</li>\n</ul>\n<h3 id=\"事件驱动架构\"><a href=\"#事件驱动架构\" class=\"headerlink\" title=\"事件驱动架构\"></a>事件驱动架构</h3><p>事件驱动架构，即由一些事件发生源来产生事件，由一个或多个事件收集器来收集、分发事件，然后许多事件处理器会注册自己感兴趣的事件，同时会消费这个事件。</p>\n<p><strong>传统Web服务器处理事件的简单模型</strong></p>\n<p><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/traditional_web_event_ar.jpg?raw=true\" alt=\"ngx_module_t.jpg\" title=\"traditional_web_event_ar.jpg\" width=\"600\" /></p>\n<p><strong>Nginx处理事件的简单模型</strong></p>\n<p><img src=\"https://github.com/AndreMouche/AndreMouche.github.io/blob/master/images/nginx/nginx_process_events_ar.jpg?raw=true\" alt=\"nginx_process_events_ar.jpg\" title=\"nginx_process_events_ar.jpg\" width=\"600\" /></p>\n<p>传统的Web服务器是每个事件消费独占一个进程资源，Nginx的事件消费者只是被事件分发者进程短期调用而已。<br>其中nginx的这种设计优劣如下：</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>使得网络的性能、用户感知的请求时延（延时性）都得到了提升</li>\n<li>每个用户的请求所产生的事件会及时响应</li>\n<li>整个服务器的网络吞吐量会由于事件的及时响应而增大</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>每个事件消费者都不能有阻塞行为，否则将会由于长时间占用事件分发者进程而导致其它事件得不到及时响应</li>\n<li>每个消费者不能让进程变为休眠或等待状态，如在等待一个信号量条件的满足时会使进程进入休眠状态</li>\n<li>加大了消费事件程序的开发难度</li>\n</ul>\n<h3 id=\"请求的多阶段异步处理\"><a href=\"#请求的多阶段异步处理\" class=\"headerlink\" title=\"请求的多阶段异步处理\"></a>请求的多阶段异步处理</h3><p>请求的多阶段异步处理，即把一个请求的处理过程按照事件的触发方式划分为多个阶段，每个阶段都可以由事件收集、分发器来触发。</p>\n<p>另：请求的多阶段异步处理职能基于事件驱动架构实现。</p>\n<p>示例：</p>\n<p><strong>处理获取静态文件的HTTP请求时切分的阶段及各阶段的触发事件</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">阶段意义</th>\n<th style=\"text-align:left\">触发事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">建立TCP连接</td>\n<td style=\"text-align:left\">接收到TCP中的SYNC包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">开始接收用户请求</td>\n<td style=\"text-align:left\">接收到TCP中的ACK包表示建立连接成功</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">接收到用户请求并分析已接收的请求是否完整</td>\n<td style=\"text-align:left\">接收到用户的数据包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">接收到完整的用户请求后开始处理用户请求</td>\n<td style=\"text-align:left\">接收到用户的数据包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">由目标静态文件中读取部分内容（避免长期阻塞事件分发者进程）并直接发送给用户</td>\n<td style=\"text-align:left\">接收到用户的数据包；或者接收到TCP的ACK包表示用户已接收到上次发送的数据包，TCP滑动窗口向前滑动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">对于非Keep-alive请求，发送完静态文件后主动关闭连接</td>\n<td style=\"text-align:left\">接收到TCP中的ACK包表示拥护已接收到之前发送的所有数据包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">由于用户关闭连接而结束请求</td>\n<td style=\"text-align:left\">接收到TCP中的FIN包</td>\n</tr>\n</tbody>\n</table>\n<p>这七个阶段是可以重复发生的，即当一个下载静态资源请求可能会由于请求数据过大、网速不稳定等因素而被划分为成百上千个上述阶段。</p>\n<p><strong>多阶段异步处理的优势如下</strong></p>\n<ul>\n<li>配合事件驱动的架构，将会极大地提高网络性能</li>\n<li>使得每个进程都能全力运转，不会或者尽量少地出现进程休眠状况。</li>\n<li>…</li>\n</ul>\n<p><strong>划分请求阶段的原则</strong></p>\n<p>一般是找到请求处理流程中的阻塞方法（或者造成阻塞的代码段），在阻塞代码段上按照下面4种方式来划分阶段</p>\n<ol>\n<li>将阻塞进程的方法按照相关的触发事件分为两个阶段：如send调用发送数据给用户时，分为两个阶段：发送且不等待结果阶段、send结果返回阶段</li>\n<li>将阻塞方法调用按照时间分解为多个阶段的方法调用：如读取10MB的文件，分为1000次，每次读取10KB</li>\n<li>在”无所事事” 且必须等待的系统的响应，从而导致系统空转时，使用定时器划分阶段。如那些循环检查标志位。。</li>\n<li>如果某个阻塞方法完全无法划分，则必须使用独立的进程执行这个阻塞方法</li>\n</ol>\n<h3 id=\"管理进程、多工作进程的设计\"><a href=\"#管理进程、多工作进程的设计\" class=\"headerlink\" title=\"管理进程、多工作进程的设计\"></a>管理进程、多工作进程的设计</h3><p>Nginx采用一个master,多个worker工作进程的设计方式，优点如下：</p>\n<ul>\n<li>利用多核系统的并发处理能力</li>\n<li>负载均衡</li>\n<li>管理进程会负责监控工作进程的状态，并负责管理其行为</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cipdewhfu0005qj7ljntiugw2","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhg3000cqj7lfrn5ls5d"},{"post_id":"cipdewhfi0000qj7l57ceiwq3","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhg8000hqj7lzrtqnlj0"},{"post_id":"cipdewhfw0007qj7lmj668w7p","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhga000kqj7lvi5lwmxh"},{"post_id":"cipdewhg1000aqj7llf9b8oav","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgb000oqj7lg3uuwj99"},{"post_id":"cipdewhfn0001qj7lpql7frpx","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgg000rqj7lsm9pfisc"},{"post_id":"cipdewhg3000eqj7lca5270c7","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgh000vqj7liolm2xeh"},{"post_id":"cipdewhg8000iqj7lzpsm13yi","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgj000xqj7lh0y68z6a"},{"post_id":"cipdewhft0004qj7ly8n8nmri","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgm0011qj7lg387wvfr"},{"post_id":"cipdewhga000mqj7l7qkbn4wx","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgn0014qj7l64xu7z82"},{"post_id":"cipdewhgc000pqj7laxu511lg","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgq0018qj7l7vv0a2hm"},{"post_id":"cipdewhgg000sqj7lo2aea05r","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgs001bqj7lokbskhm1"},{"post_id":"cipdewhgi000wqj7lzw4ldfnv","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgu001fqj7le7iz4ewc"},{"post_id":"cipdewhgj000yqj7lo5yv36mw","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgw001iqj7lgmxejj72"},{"post_id":"cipdewhgm0012qj7ls3f5p7we","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgy001mqj7ltqe33afo"},{"post_id":"cipdewhgn0015qj7lonzq37ne","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhgz001qqj7l8gcw5dgp"},{"post_id":"cipdewhgr0019qj7lwhd8hn33","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhh0001uqj7lnuhpjk3i"},{"post_id":"cipdewhgt001cqj7l1haxl7bi","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhh2001xqj7l4unyrqlr"},{"post_id":"cipdewhgv001gqj7lgjsb5rv9","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhh40021qj7l6bmxtbvb"},{"post_id":"cipdewhgw001jqj7ltqsfmjut","category_id":"cipdewhgz001pqj7ltivh6ha0","_id":"cipdewhh50025qj7lonlgp7rx"},{"post_id":"cipdewhgy001nqj7l3ttv5d01","category_id":"cipdewhh3001zqj7ltwejw6op","_id":"cipdewhha002dqj7lp13jwbf4"},{"post_id":"cipdewhgz001rqj7lsrt99zgh","category_id":"cipdewhh60027qj7lzm0enevw","_id":"cipdewhhd002kqj7lxqr9kkww"},{"post_id":"cipdewhh8002cqj7ltiq91an7","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhhg002pqj7la8m5ao26"},{"post_id":"cipdewhhb002gqj7lr6prf324","category_id":"cipdewhha002eqj7loh6qd1lc","_id":"cipdewhhh002sqj7l6c99cyzg"},{"post_id":"cipdewhh0001vqj7lfg6gskeb","category_id":"cipdewhha002eqj7loh6qd1lc","_id":"cipdewhhl002wqj7lppmqx37k"},{"post_id":"cipdewhhe002nqj7lj9u2o9j1","category_id":"cipdewhha002eqj7loh6qd1lc","_id":"cipdewhhn0030qj7lpzki3ua0"},{"post_id":"cipdewhh2001yqj7lt04ou2q0","category_id":"cipdewhha002eqj7loh6qd1lc","_id":"cipdewhho0034qj7l8bdb216v"},{"post_id":"cipdewhhg002rqj7lyovkmncs","category_id":"cipdewhfs0003qj7lnzkq11kz","_id":"cipdewhhp0037qj7lqmdssxeb"},{"post_id":"cipdewhh40023qj7lep50kgz4","category_id":"cipdewhha002eqj7loh6qd1lc","_id":"cipdewhhr003bqj7lbldfqglj"},{"post_id":"cipdewhh50026qj7lbk457g18","category_id":"cipdewhha002eqj7loh6qd1lc","_id":"cipdewhhs003fqj7lnnvn42t3"},{"post_id":"cipdewhh70029qj7ltskaq113","category_id":"cipdewhha002eqj7loh6qd1lc","_id":"cipdewhhu003kqj7l2krp5gxi"},{"post_id":"cipdewhhs003hqj7lvvr3wpe4","category_id":"cipdewhh60027qj7lzm0enevw","_id":"cipdewhhw003pqj7lm81f4ums"},{"post_id":"cipdewhht003jqj7ljdy5ofoh","category_id":"cipdewhh60027qj7lzm0enevw","_id":"cipdewhhy003sqj7li8eiy2ol"},{"post_id":"cipdewhhc002jqj7lefi8xfft","category_id":"cipdewhhs003gqj7lw4zfwe97","_id":"cipdewhi0003vqj7lnsgvo007"},{"post_id":"cipdewhhu003mqj7lasbwefs4","category_id":"cipdewhh60027qj7lzm0enevw","_id":"cipdewhi1003yqj7lsjv8fjki"},{"post_id":"cipdewhhw003qqj7l6q0ha7x3","category_id":"cipdewhh60027qj7lzm0enevw","_id":"cipdewhi30042qj7l840h73is"},{"post_id":"cipdewhhh002vqj7lctdc1fjy","category_id":"cipdewhhw003nqj7lotu5o5sg","_id":"cipdewhi30045qj7lnas2bhor"},{"post_id":"cipdewhhz003tqj7ll1vqwqcv","category_id":"cipdewhh60027qj7lzm0enevw","_id":"cipdewhi40048qj7lhiuvxzwx"},{"post_id":"cipdewhhm002zqj7lg2nntkoz","category_id":"cipdewhhw003nqj7lotu5o5sg","_id":"cipdewhi40049qj7ljkyxrxpb"},{"post_id":"cipdewhi1003zqj7ltjufq7ye","category_id":"cipdewhh60027qj7lzm0enevw","_id":"cipdewhi4004cqj7l2p8aur60"},{"post_id":"cipdewhhn0033qj7l0mc9sj89","category_id":"cipdewhi30041qj7lbk2fav5t","_id":"cipdewhi5004fqj7lpyfi935c"},{"post_id":"cipdewhho0036qj7lm6l4l2iv","category_id":"cipdewhi30047qj7lwmuqnu9y","_id":"cipdewhid004hqj7linqv96s9"},{"post_id":"cipdewhhq003aqj7l1r8fkclq","category_id":"cipdewhi4004dqj7lj5e3be7x","_id":"cipdewhie004lqj7lj5x7ij5s"},{"post_id":"cipdewhhr003eqj7l1m5as64t","category_id":"cipdewhie004jqj7lzpd42w55","_id":"cipdewhif004pqj7ldx4spwt4"}],"PostTag":[{"post_id":"cipdewhfu0005qj7ljntiugw2","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhg10009qj7lqdsdeanp"},{"post_id":"cipdewhfi0000qj7l57ceiwq3","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhg3000bqj7lcogqvnmy"},{"post_id":"cipdewhfn0001qj7lpql7frpx","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhg7000gqj7lkn8ybfq1"},{"post_id":"cipdewhg3000eqj7lca5270c7","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhg9000jqj7li124aazo"},{"post_id":"cipdewhg8000iqj7lzpsm13yi","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhgb000nqj7lk9kwtsk2"},{"post_id":"cipdewhft0004qj7ly8n8nmri","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhge000qqj7l4n0uycu3"},{"post_id":"cipdewhgc000pqj7laxu511lg","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhgh000uqj7ldcq50f7y"},{"post_id":"cipdewhgi000wqj7lzw4ldfnv","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhgl0010qj7l6afxkzbi"},{"post_id":"cipdewhgi000wqj7lzw4ldfnv","tag_id":"cipdewhgh000tqj7l4js3aofs","_id":"cipdewhgn0013qj7l0qsbq0sl"},{"post_id":"cipdewhfw0007qj7lmj668w7p","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhgq0017qj7liaor5fro"},{"post_id":"cipdewhfw0007qj7lmj668w7p","tag_id":"cipdewhga000lqj7l0772grq1","_id":"cipdewhgs001aqj7leff2g0vt"},{"post_id":"cipdewhfw0007qj7lmj668w7p","tag_id":"cipdewhgh000tqj7l4js3aofs","_id":"cipdewhgu001eqj7lfdxk8ddy"},{"post_id":"cipdewhg1000aqj7llf9b8oav","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhgw001hqj7lug0parmk"},{"post_id":"cipdewhg1000aqj7llf9b8oav","tag_id":"cipdewhgh000tqj7l4js3aofs","_id":"cipdewhgy001lqj7ldlx4ovud"},{"post_id":"cipdewhga000mqj7l7qkbn4wx","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhgz001oqj7l2ku4u9jd"},{"post_id":"cipdewhga000mqj7l7qkbn4wx","tag_id":"cipdewhgh000tqj7l4js3aofs","_id":"cipdewhh0001sqj7lejlhhvg7"},{"post_id":"cipdewhgg000sqj7lo2aea05r","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhh1001wqj7lso79plik"},{"post_id":"cipdewhgg000sqj7lo2aea05r","tag_id":"cipdewhgh000tqj7l4js3aofs","_id":"cipdewhh40020qj7l2u21zak6"},{"post_id":"cipdewhgj000yqj7lo5yv36mw","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhh50024qj7l1ivsw7lv"},{"post_id":"cipdewhgj000yqj7lo5yv36mw","tag_id":"cipdewhgy001kqj7lsamse34m","_id":"cipdewhh70028qj7lb0n9juk8"},{"post_id":"cipdewhgm0012qj7ls3f5p7we","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhh8002bqj7lu4aa5fy3"},{"post_id":"cipdewhgm0012qj7ls3f5p7we","tag_id":"cipdewhh0001tqj7l7ct9v9rq","_id":"cipdewhha002fqj7l52gtj2qt"},{"post_id":"cipdewhgn0015qj7lonzq37ne","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhhc002iqj7ltn43t6cg"},{"post_id":"cipdewhgn0015qj7lonzq37ne","tag_id":"cipdewhh40022qj7lah1ha6f7","_id":"cipdewhhd002lqj7lobtzzlr0"},{"post_id":"cipdewhgr0019qj7lwhd8hn33","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhhg002qqj7l482z8kj3"},{"post_id":"cipdewhgr0019qj7lwhd8hn33","tag_id":"cipdewhh40022qj7lah1ha6f7","_id":"cipdewhhh002tqj7l71g7i90x"},{"post_id":"cipdewhgt001cqj7l1haxl7bi","tag_id":"cipdewhfp0002qj7loa5v928c","_id":"cipdewhhl002yqj7l8kfjk8po"},{"post_id":"cipdewhgt001cqj7l1haxl7bi","tag_id":"cipdewhh40022qj7lah1ha6f7","_id":"cipdewhhn0031qj7lqk087lrz"},{"post_id":"cipdewhgv001gqj7lgjsb5rv9","tag_id":"cipdewhhf002oqj7lcu022jq4","_id":"cipdewhhp0038qj7lckf2vl0e"},{"post_id":"cipdewhgv001gqj7lgjsb5rv9","tag_id":"cipdewhhl002xqj7lpm5s3adw","_id":"cipdewhhr003cqj7l1926d5xa"},{"post_id":"cipdewhgw001jqj7ltqsfmjut","tag_id":"cipdewhhf002oqj7lcu022jq4","_id":"cipdewhhu003lqj7ljq2ehp4g"},{"post_id":"cipdewhgw001jqj7ltqsfmjut","tag_id":"cipdewhhr003dqj7l0u8757o3","_id":"cipdewhhw003oqj7lp9j94rtg"},{"post_id":"cipdewhgy001nqj7l3ttv5d01","tag_id":"cipdewhht003iqj7lv0gcj6ex","_id":"cipdewhi20040qj7lbsv4gdbx"},{"post_id":"cipdewhgy001nqj7l3ttv5d01","tag_id":"cipdewhhy003rqj7lah61t2qq","_id":"cipdewhi30043qj7lqulkenrm"},{"post_id":"cipdewhi1003zqj7ltjufq7ye","tag_id":"cipdewhi1003xqj7l61yg0kex","_id":"cipdewhi30046qj7lwa0x22ds"},{"post_id":"cipdewhgz001rqj7lsrt99zgh","tag_id":"cipdewhi1003xqj7l61yg0kex","_id":"cipdewhi4004bqj7ldmfek67e"},{"post_id":"cipdewhgz001rqj7lsrt99zgh","tag_id":"cipdewhi30044qj7lgiry0pky","_id":"cipdewhi5004eqj7lshs4ykjx"},{"post_id":"cipdewhh0001vqj7lfg6gskeb","tag_id":"cipdewhi4004aqj7l0mow0zfc","_id":"cipdewhid004iqj7l14b2bb6j"},{"post_id":"cipdewhh2001yqj7lt04ou2q0","tag_id":"cipdewhi4004aqj7l0mow0zfc","_id":"cipdewhie004mqj7ljsosock7"},{"post_id":"cipdewhh40023qj7lep50kgz4","tag_id":"cipdewhi4004aqj7l0mow0zfc","_id":"cipdewhif004oqj7l6szk5qxe"},{"post_id":"cipdewhh50026qj7lbk457g18","tag_id":"cipdewhi4004aqj7l0mow0zfc","_id":"cipdewhig004rqj7lv0n56ee4"},{"post_id":"cipdewhh70029qj7ltskaq113","tag_id":"cipdewhi4004aqj7l0mow0zfc","_id":"cipdewhih004tqj7l0m23wi91"},{"post_id":"cipdewhh8002cqj7ltiq91an7","tag_id":"cipdewhhl002xqj7lpm5s3adw","_id":"cipdewhij004wqj7ljerui5ja"},{"post_id":"cipdewhh8002cqj7ltiq91an7","tag_id":"cipdewhih004uqj7lyp5ppulj","_id":"cipdewhij004xqj7lfx2r6df0"},{"post_id":"cipdewhhb002gqj7lr6prf324","tag_id":"cipdewhi4004aqj7l0mow0zfc","_id":"cipdewhij004zqj7ltlwqsmwe"},{"post_id":"cipdewhhc002jqj7lefi8xfft","tag_id":"cipdewhij004yqj7lrbezoi7b","_id":"cipdewhik0052qj7lwngxoeki"},{"post_id":"cipdewhhc002jqj7lefi8xfft","tag_id":"cipdewhi30044qj7lgiry0pky","_id":"cipdewhik0053qj7lk60ddbwh"},{"post_id":"cipdewhhe002nqj7lj9u2o9j1","tag_id":"cipdewhi4004aqj7l0mow0zfc","_id":"cipdewhik0055qj7lamlc9n2r"},{"post_id":"cipdewhhg002rqj7lyovkmncs","tag_id":"cipdewhhl002xqj7lpm5s3adw","_id":"cipdewhil0058qj7l4ysh0hh8"},{"post_id":"cipdewhhg002rqj7lyovkmncs","tag_id":"cipdewhik0056qj7lfvg3yvgh","_id":"cipdewhil0059qj7l8myb8a3n"},{"post_id":"cipdewhhh002vqj7lctdc1fjy","tag_id":"cipdewhil0057qj7l96r8lkcw","_id":"cipdewhim005cqj7l1qc21grg"},{"post_id":"cipdewhhh002vqj7lctdc1fjy","tag_id":"cipdewhil005aqj7l22pogl0i","_id":"cipdewhim005dqj7lwyfi1qpd"},{"post_id":"cipdewhhm002zqj7lg2nntkoz","tag_id":"cipdewhil0057qj7l96r8lkcw","_id":"cipdewhin005gqj7l97e9qo8x"},{"post_id":"cipdewhhm002zqj7lg2nntkoz","tag_id":"cipdewhil005aqj7l22pogl0i","_id":"cipdewhin005hqj7lx5qxepce"},{"post_id":"cipdewhhn0033qj7l0mc9sj89","tag_id":"cipdewhim005fqj7lbt6lr7tx","_id":"cipdewhin005kqj7l5m1ywlh3"},{"post_id":"cipdewhhn0033qj7l0mc9sj89","tag_id":"cipdewhin005iqj7lj97v06r8","_id":"cipdewhin005lqj7lg8c9xtt1"},{"post_id":"cipdewhho0036qj7lm6l4l2iv","tag_id":"cipdewhin005jqj7l87ldkxqe","_id":"cipdewhin005nqj7lv5wkh15d"},{"post_id":"cipdewhhq003aqj7l1r8fkclq","tag_id":"cipdewhin005mqj7ldl2jurot","_id":"cipdewhio005pqj7lcthsppma"},{"post_id":"cipdewhhr003eqj7l1m5as64t","tag_id":"cipdewhin005oqj7l6aosafii","_id":"cipdewhio005rqj7lghgulswi"},{"post_id":"cipdewhhs003hqj7lvvr3wpe4","tag_id":"cipdewhi1003xqj7l61yg0kex","_id":"cipdewhio005tqj7ls152hzzf"},{"post_id":"cipdewhht003jqj7ljdy5ofoh","tag_id":"cipdewhi1003xqj7l61yg0kex","_id":"cipdewhio005vqj7l9773oo3n"},{"post_id":"cipdewhhu003mqj7lasbwefs4","tag_id":"cipdewhi1003xqj7l61yg0kex","_id":"cipdewhip005xqj7lqwz86ds9"},{"post_id":"cipdewhhw003qqj7l6q0ha7x3","tag_id":"cipdewhi1003xqj7l61yg0kex","_id":"cipdewhip005zqj7lkgk442za"},{"post_id":"cipdewhhz003tqj7ll1vqwqcv","tag_id":"cipdewhi1003xqj7l61yg0kex","_id":"cipdewhip0060qj7ldl1g2eep"}],"Tag":[{"name":"ACM","_id":"cipdewhfp0002qj7loa5v928c"},{"name":"背包","_id":"cipdewhga000lqj7l0772grq1"},{"name":"DP","_id":"cipdewhgh000tqj7l4js3aofs"},{"name":"Search","_id":"cipdewhgy001kqj7lsamse34m"},{"name":"网络流","_id":"cipdewhh0001tqj7l7ct9v9rq"},{"name":"dp","_id":"cipdewhh40022qj7lah1ha6f7"},{"name":"leveldb","_id":"cipdewhhf002oqj7lcu022jq4"},{"name":"algorithm","_id":"cipdewhhl002xqj7lpm5s3adw"},{"name":"go","_id":"cipdewhhr003dqj7l0u8757o3"},{"name":"summary","_id":"cipdewhht003iqj7lv0gcj6ex"},{"name":"work","_id":"cipdewhhy003rqj7lah61t2qq"},{"name":"nginx","_id":"cipdewhi1003xqj7l61yg0kex"},{"name":"mac","_id":"cipdewhi30044qj7lgiry0pky"},{"name":"GraphicsMagick","_id":"cipdewhi4004aqj7l0mow0zfc"},{"name":"leetcode","_id":"cipdewhih004uqj7lyp5ppulj"},{"name":"network","_id":"cipdewhij004yqj7lrbezoi7b"},{"name":"gas-station","_id":"cipdewhik0056qj7lfvg3yvgh"},{"name":"weed-fs","_id":"cipdewhil0057qj7l96r8lkcw"},{"name":"storage","_id":"cipdewhil005aqj7l22pogl0i"},{"name":"golang","_id":"cipdewhim005fqj7lbt6lr7tx"},{"name":"net","_id":"cipdewhin005iqj7lj97v06r8"},{"name":"BPG","_id":"cipdewhin005jqj7l87ldkxqe"},{"name":"linux","_id":"cipdewhin005mqj7ldl2jurot"},{"name":"ffmpeg","_id":"cipdewhin005oqj7l6aosafii"}]}}